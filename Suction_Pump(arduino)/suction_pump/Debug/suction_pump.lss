
suction_pump.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  000055c8  0000565c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002aa  00800218  00800218  00005774  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005774  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000748  00000000  00000000  00005810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000157ed  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003144  00000000  00000000  0001b745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000047d9  00000000  00000000  0001e889  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c1c  00000000  00000000  00023064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004346  00000000  00000000  00024c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a9be  00000000  00000000  00028fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  00033984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__ctors_end>
       4:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
       8:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
       c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      10:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      14:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      18:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      1c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      20:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      24:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      28:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      2c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      30:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      34:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      38:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      3c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      40:	0c 94 96 12 	jmp	0x252c	; 0x252c <__vector_16>
      44:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      48:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__vector_18>
      4c:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__vector_19>
      50:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      54:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      58:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      5c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      60:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__vector_24>
      64:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240
      86:	86 15       	cp	r24, r6
      88:	95 15       	cp	r25, r5
      8a:	99 15       	cp	r25, r9
      8c:	9d 15       	cp	r25, r13
      8e:	a1 15       	cp	r26, r1
      90:	a5 15       	cp	r26, r5
      92:	a9 15       	cp	r26, r9
      94:	ad 15       	cp	r26, r13
      96:	b1 15       	cp	r27, r1
      98:	b5 15       	cp	r27, r5
      9a:	b9 15       	cp	r27, r9
      9c:	bd 15       	cp	r27, r13
      9e:	c1 15       	cp	r28, r1
      a0:	c5 15       	cp	r28, r5
      a2:	c9 15       	cp	r28, r9
      a4:	cd 15       	cp	r28, r13
      a6:	d1 15       	cp	r29, r1
      a8:	d5 15       	cp	r29, r5
      aa:	d9 15       	cp	r29, r9
      ac:	dd 15       	cp	r29, r13
      ae:	e1 15       	cp	r30, r1
      b0:	e5 15       	cp	r30, r5

000000b2 <__trampolines_end>:
	...
     22e:	00 20       	and	r0, r0
	...
     248:	00 00       	nop
     24a:	00 70       	andi	r16, 0x00	; 0
	...
     264:	00 00       	nop
     266:	00 70       	andi	r16, 0x00	; 0
	...
     280:	c0 00       	.word	0x00c0	; ????
     282:	00 60       	ori	r16, 0x00	; 0
	...
     298:	00 00       	nop
     29a:	06 00       	.word	0x0006	; ????
     29c:	c0 18       	sub	r12, r0
     29e:	00 e0       	ldi	r16, 0x00	; 0
	...
     2b4:	00 30       	cpi	r16, 0x00	; 0
     2b6:	06 00       	.word	0x0006	; ????
     2b8:	c0 18       	sub	r12, r0
     2ba:	00 e0       	ldi	r16, 0x00	; 0
	...
     2d0:	00 30       	cpi	r16, 0x00	; 0
     2d2:	06 00       	.word	0x0006	; ????
     2d4:	c0 38       	cpi	r28, 0x80	; 128
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__trampolines_end+0x226>
	...
     2e8:	00 00       	nop
     2ea:	80 00       	.word	0x0080	; ????
     2ec:	00 18       	sub	r0, r0
     2ee:	06 00       	.word	0x0006	; ????
     2f0:	c0 30       	cpi	r28, 0x00	; 0
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <__trampolines_end+0x244>
	...
     304:	00 01       	movw	r0, r0
     306:	c0 00       	.word	0x00c0	; ????
     308:	c0 18       	sub	r12, r0
     30a:	06 00       	.word	0x0006	; ????
     30c:	c0 30       	cpi	r28, 0x00	; 0
     30e:	01 c0       	rjmp	.+2      	; 0x312 <__trampolines_end+0x260>
	...
     320:	00 00       	nop
     322:	e0 00       	.word	0x00e0	; ????
     324:	c0 18       	sub	r12, r0
     326:	06 00       	.word	0x0006	; ????
     328:	c0 30       	cpi	r28, 0x00	; 0
     32a:	01 80       	ldd	r0, Z+1	; 0x01
	...
     33c:	00 00       	nop
     33e:	e0 00       	.word	0x00e0	; ????
     340:	c0 18       	sub	r12, r0
     342:	02 00       	.word	0x0002	; ????
     344:	c0 30       	cpi	r28, 0x00	; 0
     346:	03 80       	ldd	r0, Z+3	; 0x03
	...
     358:	00 00       	nop
     35a:	70 00       	.word	0x0070	; ????
     35c:	60 18       	sub	r6, r0
     35e:	00 00       	nop
     360:	00 30       	cpi	r16, 0x00	; 0
     362:	03 80       	ldd	r0, Z+3	; 0x03
	...
     374:	00 00       	nop
     376:	38 00       	.word	0x0038	; ????
     378:	60 08       	sbc	r6, r0
     37a:	00 00       	nop
     37c:	00 00       	nop
     37e:	03 00       	.word	0x0003	; ????
     380:	0c 00       	.word	0x000c	; ????
	...
     392:	38 00       	.word	0x0038	; ????
     394:	60 00       	.word	0x0060	; ????
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	07 00       	.word	0x0007	; ????
     39c:	0c 00       	.word	0x000c	; ????
	...
     3ae:	1c 00       	.word	0x001c	; ????
     3b0:	30 00       	.word	0x0030	; ????
     3b2:	00 00       	nop
     3b4:	00 00       	nop
     3b6:	07 00       	.word	0x0007	; ????
     3b8:	1c 00       	.word	0x001c	; ????
	...
     3ca:	1c 00       	.word	0x001c	; ????
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	00 00       	nop
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	18 00       	.word	0x0018	; ????
	...
     3e6:	0e 00       	.word	0x000e	; ????
	...
     3f0:	38 00       	.word	0x0038	; ????
	...
     402:	07 00       	.word	0x0007	; ????
	...
     40c:	30 02       	muls	r19, r16
	...
     41e:	07 00       	.word	0x0007	; ????
	...
     428:	60 07       	cpc	r22, r16
	...
     43a:	03 80       	ldd	r0, Z+3	; 0x03
	...
     444:	00 06       	cpc	r0, r16
	...
     452:	00 00       	nop
     454:	00 30       	cpi	r16, 0x00	; 0
     456:	01 00       	.word	0x0001	; ????
	...
     460:	00 0c       	add	r0, r0
	...
     46e:	00 00       	nop
     470:	00 30       	cpi	r16, 0x00	; 0
	...
     47a:	00 00       	nop
     47c:	00 1c       	adc	r0, r0
	...
     48a:	00 00       	nop
     48c:	00 18       	sub	r0, r0
	...
     496:	00 00       	nop
     498:	00 18       	sub	r0, r0
	...
     4a6:	00 00       	nop
     4a8:	00 1c       	adc	r0, r0
     4aa:	00 0c       	add	r0, r0
     4ac:	06 04       	cpc	r0, r6
     4ae:	00 00       	nop
     4b0:	00 06       	cpc	r0, r16
     4b2:	06 18       	sub	r0, r6
     4b4:	00 30       	cpi	r16, 0x00	; 0
	...
     4c2:	00 00       	nop
     4c4:	00 0e       	add	r0, r16
     4c6:	00 1f       	adc	r16, r16
     4c8:	1f 0c       	add	r1, r15
     4ca:	00 00       	nop
     4cc:	00 1f       	adc	r16, r16
     4ce:	0f 3e       	cpi	r16, 0xEF	; 239
     4d0:	00 10       	cpse	r0, r0
     4d2:	03 00       	.word	0x0003	; ????
	...
     4e0:	00 06       	cpc	r0, r16
     4e2:	00 33       	cpi	r16, 0x30	; 48
     4e4:	1b 1c       	adc	r1, r11
     4e6:	00 00       	nop
     4e8:	00 1b       	sub	r16, r16
     4ea:	19 e6       	ldi	r17, 0x69	; 105
     4ec:	00 00       	nop
     4ee:	03 00       	.word	0x0003	; ????
	...
     4fc:	00 02       	muls	r16, r16
     4fe:	00 33       	cpi	r16, 0x30	; 48
     500:	19 bc       	out	0x29, r1	; 41
     502:	00 00       	nop
     504:	00 19       	sub	r16, r0
     506:	99 fc       	.word	0xfc99	; ????
     508:	00 00       	nop
     50a:	06 00       	.word	0x0006	; ????
	...
     518:	20 00       	.word	0x0020	; ????
     51a:	00 33       	cpi	r16, 0x30	; 48
     51c:	19 fc       	.word	0xfc19	; ????
     51e:	00 00       	nop
     520:	00 19       	sub	r16, r0
     522:	99 f6       	brne	.-90     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     524:	00 00       	nop
     526:	0c 00       	.word	0x000c	; ????
	...
     534:	30 00       	.word	0x0030	; ????
     536:	00 33       	cpi	r16, 0x30	; 48
     538:	19 fe       	.word	0xfe19	; ????
     53a:	00 00       	nop
     53c:	00 19       	sub	r16, r0
     53e:	99 e6       	ldi	r25, 0x69	; 105
     540:	00 00       	nop
     542:	1c 00       	.word	0x001c	; ????
	...
     550:	18 00       	.word	0x0018	; ????
     552:	00 33       	cpi	r16, 0x30	; 48
     554:	1b 7e       	andi	r17, 0xEB	; 235
     556:	00 00       	nop
     558:	00 1b       	sub	r16, r16
     55a:	19 a6       	std	Y+41, r1	; 0x29
     55c:	00 00       	nop
     55e:	38 00       	.word	0x0038	; ????
	...
     56c:	0c 00       	.word	0x000c	; ????
     56e:	00 1e       	adc	r0, r16
     570:	cf 0c       	add	r12, r15
     572:	00 00       	nop
     574:	00 0f       	add	r16, r16
     576:	6f 3c       	cpi	r22, 0xCF	; 207
     578:	00 00       	nop
     57a:	10 00       	.word	0x0010	; ????
	...
     588:	06 00       	.word	0x0006	; ????
	...
     5a2:	00 00       	nop
     5a4:	03 00       	.word	0x0003	; ????
	...
     5b2:	00 03       	mulsu	r16, r16
	...
     5cc:	00 00       	nop
     5ce:	00 07       	cpc	r16, r16
	...
     5e8:	00 00       	nop
     5ea:	00 0c       	add	r0, r0
	...
     5f4:	00 00       	nop
     5f6:	00 10       	cpse	r0, r0
	...
     604:	00 00       	nop
     606:	00 18       	sub	r0, r0
	...
     610:	00 00       	nop
     612:	00 38       	cpi	r16, 0x80	; 128
	...
     620:	00 00       	nop
     622:	00 70       	andi	r16, 0x00	; 0
	...
     62c:	00 00       	nop
     62e:	00 1c       	adc	r0, r0
	...
     63c:	00 00       	nop
     63e:	00 20       	and	r0, r0
	...
     648:	00 00       	nop
     64a:	00 0f       	add	r16, r16
	...
     664:	00 00       	nop
     666:	00 03       	mulsu	r16, r16
     668:	80 00       	.word	0x0080	; ????
	...
     682:	00 01       	movw	r0, r0
     684:	80 00       	.word	0x0080	; ????
	...
     692:	00 00       	nop
     694:	04 00       	.word	0x0004	; ????
	...
     6ae:	00 00       	nop
     6b0:	0e 00       	.word	0x000e	; ????
	...
     6ca:	00 00       	nop
     6cc:	1c 00       	.word	0x001c	; ????
	...
     6e6:	00 00       	nop
     6e8:	70 00       	.word	0x0070	; ????
	...
     6f2:	0c 00       	.word	0x000c	; ????
	...
     704:	e0 00       	.word	0x00e0	; ????
	...
     70e:	0e 00       	.word	0x000e	; ????
	...
     720:	80 00       	.word	0x0080	; ????
	...
     72a:	07 80       	ldd	r0, Z+7	; 0x07
	...
     744:	00 00       	nop
     746:	01 e0       	ldi	r16, 0x01	; 1
	...
     760:	00 00       	nop
     762:	00 60       	ori	r16, 0x00	; 0
	...
     790:	00 10       	cpse	r0, r0
	...
     7aa:	00 00       	nop
     7ac:	00 70       	andi	r16, 0x00	; 0
	...
     7c6:	00 00       	nop
     7c8:	01 e0       	ldi	r16, 0x01	; 1
	...
     7e2:	00 00       	nop
     7e4:	03 80       	ldd	r0, Z+3	; 0x03
	...
     7fe:	00 00       	nop
     800:	06 00       	.word	0x0006	; ????
     802:	00 00       	nop
     804:	00 00       	nop
     806:	00 00       	nop
     808:	00 01       	movw	r0, r0
     80a:	80 00       	.word	0x0080	; ????
	...
     824:	00 01       	movw	r0, r0
     826:	f0 00       	.word	0x00f0	; ????
	...
     840:	00 00       	nop
     842:	7c 00       	.word	0x007c	; ????
	...
     85c:	00 00       	nop
     85e:	1c 00       	.word	0x001c	; ????
	...
     870:	00 00       	nop
     872:	0e 00       	.word	0x000e	; ????
	...
     88c:	00 00       	nop
     88e:	3e 00       	.word	0x003e	; ????
	...
     8a8:	00 01       	movw	r0, r0
     8aa:	fc 00       	.word	0x00fc	; ????
	...
     8c4:	00 0f       	add	r16, r16
     8c6:	f0 00       	.word	0x00f0	; ????
	...
     8e0:	00 3f       	cpi	r16, 0xF0	; 240
     8e2:	80 00       	.word	0x0080	; ????
	...
     8fc:	00 fc       	sbrc	r0, 0
     8fe:	00 00       	nop
     900:	00 00       	nop
     902:	00 00       	nop
     904:	08 00       	.word	0x0008	; ????
     906:	00 30       	cpi	r16, 0x00	; 0
     908:	18 60       	ori	r17, 0x08	; 8
	...
     916:	60 30       	cpi	r22, 0x00	; 0
     918:	c0 f0       	brcs	.+48     	; 0x94a <__stack+0x4b>
     91a:	00 00       	nop
     91c:	00 00       	nop
     91e:	00 00       	nop
     920:	0f 00       	.word	0x000f	; ????
     922:	00 7c       	andi	r16, 0xC0	; 192
     924:	7d f0       	brhs	.+30     	; 0x944 <__stack+0x45>
	...
     932:	f8 79       	andi	r31, 0x98	; 152
     934:	f0 00       	.word	0x00f0	; ????
     936:	00 00       	nop
     938:	00 00       	nop
     93a:	00 00       	nop
     93c:	0f f0       	brie	.+2      	; 0x940 <__stack+0x41>
     93e:	00 6c       	ori	r16, 0xC0	; 192
     940:	6d b0       	in	r6, 0x0d	; 13
	...
     94e:	d8 cf       	rjmp	.-80     	; 0x900 <__stack+0x1>
     950:	30 00       	.word	0x0030	; ????
     952:	00 00       	nop
     954:	00 00       	nop
     956:	00 00       	nop
     958:	01 fe       	sbrs	r0, 1
     95a:	00 cc       	rjmp	.-2048   	; 0x15c <__trampolines_end+0xaa>
     95c:	66 30       	cpi	r22, 0x06	; 6
	...
     966:	00 00       	nop
     968:	00 01       	movw	r0, r0
     96a:	98 cf       	rjmp	.-208    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
     96c:	b0 00       	.word	0x00b0	; ????
     96e:	00 00       	nop
     970:	00 00       	nop
     972:	00 00       	nop
     974:	00 3f       	cpi	r16, 0xF0	; 240
     976:	e0 cc       	rjmp	.-1600   	; 0x338 <__trampolines_end+0x286>
     978:	66 30       	cpi	r22, 0x06	; 6
	...
     982:	00 00       	nop
     984:	00 01       	movw	r0, r0
     986:	98 cd       	rjmp	.-1232   	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     988:	e0 00       	.word	0x00e0	; ????
     98a:	00 00       	nop
     98c:	00 00       	nop
     98e:	00 00       	nop
     990:	00 03       	mulsu	r16, r16
     992:	e0 cc       	rjmp	.-1600   	; 0x354 <__trampolines_end+0x2a2>
     994:	66 60       	ori	r22, 0x06	; 6
	...
     99e:	00 00       	nop
     9a0:	00 01       	movw	r0, r0
     9a2:	98 cf       	rjmp	.-208    	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
     9a4:	30 00       	.word	0x0030	; ????
	...
     9ae:	40 6c       	ori	r20, 0xC0	; 192
     9b0:	6c c0       	rjmp	.+216    	; 0xa8a <__stack+0x18b>
	...
     9be:	d8 cf       	rjmp	.-80     	; 0x970 <__stack+0x71>
     9c0:	30 00       	.word	0x0030	; ????
	...
     9ca:	00 7b       	andi	r16, 0xB0	; 176
     9cc:	bd f0       	brhs	.+46     	; 0x9fc <__stack+0xfd>
	...
     9da:	f3 79       	andi	r31, 0x93	; 147
     9dc:	f0 00       	.word	0x00f0	; ????
	...
     9f6:	00 00       	nop
     9f8:	40 00       	.word	0x0040	; ????
	...
     a16:	60 00       	.word	0x0060	; ????
	...
     a30:	00 0f       	add	r16, r16
     a32:	f0 00       	.word	0x00f0	; ????
	...
     a4c:	00 0f       	add	r16, r16
     a4e:	80 00       	.word	0x0080	; ????
	...
     a70:	00 f0       	brcs	.+0      	; 0xa72 <__stack+0x173>
	...
     a8a:	00 00       	nop
     a8c:	00 ff       	sbrs	r16, 0
	...
     aa6:	00 00       	nop
     aa8:	00 0f       	add	r16, r16
	...
     b4a:	f8 00       	.word	0x00f8	; ????
	...
     b64:	00 07       	cpc	r16, r16
     b66:	f8 00       	.word	0x00f8	; ????
	...
     b80:	00 04       	cpc	r0, r0
	...
     ba2:	00 00       	nop
     ba4:	01 fe       	sbrs	r0, 1
	...
     bbe:	00 00       	nop
     bc0:	01 fe       	sbrs	r0, 1
	...
     c7a:	00 00       	nop
     c7c:	00 07       	cpc	r16, r16
     c7e:	f8 00       	.word	0x00f8	; ????
	...
     c98:	00 03       	mulsu	r16, r16
     c9a:	f8 00       	.word	0x00f8	; ????
	...
     cbc:	00 16       	cp	r0, r16
	...
     cd6:	00 00       	nop
     cd8:	01 fe       	sbrs	r0, 1
	...
     cf2:	00 00       	nop
     cf4:	01 f0       	breq	.+0      	; 0xcf6 <__stack+0x3f7>
	...
     d92:	00 00       	nop
     d94:	00 0f       	add	r16, r16
     d96:	80 00       	.word	0x0080	; ????
	...
     db0:	00 0f       	add	r16, r16
     db2:	f0 00       	.word	0x00f0	; ????
	...
     dcc:	00 00       	nop
     dce:	20 00       	.word	0x0020	; ????
     dd0:	00 00       	nop
     dd2:	00 00       	nop
     dd4:	00 01       	movw	r0, r0
     dd6:	80 00       	.word	0x0080	; ????
	...
     df0:	00 3f       	cpi	r16, 0xF0	; 240
     df2:	80 00       	.word	0x0080	; ????
	...
     e0c:	00 7e       	andi	r16, 0xE0	; 224
	...
     eaa:	00 00       	nop
     eac:	00 78       	andi	r16, 0x80	; 128
	...
     ec6:	00 00       	nop
     ec8:	00 3f       	cpi	r16, 0xF0	; 240
     eca:	80 00       	.word	0x0080	; ????
	...
     ee4:	00 07       	cpc	r16, r16
     ee6:	80 00       	.word	0x0080	; ????
     ee8:	00 00       	nop
     eea:	00 00       	nop
     eec:	00 00       	nop
     eee:	60 00       	.word	0x0060	; ????
	...
     f08:	00 03       	mulsu	r16, r16
     f0a:	f0 00       	.word	0x00f0	; ????
	...
     f24:	00 0f       	add	r16, r16
     f26:	80 00       	.word	0x0080	; ????
	...
     f40:	00 0c       	add	r0, r0
     f42:	00 03       	mulsu	r16, r16
     f44:	c0 00       	.word	0x00c0	; ????
	...
     f52:	f0 70       	andi	r31, 0x00	; 0
	...
     f5c:	00 00       	nop
     f5e:	00 03       	mulsu	r16, r16
     f60:	e0 00       	.word	0x00e0	; ????
	...
     f6a:	00 00       	nop
     f6c:	00 01       	movw	r0, r0
     f6e:	f8 70       	andi	r31, 0x08	; 8
	...
     f78:	00 00       	nop
     f7a:	00 06       	cpc	r0, r16
     f7c:	30 00       	.word	0x0030	; ????
	...
     f86:	00 00       	nop
     f88:	00 01       	movw	r0, r0
     f8a:	9c 70       	andi	r25, 0x0C	; 12
	...
     f94:	00 00       	nop
     f96:	00 06       	cpc	r0, r16
     f98:	30 00       	.word	0x0030	; ????
	...
     fa2:	00 00       	nop
     fa4:	00 01       	movw	r0, r0
     fa6:	8c 70       	andi	r24, 0x0C	; 12
     fa8:	03 00       	.word	0x0003	; ????
	...
     fb2:	00 06       	cpc	r0, r16
     fb4:	30 00       	.word	0x0030	; ????
	...
     fbe:	00 00       	nop
     fc0:	00 fd       	sbrc	r16, 0
     fc2:	8c 70       	andi	r24, 0x0C	; 12
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <__stack+0x6cd>
	...
     fce:	00 06       	cpc	r0, r16
     fd0:	30 00       	.word	0x0030	; ????
	...
     fda:	00 00       	nop
     fdc:	00 01       	movw	r0, r0
     fde:	8c 70       	andi	r24, 0x0C	; 12
     fe0:	00 f8       	bld	r0, 0
	...
     fea:	07 06       	cpc	r0, r23
     fec:	30 00       	.word	0x0030	; ????
	...
     ff6:	00 00       	nop
     ff8:	00 01       	movw	r0, r0
     ffa:	9c 70       	andi	r25, 0x0C	; 12
     ffc:	00 18       	sub	r0, r0
	...
    1006:	1f 03       	fmul	r17, r23
    1008:	60 00       	.word	0x0060	; ????
	...
    1012:	00 00       	nop
    1014:	00 01       	movw	r0, r0
    1016:	d9 70       	andi	r29, 0x09	; 9
	...
    1020:	00 00       	nop
    1022:	7e 03       	fmul	r23, r22
    1024:	e0 00       	.word	0x00e0	; ????
	...
    1032:	f3 70       	andi	r31, 0x03	; 3
	...
    103c:	00 01       	movw	r0, r0
    103e:	f8 00       	.word	0x00f8	; ????
	...
    1058:	00 03       	mulsu	r16, r16
    105a:	e0 00       	.word	0x00e0	; ????
	...
    1074:	00 0f       	add	r16, r16
    1076:	80 00       	.word	0x0080	; ????
	...
    1088:	40 00       	.word	0x0040	; ????
    108a:	00 00       	nop
    108c:	00 00       	nop
    108e:	00 00       	nop
    1090:	00 3e       	cpi	r16, 0xE0	; 224
	...
    10a2:	00 00       	nop
    10a4:	e0 00       	.word	0x00e0	; ????
    10a6:	00 00       	nop
    10a8:	00 00       	nop
    10aa:	00 00       	nop
    10ac:	00 38       	cpi	r16, 0x80	; 128
	...
    10be:	00 00       	nop
    10c0:	f8 00       	.word	0x00f8	; ????
    10c2:	00 00       	nop
    10c4:	00 00       	nop
    10c6:	00 00       	nop
    10c8:	00 20       	and	r0, r0
	...
    10da:	00 00       	nop
    10dc:	3e 00       	.word	0x003e	; ????
	...
    10ee:	c0 ef       	ldi	r28, 0xF0	; 240
    10f0:	c0 00       	.word	0x00c0	; ????
    10f2:	00 00       	nop
    10f4:	00 00       	nop
    10f6:	00 00       	nop
    10f8:	0f 80       	ldd	r0, Y+7	; 0x07
	...
    110a:	e0 ef       	ldi	r30, 0xF0	; 240
    110c:	e0 00       	.word	0x00e0	; ????
    110e:	00 00       	nop
    1110:	00 00       	nop
    1112:	00 00       	nop
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <__stack+0x825>
	...
    1126:	e0 ec       	ldi	r30, 0xC0	; 192
    1128:	67 f0       	brie	.+24     	; 0x1142 <__stack+0x843>
    112a:	00 00       	nop
    112c:	00 00       	nop
    112e:	00 00       	nop
    1130:	01 f0       	breq	.+0      	; 0x1132 <__stack+0x833>
	...
    1142:	f1 ec       	ldi	r31, 0xC1	; 193
    1144:	6f f0       	brie	.+26     	; 0x1160 <__stack+0x861>
    1146:	00 00       	nop
    1148:	00 00       	nop
    114a:	00 00       	nop
    114c:	00 7c       	andi	r16, 0xC0	; 192
	...
    115e:	f1 ec       	ldi	r31, 0xC1	; 193
    1160:	ec 30       	cpi	r30, 0x0C	; 12
    1162:	00 00       	nop
    1164:	00 00       	nop
    1166:	00 00       	nop
    1168:	00 1c       	adc	r0, r0
	...
    117a:	db ef       	ldi	r29, 0xFB	; 251
    117c:	cc 30       	cpi	r28, 0x0C	; 12
    117e:	00 00       	nop
    1180:	00 00       	nop
    1182:	00 00       	nop
    1184:	00 0c       	add	r0, r0
	...
    1196:	db 6c       	ori	r29, 0xCB	; 203
    1198:	0c 30       	cpi	r16, 0x0C	; 12
	...
    11b2:	df 6c       	ori	r29, 0xCF	; 207
    11b4:	0c 30       	cpi	r16, 0x0C	; 12
	...
    11ce:	ce 6c       	ori	r28, 0xCE	; 206
    11d0:	0e 70       	andi	r16, 0x0E	; 14
	...
    11ea:	ce 6c       	ori	r28, 0xCE	; 206
    11ec:	07 f0       	brie	.+0      	; 0x11ee <__stack+0x8ef>
	...

000013f2 <digital_pin_to_timer_PGM>:
    13f2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    1402:	00 00 00 00                                         ....

00001406 <digital_pin_to_bit_mask_PGM>:
    1406:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    1416:	04 08 10 20                                         ... 

0000141a <digital_pin_to_port_PGM>:
    141a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    142a:	03 03 03 03                                         ....

0000142e <port_to_output_PGM>:
    142e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00001438 <port_to_mode_PGM>:
    1438:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00001442 <__ctors_start>:
    1442:	38 0c       	add	r3, r8
    1444:	c2 10       	cpse	r12, r2
    1446:	84 22       	and	r8, r20

00001448 <__ctors_end>:
    1448:	11 24       	eor	r1, r1
    144a:	1f be       	out	0x3f, r1	; 63
    144c:	cf ef       	ldi	r28, 0xFF	; 255
    144e:	d8 e0       	ldi	r29, 0x08	; 8
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	cd bf       	out	0x3d, r28	; 61

00001454 <__do_copy_data>:
    1454:	12 e0       	ldi	r17, 0x02	; 2
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b1 e0       	ldi	r27, 0x01	; 1
    145a:	e8 ec       	ldi	r30, 0xC8	; 200
    145c:	f5 e5       	ldi	r31, 0x55	; 85
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <__do_copy_data+0x10>
    1460:	05 90       	lpm	r0, Z+
    1462:	0d 92       	st	X+, r0
    1464:	a8 31       	cpi	r26, 0x18	; 24
    1466:	b1 07       	cpc	r27, r17
    1468:	d9 f7       	brne	.-10     	; 0x1460 <__do_copy_data+0xc>

0000146a <__do_clear_bss>:
    146a:	24 e0       	ldi	r18, 0x04	; 4
    146c:	a8 e1       	ldi	r26, 0x18	; 24
    146e:	b2 e0       	ldi	r27, 0x02	; 2
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <.do_clear_bss_start>

00001472 <.do_clear_bss_loop>:
    1472:	1d 92       	st	X+, r1

00001474 <.do_clear_bss_start>:
    1474:	a2 3c       	cpi	r26, 0xC2	; 194
    1476:	b2 07       	cpc	r27, r18
    1478:	e1 f7       	brne	.-8      	; 0x1472 <.do_clear_bss_loop>

0000147a <__do_global_ctors>:
    147a:	1a e0       	ldi	r17, 0x0A	; 10
    147c:	c4 e2       	ldi	r28, 0x24	; 36
    147e:	da e0       	ldi	r29, 0x0A	; 10
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__do_global_ctors+0x10>
    1482:	21 97       	sbiw	r28, 0x01	; 1
    1484:	fe 01       	movw	r30, r28
    1486:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__tablejump2__>
    148a:	c1 32       	cpi	r28, 0x21	; 33
    148c:	d1 07       	cpc	r29, r17
    148e:	c9 f7       	brne	.-14     	; 0x1482 <__do_global_ctors+0x8>
    1490:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <main>
    1494:	0c 94 e2 2a 	jmp	0x55c4	; 0x55c4 <_exit>

00001498 <__bad_interrupt>:
    1498:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000149c <setup>:

/***************************************************************************************/
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);
AMS5812 dPress(Wire,0x10,AMS5812::AMS5812_1000_D);
/**************************************************************************************/
void setup() {
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14a8:	26 e0       	ldi	r18, 0x06	; 6
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	55 e2       	ldi	r21, 0x25	; 37
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	8e e4       	ldi	r24, 0x4E	; 78
    14b4:	93 e0       	ldi	r25, 0x03	; 3
    14b6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  tft.begin();
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN14TFT_22_ILI92255beginEv>
  tft.setOrientation(1);
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN14TFT_22_ILI922514setOrientationEh>
  tft.drawBitmap(0, 0,meter,220,176, COLOR_WHITE); //draw bitmap
    14cc:	cc 24       	eor	r12, r12
    14ce:	ca 94       	dec	r12
    14d0:	dc 2c       	mov	r13, r12
    14d2:	90 eb       	ldi	r25, 0xB0	; 176
    14d4:	e9 2e       	mov	r14, r25
    14d6:	f1 2c       	mov	r15, r1
    14d8:	0c ed       	ldi	r16, 0xDC	; 220
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	22 eb       	ldi	r18, 0xB2	; 178
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	93 e0       	ldi	r25, 0x03	; 3
    14ec:	0e 94 fe 20 	call	0x41fc	; 0x41fc <_ZN14TFT_22_ILI922510drawBitmapEiiPKhiij>
  tft.drawLine(110,110,110+50*cos(150*(PI/180)),110+50*sin(150*(PI/180)),WHITE);
    14f0:	ee 24       	eor	r14, r14
    14f2:	ea 94       	dec	r14
    14f4:	fe 2c       	mov	r15, r14
    14f6:	07 e8       	ldi	r16, 0x87	; 135
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	22 e4       	ldi	r18, 0x42	; 66
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4e e6       	ldi	r20, 0x6E	; 110
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	6e e6       	ldi	r22, 0x6E	; 110
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
  tft.drawCircle(110, 110, 10,COLOR_WHITE);
    150e:	0f ef       	ldi	r16, 0xFF	; 255
    1510:	1f ef       	ldi	r17, 0xFF	; 255
    1512:	2a e0       	ldi	r18, 0x0A	; 10
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	4e e6       	ldi	r20, 0x6E	; 110
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	6e e6       	ldi	r22, 0x6E	; 110
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN14TFT_22_ILI922510drawCircleEjjjj>
  tft.setBacklight(HIGH);
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	93 e0       	ldi	r25, 0x03	; 3
    152c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <_ZN14TFT_22_ILI922512setBacklightEb>
  // put your setup code here, to run once:
  while(!Serial){}

  // starting communication with the 
  // static pressure transducer
  if (dPress.begin() < 0) {
    1530:	88 e1       	ldi	r24, 0x18	; 24
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN7AMS58125beginEv>
    1538:	97 ff       	sbrs	r25, 7
    153a:	07 c0       	rjmp	.+14     	; 0x154a <setup+0xae>
    Serial.println("Error communicating with sensor, check wiring and I2C address");
    153c:	6c e1       	ldi	r22, 0x1C	; 28
    153e:	71 e0       	ldi	r23, 0x01	; 1
    1540:	8e e4       	ldi	r24, 0x4E	; 78
    1542:	93 e0       	ldi	r25, 0x03	; 3
    1544:	0e 94 4b 11 	call	0x2296	; 0x2296 <_ZN5Print7printlnEPKc>
    1548:	ff cf       	rjmp	.-2      	; 0x1548 <setup+0xac>
    while(1){}
  }
}
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	08 95       	ret

00001558 <loop>:


void loop() {
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
  
  dPress.readSensor();
    1578:	88 e1       	ldi	r24, 0x18	; 24
    157a:	92 e0       	ldi	r25, 0x02	; 2
    157c:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <_ZN7AMS581210readSensorEv>
  tft.drawRectangle(0, 0, tft.maxX() - 1, tft.maxY() - 1, COLOR_WHITE);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN14TFT_22_ILI92254maxYEv>
    1588:	8c 01       	movw	r16, r24
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	93 e0       	ldi	r25, 0x03	; 3
    158e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <_ZN14TFT_22_ILI92254maxXEv>
    1592:	01 50       	subi	r16, 0x01	; 1
    1594:	11 09       	sbc	r17, r1
    1596:	9c 01       	movw	r18, r24
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	31 09       	sbc	r19, r1
    159c:	ee 24       	eor	r14, r14
    159e:	ea 94       	dec	r14
    15a0:	fe 2c       	mov	r15, r14
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	93 e0       	ldi	r25, 0x03	; 3
    15ae:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  // displaying the data
  pressure = dPress.getPressure_Pa(); //Pressure in pascal
    15b2:	88 e1       	ldi	r24, 0x18	; 24
    15b4:	92 e0       	ldi	r25, 0x02	; 2
    15b6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <_ZN7AMS581214getPressure_PaEv>
    15ba:	2b 01       	movw	r4, r22
    15bc:	3c 01       	movw	r6, r24
  if(pressure >= 1700000)
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	35 e8       	ldi	r19, 0x85	; 133
    15c2:	4f ec       	ldi	r20, 0xCF	; 207
    15c4:	59 e4       	ldi	r21, 0x49	; 73
    15c6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__gesf2>
    15ca:	87 ff       	sbrs	r24, 7
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <loop+0x88>
void loop() {
  
  dPress.readSensor();
  tft.drawRectangle(0, 0, tft.maxX() - 1, tft.maxY() - 1, COLOR_WHITE);
  // displaying the data
  pressure = dPress.getPressure_Pa(); //Pressure in pascal
    15ce:	40 92 4a 03 	sts	0x034A, r4	; 0x80034a <pressure>
    15d2:	50 92 4b 03 	sts	0x034B, r5	; 0x80034b <pressure+0x1>
    15d6:	60 92 4c 03 	sts	0x034C, r6	; 0x80034c <pressure+0x2>
    15da:	70 92 4d 03 	sts	0x034D, r7	; 0x80034d <pressure+0x3>
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <loop+0x98>
  if(pressure >= 1700000)
  {
    pressure=0;
    15e0:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <pressure>
    15e4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <pressure+0x1>
    15e8:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <pressure+0x2>
    15ec:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <pressure+0x3>
  }
  
  float kPa = (pressure/1000); //pressure in Kilo  pascal
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	54 e4       	ldi	r21, 0x44	; 68
    15f8:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <pressure>
    15fc:	70 91 4b 03 	lds	r23, 0x034B	; 0x80034b <pressure+0x1>
    1600:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <pressure+0x2>
    1604:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <pressure+0x3>
    1608:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
    160c:	6b 01       	movw	r12, r22
    160e:	7c 01       	movw	r14, r24
    1610:	c8 ec       	ldi	r28, 0xC8	; 200
    1612:	d0 e0       	ldi	r29, 0x00	; 0
  float final_pressure = 0;
    1614:	41 2c       	mov	r4, r1
    1616:	51 2c       	mov	r5, r1
    1618:	32 01       	movw	r6, r4
  int i = 200;
  
  while(i)
  {
    final_pressure = final_pressure+kPa;  
    161a:	a7 01       	movw	r20, r14
    161c:	96 01       	movw	r18, r12
    161e:	c3 01       	movw	r24, r6
    1620:	b2 01       	movw	r22, r4
    1622:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    1626:	2b 01       	movw	r4, r22
    1628:	3c 01       	movw	r6, r24
    i--;
    delay(1);
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    1636:	21 97       	sbiw	r28, 0x01	; 1
  
  float kPa = (pressure/1000); //pressure in Kilo  pascal
  float final_pressure = 0;
  int i = 200;
  
  while(i)
    1638:	81 f7       	brne	.-32     	; 0x161a <loop+0xc2>
  {
    final_pressure = final_pressure+kPa;  
    i--;
    delay(1);
  }
  final_pressure = final_pressure/200;
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	48 e4       	ldi	r20, 0x48	; 72
    1640:	53 e4       	ldi	r21, 0x43	; 67
    1642:	c3 01       	movw	r24, r6
    1644:	b2 01       	movw	r22, r4
    1646:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
    164a:	2b 01       	movw	r4, r22
    164c:	3c 01       	movw	r6, r24

  Current_Angle = map(final_pressure,0,100,150,400);
    164e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fixsfsi>
    1652:	1f 92       	push	r1
    1654:	1f 92       	push	r1
    1656:	21 e0       	ldi	r18, 0x01	; 1
    1658:	2f 93       	push	r18
    165a:	20 e9       	ldi	r18, 0x90	; 144
    165c:	2f 93       	push	r18
    165e:	26 e9       	ldi	r18, 0x96	; 150
    1660:	a2 2e       	mov	r10, r18
    1662:	b1 2c       	mov	r11, r1
    1664:	c1 2c       	mov	r12, r1
    1666:	d1 2c       	mov	r13, r1
    1668:	14 e6       	ldi	r17, 0x64	; 100
    166a:	e1 2e       	mov	r14, r17
    166c:	f1 2c       	mov	r15, r1
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_Z3maplllll>
    167c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1680:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  Serial.print("Pressure =\t");
    1684:	6a e5       	ldi	r22, 0x5A	; 90
    1686:	71 e0       	ldi	r23, 0x01	; 1
    1688:	8e e4       	ldi	r24, 0x4E	; 78
    168a:	93 e0       	ldi	r25, 0x03	; 3
    168c:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN5Print5printEPKc>
  Serial.print(final_pressure,4);
    1690:	24 e0       	ldi	r18, 0x04	; 4
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	b3 01       	movw	r22, r6
    1696:	a2 01       	movw	r20, r4
    1698:	8e e4       	ldi	r24, 0x4E	; 78
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN5Print5printEdi>
  Serial.print("kPa");
    16a0:	66 e6       	ldi	r22, 0x66	; 102
    16a2:	71 e0       	ldi	r23, 0x01	; 1
    16a4:	8e e4       	ldi	r24, 0x4E	; 78
    16a6:	93 e0       	ldi	r25, 0x03	; 3
    16a8:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN5Print5printEPKc>
  //Serial.print(Angle);
  Serial.print("\n");
    16ac:	6d e7       	ldi	r22, 0x7D	; 125
    16ae:	71 e0       	ldi	r23, 0x01	; 1
    16b0:	8e e4       	ldi	r24, 0x4E	; 78
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN5Print5printEPKc>

Current_Pressure = final_pressure;  
    16b8:	c3 01       	movw	r24, r6
    16ba:	b2 01       	movw	r22, r4
    16bc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fixsfsi>
    16c0:	70 93 47 03 	sts	0x0347, r23	; 0x800347 <Current_Pressure+0x1>
    16c4:	60 93 46 03 	sts	0x0346, r22	; 0x800346 <Current_Pressure>
if(Current_Pressure != Previous_Pressure)
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <Previous_Pressure>
    16d4:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <Previous_Pressure+0x1>
    16d8:	26 17       	cp	r18, r22
    16da:	37 07       	cpc	r19, r23
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <loop+0x188>
    16de:	b7 c0       	rjmp	.+366    	; 0x184e <loop+0x2f6>
{
 tft.drawLine(110,110,110+50*cos(Previous_Angle*(PI/180)),110+50*sin(Previous_Angle*(PI/180)),BLACK);
    16e0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Previous_Angle>
    16e4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Previous_Angle+0x1>
    16e8:	07 2e       	mov	r0, r23
    16ea:	00 0c       	add	r0, r0
    16ec:	88 0b       	sbc	r24, r24
    16ee:	99 0b       	sbc	r25, r25
    16f0:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__floatsisf>
    16f4:	25 e3       	ldi	r18, 0x35	; 53
    16f6:	3a ef       	ldi	r19, 0xFA	; 250
    16f8:	4e e8       	ldi	r20, 0x8E	; 142
    16fa:	5c e3       	ldi	r21, 0x3C	; 60
    16fc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    1700:	2b 01       	movw	r4, r22
    1702:	3c 01       	movw	r6, r24
    1704:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sin>
    1708:	4b 01       	movw	r8, r22
    170a:	5c 01       	movw	r10, r24
    170c:	c3 01       	movw	r24, r6
    170e:	b2 01       	movw	r22, r4
    1710:	0e 94 bb 0c 	call	0x1976	; 0x1976 <cos>
    1714:	6b 01       	movw	r12, r22
    1716:	7c 01       	movw	r14, r24
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	48 e4       	ldi	r20, 0x48	; 72
    171e:	52 e4       	ldi	r21, 0x42	; 66
    1720:	c5 01       	movw	r24, r10
    1722:	b4 01       	movw	r22, r8
    1724:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4c ed       	ldi	r20, 0xDC	; 220
    172e:	52 e4       	ldi	r21, 0x42	; 66
    1730:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    1734:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    1738:	4b 01       	movw	r8, r22
    173a:	5c 01       	movw	r10, r24
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	48 e4       	ldi	r20, 0x48	; 72
    1742:	52 e4       	ldi	r21, 0x42	; 66
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4c ed       	ldi	r20, 0xDC	; 220
    1752:	52 e4       	ldi	r21, 0x42	; 66
    1754:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    1758:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    175c:	e1 2c       	mov	r14, r1
    175e:	f1 2c       	mov	r15, r1
    1760:	84 01       	movw	r16, r8
    1762:	9b 01       	movw	r18, r22
    1764:	4e e6       	ldi	r20, 0x6E	; 110
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	6e e6       	ldi	r22, 0x6E	; 110
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
 tft.drawCircle(110, 110, 10,COLOR_WHITE);
    1774:	0f ef       	ldi	r16, 0xFF	; 255
    1776:	1f ef       	ldi	r17, 0xFF	; 255
    1778:	2a e0       	ldi	r18, 0x0A	; 10
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4e e6       	ldi	r20, 0x6E	; 110
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	6e e6       	ldi	r22, 0x6E	; 110
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	93 e0       	ldi	r25, 0x03	; 3
    1788:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN14TFT_22_ILI922510drawCircleEjjjj>
 delay(15);
    178c:	6f e0       	ldi	r22, 0x0F	; 15
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
 tft.drawLine(110,110,110+50*cos(Current_Angle*(PI/180)),110+50*sin(Current_Angle*(PI/180)),WHITE);
    1798:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    179c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    17a0:	07 2e       	mov	r0, r23
    17a2:	00 0c       	add	r0, r0
    17a4:	88 0b       	sbc	r24, r24
    17a6:	99 0b       	sbc	r25, r25
    17a8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__floatsisf>
    17ac:	25 e3       	ldi	r18, 0x35	; 53
    17ae:	3a ef       	ldi	r19, 0xFA	; 250
    17b0:	4e e8       	ldi	r20, 0x8E	; 142
    17b2:	5c e3       	ldi	r21, 0x3C	; 60
    17b4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    17b8:	2b 01       	movw	r4, r22
    17ba:	3c 01       	movw	r6, r24
    17bc:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sin>
    17c0:	4b 01       	movw	r8, r22
    17c2:	5c 01       	movw	r10, r24
    17c4:	c3 01       	movw	r24, r6
    17c6:	b2 01       	movw	r22, r4
    17c8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <cos>
    17cc:	6b 01       	movw	r12, r22
    17ce:	7c 01       	movw	r14, r24
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	48 e4       	ldi	r20, 0x48	; 72
    17d6:	52 e4       	ldi	r21, 0x42	; 66
    17d8:	c5 01       	movw	r24, r10
    17da:	b4 01       	movw	r22, r8
    17dc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4c ed       	ldi	r20, 0xDC	; 220
    17e6:	52 e4       	ldi	r21, 0x42	; 66
    17e8:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    17ec:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    17f0:	2b 01       	movw	r4, r22
    17f2:	3c 01       	movw	r6, r24
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	48 e4       	ldi	r20, 0x48	; 72
    17fa:	52 e4       	ldi	r21, 0x42	; 66
    17fc:	c7 01       	movw	r24, r14
    17fe:	b6 01       	movw	r22, r12
    1800:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4c ed       	ldi	r20, 0xDC	; 220
    180a:	52 e4       	ldi	r21, 0x42	; 66
    180c:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    1810:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    1814:	ee 24       	eor	r14, r14
    1816:	ea 94       	dec	r14
    1818:	fe 2c       	mov	r15, r14
    181a:	82 01       	movw	r16, r4
    181c:	9b 01       	movw	r18, r22
    181e:	4e e6       	ldi	r20, 0x6E	; 110
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	6e e6       	ldi	r22, 0x6E	; 110
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	93 e0       	ldi	r25, 0x03	; 3
    182a:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
 
 Previous_Pressure = Current_Pressure;
    182e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <Current_Pressure>
    1832:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <Current_Pressure+0x1>
    1836:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <Previous_Pressure+0x1>
    183a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <Previous_Pressure>
 Previous_Angle = Current_Angle;
    183e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1842:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1846:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Previous_Angle+0x1>
    184a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Previous_Angle>
}

 

}
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	df 90       	pop	r13
    185c:	cf 90       	pop	r12
    185e:	bf 90       	pop	r11
    1860:	af 90       	pop	r10
    1862:	9f 90       	pop	r9
    1864:	8f 90       	pop	r8
    1866:	7f 90       	pop	r7
    1868:	6f 90       	pop	r6
    186a:	5f 90       	pop	r5
    186c:	4f 90       	pop	r4
    186e:	08 95       	ret

00001870 <_GLOBAL__sub_I_pressure>:
    1870:	ef 92       	push	r14
    1872:	0f 93       	push	r16
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/***************************************************************************************/
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	e8 2e       	mov	r14, r24
    1878:	03 e0       	ldi	r16, 0x03	; 3
    187a:	2a e0       	ldi	r18, 0x0A	; 10
    187c:	49 e0       	ldi	r20, 0x09	; 9
    187e:	68 e0       	ldi	r22, 0x08	; 8
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZN14TFT_22_ILI9225C1Eaaaah>
AMS5812 dPress(Wire,0x10,AMS5812::AMS5812_1000_D);
    1888:	2f e0       	ldi	r18, 0x0F	; 15
    188a:	40 e1       	ldi	r20, 0x10	; 16
    188c:	64 ef       	ldi	r22, 0xF4	; 244
    188e:	73 e0       	ldi	r23, 0x03	; 3
    1890:	88 e1       	ldi	r24, 0x18	; 24
    1892:	92 e0       	ldi	r25, 0x02	; 2
 Previous_Angle = Current_Angle;
}

 

}
    1894:	0f 91       	pop	r16
    1896:	ef 90       	pop	r14
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/***************************************************************************************/
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);
AMS5812 dPress(Wire,0x10,AMS5812::AMS5812_1000_D);
    1898:	0c 94 bd 13 	jmp	0x277a	; 0x277a <_ZN7AMS5812C1ER7TwoWirehNS_10TransducerE>

0000189c <__subsf3>:
    189c:	50 58       	subi	r21, 0x80	; 128

0000189e <__addsf3>:
    189e:	bb 27       	eor	r27, r27
    18a0:	aa 27       	eor	r26, r26
    18a2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__addsf3x>
    18a6:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_round>
    18aa:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fp_pscA>
    18ae:	38 f0       	brcs	.+14     	; 0x18be <__addsf3+0x20>
    18b0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscB>
    18b4:	20 f0       	brcs	.+8      	; 0x18be <__addsf3+0x20>
    18b6:	39 f4       	brne	.+14     	; 0x18c6 <__addsf3+0x28>
    18b8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <__addsf3+0x24>
    18bc:	26 f4       	brtc	.+8      	; 0x18c6 <__addsf3+0x28>
    18be:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__fp_nan>
    18c2:	0e f4       	brtc	.+2      	; 0x18c6 <__addsf3+0x28>
    18c4:	e0 95       	com	r30
    18c6:	e7 fb       	bst	r30, 7
    18c8:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__fp_inf>

000018cc <__addsf3x>:
    18cc:	e9 2f       	mov	r30, r25
    18ce:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__fp_split3>
    18d2:	58 f3       	brcs	.-42     	; 0x18aa <__addsf3+0xc>
    18d4:	ba 17       	cp	r27, r26
    18d6:	62 07       	cpc	r22, r18
    18d8:	73 07       	cpc	r23, r19
    18da:	84 07       	cpc	r24, r20
    18dc:	95 07       	cpc	r25, r21
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <__addsf3x+0x1c>
    18e0:	79 f4       	brne	.+30     	; 0x1900 <__addsf3x+0x34>
    18e2:	a6 f5       	brtc	.+104    	; 0x194c <__addsf3x+0x80>
    18e4:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__fp_zero>
    18e8:	0e f4       	brtc	.+2      	; 0x18ec <__addsf3x+0x20>
    18ea:	e0 95       	com	r30
    18ec:	0b 2e       	mov	r0, r27
    18ee:	ba 2f       	mov	r27, r26
    18f0:	a0 2d       	mov	r26, r0
    18f2:	0b 01       	movw	r0, r22
    18f4:	b9 01       	movw	r22, r18
    18f6:	90 01       	movw	r18, r0
    18f8:	0c 01       	movw	r0, r24
    18fa:	ca 01       	movw	r24, r20
    18fc:	a0 01       	movw	r20, r0
    18fe:	11 24       	eor	r1, r1
    1900:	ff 27       	eor	r31, r31
    1902:	59 1b       	sub	r21, r25
    1904:	99 f0       	breq	.+38     	; 0x192c <__addsf3x+0x60>
    1906:	59 3f       	cpi	r21, 0xF9	; 249
    1908:	50 f4       	brcc	.+20     	; 0x191e <__addsf3x+0x52>
    190a:	50 3e       	cpi	r21, 0xE0	; 224
    190c:	68 f1       	brcs	.+90     	; 0x1968 <__addsf3x+0x9c>
    190e:	1a 16       	cp	r1, r26
    1910:	f0 40       	sbci	r31, 0x00	; 0
    1912:	a2 2f       	mov	r26, r18
    1914:	23 2f       	mov	r18, r19
    1916:	34 2f       	mov	r19, r20
    1918:	44 27       	eor	r20, r20
    191a:	58 5f       	subi	r21, 0xF8	; 248
    191c:	f3 cf       	rjmp	.-26     	; 0x1904 <__addsf3x+0x38>
    191e:	46 95       	lsr	r20
    1920:	37 95       	ror	r19
    1922:	27 95       	ror	r18
    1924:	a7 95       	ror	r26
    1926:	f0 40       	sbci	r31, 0x00	; 0
    1928:	53 95       	inc	r21
    192a:	c9 f7       	brne	.-14     	; 0x191e <__addsf3x+0x52>
    192c:	7e f4       	brtc	.+30     	; 0x194c <__addsf3x+0x80>
    192e:	1f 16       	cp	r1, r31
    1930:	ba 0b       	sbc	r27, r26
    1932:	62 0b       	sbc	r22, r18
    1934:	73 0b       	sbc	r23, r19
    1936:	84 0b       	sbc	r24, r20
    1938:	ba f0       	brmi	.+46     	; 0x1968 <__addsf3x+0x9c>
    193a:	91 50       	subi	r25, 0x01	; 1
    193c:	a1 f0       	breq	.+40     	; 0x1966 <__addsf3x+0x9a>
    193e:	ff 0f       	add	r31, r31
    1940:	bb 1f       	adc	r27, r27
    1942:	66 1f       	adc	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	c2 f7       	brpl	.-16     	; 0x193a <__addsf3x+0x6e>
    194a:	0e c0       	rjmp	.+28     	; 0x1968 <__addsf3x+0x9c>
    194c:	ba 0f       	add	r27, r26
    194e:	62 1f       	adc	r22, r18
    1950:	73 1f       	adc	r23, r19
    1952:	84 1f       	adc	r24, r20
    1954:	48 f4       	brcc	.+18     	; 0x1968 <__addsf3x+0x9c>
    1956:	87 95       	ror	r24
    1958:	77 95       	ror	r23
    195a:	67 95       	ror	r22
    195c:	b7 95       	ror	r27
    195e:	f7 95       	ror	r31
    1960:	9e 3f       	cpi	r25, 0xFE	; 254
    1962:	08 f0       	brcs	.+2      	; 0x1966 <__addsf3x+0x9a>
    1964:	b0 cf       	rjmp	.-160    	; 0x18c6 <__addsf3+0x28>
    1966:	93 95       	inc	r25
    1968:	88 0f       	add	r24, r24
    196a:	08 f0       	brcs	.+2      	; 0x196e <__addsf3x+0xa2>
    196c:	99 27       	eor	r25, r25
    196e:	ee 0f       	add	r30, r30
    1970:	97 95       	ror	r25
    1972:	87 95       	ror	r24
    1974:	08 95       	ret

00001976 <cos>:
    1976:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_rempio2>
    197a:	e3 95       	inc	r30
    197c:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_sinus>

00001980 <__divsf3>:
    1980:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__divsf3x>
    1984:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_round>
    1988:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscB>
    198c:	58 f0       	brcs	.+22     	; 0x19a4 <__divsf3+0x24>
    198e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fp_pscA>
    1992:	40 f0       	brcs	.+16     	; 0x19a4 <__divsf3+0x24>
    1994:	29 f4       	brne	.+10     	; 0x19a0 <__divsf3+0x20>
    1996:	5f 3f       	cpi	r21, 0xFF	; 255
    1998:	29 f0       	breq	.+10     	; 0x19a4 <__divsf3+0x24>
    199a:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__fp_inf>
    199e:	51 11       	cpse	r21, r1
    19a0:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__fp_szero>
    19a4:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__fp_nan>

000019a8 <__divsf3x>:
    19a8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__fp_split3>
    19ac:	68 f3       	brcs	.-38     	; 0x1988 <__divsf3+0x8>

000019ae <__divsf3_pse>:
    19ae:	99 23       	and	r25, r25
    19b0:	b1 f3       	breq	.-20     	; 0x199e <__divsf3+0x1e>
    19b2:	55 23       	and	r21, r21
    19b4:	91 f3       	breq	.-28     	; 0x199a <__divsf3+0x1a>
    19b6:	95 1b       	sub	r25, r21
    19b8:	55 0b       	sbc	r21, r21
    19ba:	bb 27       	eor	r27, r27
    19bc:	aa 27       	eor	r26, r26
    19be:	62 17       	cp	r22, r18
    19c0:	73 07       	cpc	r23, r19
    19c2:	84 07       	cpc	r24, r20
    19c4:	38 f0       	brcs	.+14     	; 0x19d4 <__divsf3_pse+0x26>
    19c6:	9f 5f       	subi	r25, 0xFF	; 255
    19c8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	44 1f       	adc	r20, r20
    19d0:	aa 1f       	adc	r26, r26
    19d2:	a9 f3       	breq	.-22     	; 0x19be <__divsf3_pse+0x10>
    19d4:	35 d0       	rcall	.+106    	; 0x1a40 <__divsf3_pse+0x92>
    19d6:	0e 2e       	mov	r0, r30
    19d8:	3a f0       	brmi	.+14     	; 0x19e8 <__divsf3_pse+0x3a>
    19da:	e0 e8       	ldi	r30, 0x80	; 128
    19dc:	32 d0       	rcall	.+100    	; 0x1a42 <__divsf3_pse+0x94>
    19de:	91 50       	subi	r25, 0x01	; 1
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	e6 95       	lsr	r30
    19e4:	00 1c       	adc	r0, r0
    19e6:	ca f7       	brpl	.-14     	; 0x19da <__divsf3_pse+0x2c>
    19e8:	2b d0       	rcall	.+86     	; 0x1a40 <__divsf3_pse+0x92>
    19ea:	fe 2f       	mov	r31, r30
    19ec:	29 d0       	rcall	.+82     	; 0x1a40 <__divsf3_pse+0x92>
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	bb 1f       	adc	r27, r27
    19f6:	26 17       	cp	r18, r22
    19f8:	37 07       	cpc	r19, r23
    19fa:	48 07       	cpc	r20, r24
    19fc:	ab 07       	cpc	r26, r27
    19fe:	b0 e8       	ldi	r27, 0x80	; 128
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <__divsf3_pse+0x56>
    1a02:	bb 0b       	sbc	r27, r27
    1a04:	80 2d       	mov	r24, r0
    1a06:	bf 01       	movw	r22, r30
    1a08:	ff 27       	eor	r31, r31
    1a0a:	93 58       	subi	r25, 0x83	; 131
    1a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0e:	3a f0       	brmi	.+14     	; 0x1a1e <__divsf3_pse+0x70>
    1a10:	9e 3f       	cpi	r25, 0xFE	; 254
    1a12:	51 05       	cpc	r21, r1
    1a14:	78 f0       	brcs	.+30     	; 0x1a34 <__divsf3_pse+0x86>
    1a16:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__fp_inf>
    1a1a:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__fp_szero>
    1a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a20:	e4 f3       	brlt	.-8      	; 0x1a1a <__divsf3_pse+0x6c>
    1a22:	98 3e       	cpi	r25, 0xE8	; 232
    1a24:	d4 f3       	brlt	.-12     	; 0x1a1a <__divsf3_pse+0x6c>
    1a26:	86 95       	lsr	r24
    1a28:	77 95       	ror	r23
    1a2a:	67 95       	ror	r22
    1a2c:	b7 95       	ror	r27
    1a2e:	f7 95       	ror	r31
    1a30:	9f 5f       	subi	r25, 0xFF	; 255
    1a32:	c9 f7       	brne	.-14     	; 0x1a26 <__divsf3_pse+0x78>
    1a34:	88 0f       	add	r24, r24
    1a36:	91 1d       	adc	r25, r1
    1a38:	96 95       	lsr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	97 f9       	bld	r25, 7
    1a3e:	08 95       	ret
    1a40:	e1 e0       	ldi	r30, 0x01	; 1
    1a42:	66 0f       	add	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	62 17       	cp	r22, r18
    1a4c:	73 07       	cpc	r23, r19
    1a4e:	84 07       	cpc	r24, r20
    1a50:	ba 07       	cpc	r27, r26
    1a52:	20 f0       	brcs	.+8      	; 0x1a5c <__divsf3_pse+0xae>
    1a54:	62 1b       	sub	r22, r18
    1a56:	73 0b       	sbc	r23, r19
    1a58:	84 0b       	sbc	r24, r20
    1a5a:	ba 0b       	sbc	r27, r26
    1a5c:	ee 1f       	adc	r30, r30
    1a5e:	88 f7       	brcc	.-30     	; 0x1a42 <__divsf3_pse+0x94>
    1a60:	e0 95       	com	r30
    1a62:	08 95       	ret

00001a64 <__fixsfsi>:
    1a64:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    1a68:	68 94       	set
    1a6a:	b1 11       	cpse	r27, r1
    1a6c:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__fp_szero>
    1a70:	08 95       	ret

00001a72 <__fixunssfsi>:
    1a72:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fp_splitA>
    1a76:	88 f0       	brcs	.+34     	; 0x1a9a <__fixunssfsi+0x28>
    1a78:	9f 57       	subi	r25, 0x7F	; 127
    1a7a:	98 f0       	brcs	.+38     	; 0x1aa2 <__fixunssfsi+0x30>
    1a7c:	b9 2f       	mov	r27, r25
    1a7e:	99 27       	eor	r25, r25
    1a80:	b7 51       	subi	r27, 0x17	; 23
    1a82:	b0 f0       	brcs	.+44     	; 0x1ab0 <__fixunssfsi+0x3e>
    1a84:	e1 f0       	breq	.+56     	; 0x1abe <__fixunssfsi+0x4c>
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	1a f0       	brmi	.+6      	; 0x1a96 <__fixunssfsi+0x24>
    1a90:	ba 95       	dec	r27
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__fixunssfsi+0x14>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <__fixunssfsi+0x4c>
    1a96:	b1 30       	cpi	r27, 0x01	; 1
    1a98:	91 f0       	breq	.+36     	; 0x1abe <__fixunssfsi+0x4c>
    1a9a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_zero>
    1a9e:	b1 e0       	ldi	r27, 0x01	; 1
    1aa0:	08 95       	ret
    1aa2:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__fp_zero>
    1aa6:	67 2f       	mov	r22, r23
    1aa8:	78 2f       	mov	r23, r24
    1aaa:	88 27       	eor	r24, r24
    1aac:	b8 5f       	subi	r27, 0xF8	; 248
    1aae:	39 f0       	breq	.+14     	; 0x1abe <__fixunssfsi+0x4c>
    1ab0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ab2:	cc f3       	brlt	.-14     	; 0x1aa6 <__fixunssfsi+0x34>
    1ab4:	86 95       	lsr	r24
    1ab6:	77 95       	ror	r23
    1ab8:	67 95       	ror	r22
    1aba:	b3 95       	inc	r27
    1abc:	d9 f7       	brne	.-10     	; 0x1ab4 <__fixunssfsi+0x42>
    1abe:	3e f4       	brtc	.+14     	; 0x1ace <__fixunssfsi+0x5c>
    1ac0:	90 95       	com	r25
    1ac2:	80 95       	com	r24
    1ac4:	70 95       	com	r23
    1ac6:	61 95       	neg	r22
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aca:	8f 4f       	sbci	r24, 0xFF	; 255
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	08 95       	ret

00001ad0 <__floatunsisf>:
    1ad0:	e8 94       	clt
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <__floatsisf+0x12>

00001ad4 <__floatsisf>:
    1ad4:	97 fb       	bst	r25, 7
    1ad6:	3e f4       	brtc	.+14     	; 0x1ae6 <__floatsisf+0x12>
    1ad8:	90 95       	com	r25
    1ada:	80 95       	com	r24
    1adc:	70 95       	com	r23
    1ade:	61 95       	neg	r22
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	99 23       	and	r25, r25
    1ae8:	a9 f0       	breq	.+42     	; 0x1b14 <__floatsisf+0x40>
    1aea:	f9 2f       	mov	r31, r25
    1aec:	96 e9       	ldi	r25, 0x96	; 150
    1aee:	bb 27       	eor	r27, r27
    1af0:	93 95       	inc	r25
    1af2:	f6 95       	lsr	r31
    1af4:	87 95       	ror	r24
    1af6:	77 95       	ror	r23
    1af8:	67 95       	ror	r22
    1afa:	b7 95       	ror	r27
    1afc:	f1 11       	cpse	r31, r1
    1afe:	f8 cf       	rjmp	.-16     	; 0x1af0 <__floatsisf+0x1c>
    1b00:	fa f4       	brpl	.+62     	; 0x1b40 <__floatsisf+0x6c>
    1b02:	bb 0f       	add	r27, r27
    1b04:	11 f4       	brne	.+4      	; 0x1b0a <__floatsisf+0x36>
    1b06:	60 ff       	sbrs	r22, 0
    1b08:	1b c0       	rjmp	.+54     	; 0x1b40 <__floatsisf+0x6c>
    1b0a:	6f 5f       	subi	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	16 c0       	rjmp	.+44     	; 0x1b40 <__floatsisf+0x6c>
    1b14:	88 23       	and	r24, r24
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <__floatsisf+0x48>
    1b18:	96 e9       	ldi	r25, 0x96	; 150
    1b1a:	11 c0       	rjmp	.+34     	; 0x1b3e <__floatsisf+0x6a>
    1b1c:	77 23       	and	r23, r23
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <__floatsisf+0x54>
    1b20:	9e e8       	ldi	r25, 0x8E	; 142
    1b22:	87 2f       	mov	r24, r23
    1b24:	76 2f       	mov	r23, r22
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <__floatsisf+0x5e>
    1b28:	66 23       	and	r22, r22
    1b2a:	71 f0       	breq	.+28     	; 0x1b48 <__floatsisf+0x74>
    1b2c:	96 e8       	ldi	r25, 0x86	; 134
    1b2e:	86 2f       	mov	r24, r22
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	2a f0       	brmi	.+10     	; 0x1b40 <__floatsisf+0x6c>
    1b36:	9a 95       	dec	r25
    1b38:	66 0f       	add	r22, r22
    1b3a:	77 1f       	adc	r23, r23
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	da f7       	brpl	.-10     	; 0x1b36 <__floatsisf+0x62>
    1b40:	88 0f       	add	r24, r24
    1b42:	96 95       	lsr	r25
    1b44:	87 95       	ror	r24
    1b46:	97 f9       	bld	r25, 7
    1b48:	08 95       	ret

00001b4a <__fp_inf>:
    1b4a:	97 f9       	bld	r25, 7
    1b4c:	9f 67       	ori	r25, 0x7F	; 127
    1b4e:	80 e8       	ldi	r24, 0x80	; 128
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	08 95       	ret

00001b56 <__fp_nan>:
    1b56:	9f ef       	ldi	r25, 0xFF	; 255
    1b58:	80 ec       	ldi	r24, 0xC0	; 192
    1b5a:	08 95       	ret

00001b5c <__fp_pscA>:
    1b5c:	00 24       	eor	r0, r0
    1b5e:	0a 94       	dec	r0
    1b60:	16 16       	cp	r1, r22
    1b62:	17 06       	cpc	r1, r23
    1b64:	18 06       	cpc	r1, r24
    1b66:	09 06       	cpc	r0, r25
    1b68:	08 95       	ret

00001b6a <__fp_pscB>:
    1b6a:	00 24       	eor	r0, r0
    1b6c:	0a 94       	dec	r0
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	14 06       	cpc	r1, r20
    1b74:	05 06       	cpc	r0, r21
    1b76:	08 95       	ret
    1b78:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__fp_nan>

00001b7c <__fp_rempio2>:
    1b7c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fp_splitA>
    1b80:	d8 f3       	brcs	.-10     	; 0x1b78 <__fp_pscB+0xe>
    1b82:	e8 94       	clt
    1b84:	e0 e0       	ldi	r30, 0x00	; 0
    1b86:	bb 27       	eor	r27, r27
    1b88:	9f 57       	subi	r25, 0x7F	; 127
    1b8a:	f0 f0       	brcs	.+60     	; 0x1bc8 <__fp_rempio2+0x4c>
    1b8c:	2a ed       	ldi	r18, 0xDA	; 218
    1b8e:	3f e0       	ldi	r19, 0x0F	; 15
    1b90:	49 ec       	ldi	r20, 0xC9	; 201
    1b92:	06 c0       	rjmp	.+12     	; 0x1ba0 <__fp_rempio2+0x24>
    1b94:	ee 0f       	add	r30, r30
    1b96:	bb 0f       	add	r27, r27
    1b98:	66 1f       	adc	r22, r22
    1b9a:	77 1f       	adc	r23, r23
    1b9c:	88 1f       	adc	r24, r24
    1b9e:	28 f0       	brcs	.+10     	; 0x1baa <__fp_rempio2+0x2e>
    1ba0:	b2 3a       	cpi	r27, 0xA2	; 162
    1ba2:	62 07       	cpc	r22, r18
    1ba4:	73 07       	cpc	r23, r19
    1ba6:	84 07       	cpc	r24, r20
    1ba8:	28 f0       	brcs	.+10     	; 0x1bb4 <__fp_rempio2+0x38>
    1baa:	b2 5a       	subi	r27, 0xA2	; 162
    1bac:	62 0b       	sbc	r22, r18
    1bae:	73 0b       	sbc	r23, r19
    1bb0:	84 0b       	sbc	r24, r20
    1bb2:	e3 95       	inc	r30
    1bb4:	9a 95       	dec	r25
    1bb6:	72 f7       	brpl	.-36     	; 0x1b94 <__fp_rempio2+0x18>
    1bb8:	80 38       	cpi	r24, 0x80	; 128
    1bba:	30 f4       	brcc	.+12     	; 0x1bc8 <__fp_rempio2+0x4c>
    1bbc:	9a 95       	dec	r25
    1bbe:	bb 0f       	add	r27, r27
    1bc0:	66 1f       	adc	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	d2 f7       	brpl	.-12     	; 0x1bbc <__fp_rempio2+0x40>
    1bc8:	90 48       	sbci	r25, 0x80	; 128
    1bca:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__fp_mpack_finite>

00001bce <__fp_round>:
    1bce:	09 2e       	mov	r0, r25
    1bd0:	03 94       	inc	r0
    1bd2:	00 0c       	add	r0, r0
    1bd4:	11 f4       	brne	.+4      	; 0x1bda <__fp_round+0xc>
    1bd6:	88 23       	and	r24, r24
    1bd8:	52 f0       	brmi	.+20     	; 0x1bee <__fp_round+0x20>
    1bda:	bb 0f       	add	r27, r27
    1bdc:	40 f4       	brcc	.+16     	; 0x1bee <__fp_round+0x20>
    1bde:	bf 2b       	or	r27, r31
    1be0:	11 f4       	brne	.+4      	; 0x1be6 <__fp_round+0x18>
    1be2:	60 ff       	sbrs	r22, 0
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <__fp_round+0x20>
    1be6:	6f 5f       	subi	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	08 95       	ret

00001bf0 <__fp_sinus>:
    1bf0:	ef 93       	push	r30
    1bf2:	e0 ff       	sbrs	r30, 0
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <__fp_sinus+0x14>
    1bf6:	a2 ea       	ldi	r26, 0xA2	; 162
    1bf8:	2a ed       	ldi	r18, 0xDA	; 218
    1bfa:	3f e0       	ldi	r19, 0x0F	; 15
    1bfc:	49 ec       	ldi	r20, 0xC9	; 201
    1bfe:	5f eb       	ldi	r21, 0xBF	; 191
    1c00:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__addsf3x>
    1c04:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_round>
    1c08:	0f 90       	pop	r0
    1c0a:	03 94       	inc	r0
    1c0c:	01 fc       	sbrc	r0, 1
    1c0e:	90 58       	subi	r25, 0x80	; 128
    1c10:	e8 e6       	ldi	r30, 0x68	; 104
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_powsodd>

00001c18 <__fp_split3>:
    1c18:	57 fd       	sbrc	r21, 7
    1c1a:	90 58       	subi	r25, 0x80	; 128
    1c1c:	44 0f       	add	r20, r20
    1c1e:	55 1f       	adc	r21, r21
    1c20:	59 f0       	breq	.+22     	; 0x1c38 <__fp_splitA+0x10>
    1c22:	5f 3f       	cpi	r21, 0xFF	; 255
    1c24:	71 f0       	breq	.+28     	; 0x1c42 <__fp_splitA+0x1a>
    1c26:	47 95       	ror	r20

00001c28 <__fp_splitA>:
    1c28:	88 0f       	add	r24, r24
    1c2a:	97 fb       	bst	r25, 7
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	61 f0       	breq	.+24     	; 0x1c48 <__fp_splitA+0x20>
    1c30:	9f 3f       	cpi	r25, 0xFF	; 255
    1c32:	79 f0       	breq	.+30     	; 0x1c52 <__fp_splitA+0x2a>
    1c34:	87 95       	ror	r24
    1c36:	08 95       	ret
    1c38:	12 16       	cp	r1, r18
    1c3a:	13 06       	cpc	r1, r19
    1c3c:	14 06       	cpc	r1, r20
    1c3e:	55 1f       	adc	r21, r21
    1c40:	f2 cf       	rjmp	.-28     	; 0x1c26 <__fp_split3+0xe>
    1c42:	46 95       	lsr	r20
    1c44:	f1 df       	rcall	.-30     	; 0x1c28 <__fp_splitA>
    1c46:	08 c0       	rjmp	.+16     	; 0x1c58 <__fp_splitA+0x30>
    1c48:	16 16       	cp	r1, r22
    1c4a:	17 06       	cpc	r1, r23
    1c4c:	18 06       	cpc	r1, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	f1 cf       	rjmp	.-30     	; 0x1c34 <__fp_splitA+0xc>
    1c52:	86 95       	lsr	r24
    1c54:	71 05       	cpc	r23, r1
    1c56:	61 05       	cpc	r22, r1
    1c58:	08 94       	sec
    1c5a:	08 95       	ret

00001c5c <__fp_zero>:
    1c5c:	e8 94       	clt

00001c5e <__fp_szero>:
    1c5e:	bb 27       	eor	r27, r27
    1c60:	66 27       	eor	r22, r22
    1c62:	77 27       	eor	r23, r23
    1c64:	cb 01       	movw	r24, r22
    1c66:	97 f9       	bld	r25, 7
    1c68:	08 95       	ret

00001c6a <__gesf2>:
    1c6a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fp_cmp>
    1c6e:	08 f4       	brcc	.+2      	; 0x1c72 <__gesf2+0x8>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	08 95       	ret

00001c74 <__mulsf3>:
    1c74:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__mulsf3x>
    1c78:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_round>
    1c7c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fp_pscA>
    1c80:	38 f0       	brcs	.+14     	; 0x1c90 <__mulsf3+0x1c>
    1c82:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscB>
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <__mulsf3+0x1c>
    1c88:	95 23       	and	r25, r21
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <__mulsf3+0x1c>
    1c8c:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__fp_inf>
    1c90:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__fp_nan>
    1c94:	11 24       	eor	r1, r1
    1c96:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__fp_szero>

00001c9a <__mulsf3x>:
    1c9a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__fp_split3>
    1c9e:	70 f3       	brcs	.-36     	; 0x1c7c <__mulsf3+0x8>

00001ca0 <__mulsf3_pse>:
    1ca0:	95 9f       	mul	r25, r21
    1ca2:	c1 f3       	breq	.-16     	; 0x1c94 <__mulsf3+0x20>
    1ca4:	95 0f       	add	r25, r21
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	55 1f       	adc	r21, r21
    1caa:	62 9f       	mul	r22, r18
    1cac:	f0 01       	movw	r30, r0
    1cae:	72 9f       	mul	r23, r18
    1cb0:	bb 27       	eor	r27, r27
    1cb2:	f0 0d       	add	r31, r0
    1cb4:	b1 1d       	adc	r27, r1
    1cb6:	63 9f       	mul	r22, r19
    1cb8:	aa 27       	eor	r26, r26
    1cba:	f0 0d       	add	r31, r0
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	aa 1f       	adc	r26, r26
    1cc0:	64 9f       	mul	r22, r20
    1cc2:	66 27       	eor	r22, r22
    1cc4:	b0 0d       	add	r27, r0
    1cc6:	a1 1d       	adc	r26, r1
    1cc8:	66 1f       	adc	r22, r22
    1cca:	82 9f       	mul	r24, r18
    1ccc:	22 27       	eor	r18, r18
    1cce:	b0 0d       	add	r27, r0
    1cd0:	a1 1d       	adc	r26, r1
    1cd2:	62 1f       	adc	r22, r18
    1cd4:	73 9f       	mul	r23, r19
    1cd6:	b0 0d       	add	r27, r0
    1cd8:	a1 1d       	adc	r26, r1
    1cda:	62 1f       	adc	r22, r18
    1cdc:	83 9f       	mul	r24, r19
    1cde:	a0 0d       	add	r26, r0
    1ce0:	61 1d       	adc	r22, r1
    1ce2:	22 1f       	adc	r18, r18
    1ce4:	74 9f       	mul	r23, r20
    1ce6:	33 27       	eor	r19, r19
    1ce8:	a0 0d       	add	r26, r0
    1cea:	61 1d       	adc	r22, r1
    1cec:	23 1f       	adc	r18, r19
    1cee:	84 9f       	mul	r24, r20
    1cf0:	60 0d       	add	r22, r0
    1cf2:	21 1d       	adc	r18, r1
    1cf4:	82 2f       	mov	r24, r18
    1cf6:	76 2f       	mov	r23, r22
    1cf8:	6a 2f       	mov	r22, r26
    1cfa:	11 24       	eor	r1, r1
    1cfc:	9f 57       	subi	r25, 0x7F	; 127
    1cfe:	50 40       	sbci	r21, 0x00	; 0
    1d00:	9a f0       	brmi	.+38     	; 0x1d28 <__mulsf3_pse+0x88>
    1d02:	f1 f0       	breq	.+60     	; 0x1d40 <__mulsf3_pse+0xa0>
    1d04:	88 23       	and	r24, r24
    1d06:	4a f0       	brmi	.+18     	; 0x1d1a <__mulsf3_pse+0x7a>
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	bb 1f       	adc	r27, r27
    1d0e:	66 1f       	adc	r22, r22
    1d10:	77 1f       	adc	r23, r23
    1d12:	88 1f       	adc	r24, r24
    1d14:	91 50       	subi	r25, 0x01	; 1
    1d16:	50 40       	sbci	r21, 0x00	; 0
    1d18:	a9 f7       	brne	.-22     	; 0x1d04 <__mulsf3_pse+0x64>
    1d1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d1c:	51 05       	cpc	r21, r1
    1d1e:	80 f0       	brcs	.+32     	; 0x1d40 <__mulsf3_pse+0xa0>
    1d20:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__fp_inf>
    1d24:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__fp_szero>
    1d28:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2a:	e4 f3       	brlt	.-8      	; 0x1d24 <__mulsf3_pse+0x84>
    1d2c:	98 3e       	cpi	r25, 0xE8	; 232
    1d2e:	d4 f3       	brlt	.-12     	; 0x1d24 <__mulsf3_pse+0x84>
    1d30:	86 95       	lsr	r24
    1d32:	77 95       	ror	r23
    1d34:	67 95       	ror	r22
    1d36:	b7 95       	ror	r27
    1d38:	f7 95       	ror	r31
    1d3a:	e7 95       	ror	r30
    1d3c:	9f 5f       	subi	r25, 0xFF	; 255
    1d3e:	c1 f7       	brne	.-16     	; 0x1d30 <__mulsf3_pse+0x90>
    1d40:	fe 2b       	or	r31, r30
    1d42:	88 0f       	add	r24, r24
    1d44:	91 1d       	adc	r25, r1
    1d46:	96 95       	lsr	r25
    1d48:	87 95       	ror	r24
    1d4a:	97 f9       	bld	r25, 7
    1d4c:	08 95       	ret

00001d4e <sin>:
    1d4e:	9f 93       	push	r25
    1d50:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_rempio2>
    1d54:	0f 90       	pop	r0
    1d56:	07 fc       	sbrc	r0, 7
    1d58:	ee 5f       	subi	r30, 0xFE	; 254
    1d5a:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_sinus>

00001d5e <__fp_cmp>:
    1d5e:	99 0f       	add	r25, r25
    1d60:	00 08       	sbc	r0, r0
    1d62:	55 0f       	add	r21, r21
    1d64:	aa 0b       	sbc	r26, r26
    1d66:	e0 e8       	ldi	r30, 0x80	; 128
    1d68:	fe ef       	ldi	r31, 0xFE	; 254
    1d6a:	16 16       	cp	r1, r22
    1d6c:	17 06       	cpc	r1, r23
    1d6e:	e8 07       	cpc	r30, r24
    1d70:	f9 07       	cpc	r31, r25
    1d72:	c0 f0       	brcs	.+48     	; 0x1da4 <__fp_cmp+0x46>
    1d74:	12 16       	cp	r1, r18
    1d76:	13 06       	cpc	r1, r19
    1d78:	e4 07       	cpc	r30, r20
    1d7a:	f5 07       	cpc	r31, r21
    1d7c:	98 f0       	brcs	.+38     	; 0x1da4 <__fp_cmp+0x46>
    1d7e:	62 1b       	sub	r22, r18
    1d80:	73 0b       	sbc	r23, r19
    1d82:	84 0b       	sbc	r24, r20
    1d84:	95 0b       	sbc	r25, r21
    1d86:	39 f4       	brne	.+14     	; 0x1d96 <__fp_cmp+0x38>
    1d88:	0a 26       	eor	r0, r26
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <__fp_cmp+0x46>
    1d8c:	23 2b       	or	r18, r19
    1d8e:	24 2b       	or	r18, r20
    1d90:	25 2b       	or	r18, r21
    1d92:	21 f4       	brne	.+8      	; 0x1d9c <__fp_cmp+0x3e>
    1d94:	08 95       	ret
    1d96:	0a 26       	eor	r0, r26
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <__fp_cmp+0x3e>
    1d9a:	a1 40       	sbci	r26, 0x01	; 1
    1d9c:	a6 95       	lsr	r26
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	81 1d       	adc	r24, r1
    1da2:	81 1d       	adc	r24, r1
    1da4:	08 95       	ret

00001da6 <__fp_mpack>:
    1da6:	9f 3f       	cpi	r25, 0xFF	; 255
    1da8:	31 f0       	breq	.+12     	; 0x1db6 <__fp_mpack_finite+0xc>

00001daa <__fp_mpack_finite>:
    1daa:	91 50       	subi	r25, 0x01	; 1
    1dac:	20 f4       	brcc	.+8      	; 0x1db6 <__fp_mpack_finite+0xc>
    1dae:	87 95       	ror	r24
    1db0:	77 95       	ror	r23
    1db2:	67 95       	ror	r22
    1db4:	b7 95       	ror	r27
    1db6:	88 0f       	add	r24, r24
    1db8:	91 1d       	adc	r25, r1
    1dba:	96 95       	lsr	r25
    1dbc:	87 95       	ror	r24
    1dbe:	97 f9       	bld	r25, 7
    1dc0:	08 95       	ret

00001dc2 <__fp_powsodd>:
    1dc2:	9f 93       	push	r25
    1dc4:	8f 93       	push	r24
    1dc6:	7f 93       	push	r23
    1dc8:	6f 93       	push	r22
    1dca:	ff 93       	push	r31
    1dcc:	ef 93       	push	r30
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    1dd6:	ef 91       	pop	r30
    1dd8:	ff 91       	pop	r31
    1dda:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__fp_powser>
    1dde:	2f 91       	pop	r18
    1de0:	3f 91       	pop	r19
    1de2:	4f 91       	pop	r20
    1de4:	5f 91       	pop	r21
    1de6:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__mulsf3>

00001dea <__fp_powser>:
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	1f 93       	push	r17
    1df0:	0f 93       	push	r16
    1df2:	ff 92       	push	r15
    1df4:	ef 92       	push	r14
    1df6:	df 92       	push	r13
    1df8:	7b 01       	movw	r14, r22
    1dfa:	8c 01       	movw	r16, r24
    1dfc:	68 94       	set
    1dfe:	06 c0       	rjmp	.+12     	; 0x1e0c <__fp_powser+0x22>
    1e00:	da 2e       	mov	r13, r26
    1e02:	ef 01       	movw	r28, r30
    1e04:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__mulsf3x>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e8 94       	clt
    1e0c:	a5 91       	lpm	r26, Z+
    1e0e:	25 91       	lpm	r18, Z+
    1e10:	35 91       	lpm	r19, Z+
    1e12:	45 91       	lpm	r20, Z+
    1e14:	55 91       	lpm	r21, Z+
    1e16:	a6 f3       	brts	.-24     	; 0x1e00 <__fp_powser+0x16>
    1e18:	ef 01       	movw	r28, r30
    1e1a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__addsf3x>
    1e1e:	fe 01       	movw	r30, r28
    1e20:	97 01       	movw	r18, r14
    1e22:	a8 01       	movw	r20, r16
    1e24:	da 94       	dec	r13
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <__fp_powser+0x18>
    1e28:	df 90       	pop	r13
    1e2a:	ef 90       	pop	r14
    1e2c:	ff 90       	pop	r15
    1e2e:	0f 91       	pop	r16
    1e30:	1f 91       	pop	r17
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1e38:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1e3a:	91 8d       	ldd	r25, Z+25	; 0x19
    1e3c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e3e:	89 2f       	mov	r24, r25
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	80 5c       	subi	r24, 0xC0	; 192
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	82 1b       	sub	r24, r18
    1e48:	91 09       	sbc	r25, r1
}
    1e4a:	8f 73       	andi	r24, 0x3F	; 63
    1e4c:	99 27       	eor	r25, r25
    1e4e:	08 95       	ret

00001e50 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1e50:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1e52:	91 8d       	ldd	r25, Z+25	; 0x19
    1e54:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e56:	98 17       	cp	r25, r24
    1e58:	31 f0       	breq	.+12     	; 0x1e66 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1e5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e5c:	e8 0f       	add	r30, r24
    1e5e:	f1 1d       	adc	r31, r1
    1e60:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1e6a:	08 95       	ret

00001e6c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1e6c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1e6e:	91 8d       	ldd	r25, Z+25	; 0x19
    1e70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e72:	98 17       	cp	r25, r24
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1e76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e78:	df 01       	movw	r26, r30
    1e7a:	a8 0f       	add	r26, r24
    1e7c:	b1 1d       	adc	r27, r1
    1e7e:	5d 96       	adiw	r26, 0x1d	; 29
    1e80:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1e82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	9f 73       	andi	r25, 0x3F	; 63
    1e88:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1e92:	08 95       	ret

00001e94 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1e94:	fc 01       	movw	r30, r24
    1e96:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1e98:	44 8d       	ldd	r20, Z+28	; 0x1c
    1e9a:	25 2f       	mov	r18, r21
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	84 2f       	mov	r24, r20
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1ea2:	82 1b       	sub	r24, r18
    1ea4:	93 0b       	sbc	r25, r19
    1ea6:	54 17       	cp	r21, r20
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1eaa:	cf 96       	adiw	r24, 0x3f	; 63
    1eac:	08 95       	ret
  return tail - head - 1;
    1eae:	01 97       	sbiw	r24, 0x01	; 1
}
    1eb0:	08 95       	ret

00001eb2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1eb2:	88 eb       	ldi	r24, 0xB8	; 184
    1eb4:	90 e1       	ldi	r25, 0x10	; 16
    1eb6:	89 2b       	or	r24, r25
    1eb8:	49 f0       	breq	.+18     	; 0x1ecc <_Z14serialEventRunv+0x1a>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	29 f0       	breq	.+10     	; 0x1ecc <_Z14serialEventRunv+0x1a>
    1ec2:	0e 94 b8 10 	call	0x2170	; 0x2170 <_Z17Serial0_availablev>
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1ecc:	08 95       	ret

00001ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1ece:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1ed0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ed2:	df 01       	movw	r26, r30
    1ed4:	a8 0f       	add	r26, r24
    1ed6:	b1 1d       	adc	r27, r1
    1ed8:	a3 5a       	subi	r26, 0xA3	; 163
    1eda:	bf 4f       	sbci	r27, 0xFF	; 255
    1edc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ede:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	8f 73       	andi	r24, 0x3F	; 63
    1ee6:	99 27       	eor	r25, r25
    1ee8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1eea:	a6 89       	ldd	r26, Z+22	; 0x16
    1eec:	b7 89       	ldd	r27, Z+23	; 0x17
    1eee:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ef0:	a0 89       	ldd	r26, Z+16	; 0x10
    1ef2:	b1 89       	ldd	r27, Z+17	; 0x11
    1ef4:	8c 91       	ld	r24, X
    1ef6:	83 70       	andi	r24, 0x03	; 3
    1ef8:	80 64       	ori	r24, 0x40	; 64
    1efa:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1efc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1efe:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f00:	98 13       	cpse	r25, r24
    1f02:	06 c0       	rjmp	.+12     	; 0x1f10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1f04:	02 88       	ldd	r0, Z+18	; 0x12
    1f06:	f3 89       	ldd	r31, Z+19	; 0x13
    1f08:	e0 2d       	mov	r30, r0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8f 7d       	andi	r24, 0xDF	; 223
    1f0e:	80 83       	st	Z, r24
    1f10:	08 95       	ret

00001f12 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	ec 01       	movw	r28, r24
  _written = true;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1f24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f28:	98 13       	cpse	r25, r24
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <_ZN14HardwareSerial5writeEh+0x24>
    1f2c:	e8 89       	ldd	r30, Y+16	; 0x10
    1f2e:	f9 89       	ldd	r31, Y+17	; 0x11
    1f30:	80 81       	ld	r24, Z
    1f32:	85 fd       	sbrc	r24, 5
    1f34:	26 c0       	rjmp	.+76     	; 0x1f82 <_ZN14HardwareSerial5writeEh+0x70>
    1f36:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1f38:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1f3a:	10 e0       	ldi	r17, 0x00	; 0
    1f3c:	0f 5f       	subi	r16, 0xFF	; 255
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	0f 73       	andi	r16, 0x3F	; 63
    1f42:	11 27       	eor	r17, r17
    1f44:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1f46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f48:	e8 12       	cpse	r14, r24
    1f4a:	0c c0       	rjmp	.+24     	; 0x1f64 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	07 fc       	sbrc	r0, 7
    1f50:	fa cf       	rjmp	.-12     	; 0x1f46 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1f52:	e8 89       	ldd	r30, Y+16	; 0x10
    1f54:	f9 89       	ldd	r31, Y+17	; 0x11
    1f56:	80 81       	ld	r24, Z
    1f58:	85 ff       	sbrs	r24, 5
    1f5a:	f5 cf       	rjmp	.-22     	; 0x1f46 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f62:	f1 cf       	rjmp	.-30     	; 0x1f46 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f66:	fe 01       	movw	r30, r28
    1f68:	e8 0f       	add	r30, r24
    1f6a:	f1 1d       	adc	r31, r1
    1f6c:	e3 5a       	subi	r30, 0xA3	; 163
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1f72:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f74:	f8 94       	cli
    _tx_buffer_head = i;
    1f76:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1f78:	ea 89       	ldd	r30, Y+18	; 0x12
    1f7a:	fb 89       	ldd	r31, Y+19	; 0x13
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 62       	ori	r24, 0x20	; 32
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1f82:	9f b7       	in	r25, 0x3f	; 63
    1f84:	f8 94       	cli
      *_udr = c;
    1f86:	ee 89       	ldd	r30, Y+22	; 0x16
    1f88:	ff 89       	ldd	r31, Y+23	; 0x17
    1f8a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1f8c:	e8 89       	ldd	r30, Y+16	; 0x10
    1f8e:	f9 89       	ldd	r31, Y+17	; 0x11
    1f90:	80 81       	ld	r24, Z
    1f92:	83 70       	andi	r24, 0x03	; 3
    1f94:	80 64       	ori	r24, 0x40	; 64
    1f96:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1f98:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	08 95       	ret

00001fac <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1fb2:	88 8d       	ldd	r24, Y+24	; 0x18
    1fb4:	88 23       	and	r24, r24
    1fb6:	c9 f0       	breq	.+50     	; 0x1fea <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1fb8:	ea 89       	ldd	r30, Y+18	; 0x12
    1fba:	fb 89       	ldd	r31, Y+19	; 0x13
    1fbc:	80 81       	ld	r24, Z
    1fbe:	85 fd       	sbrc	r24, 5
    1fc0:	05 c0       	rjmp	.+10     	; 0x1fcc <_ZN14HardwareSerial5flushEv+0x20>
    1fc2:	a8 89       	ldd	r26, Y+16	; 0x10
    1fc4:	b9 89       	ldd	r27, Y+17	; 0x11
    1fc6:	8c 91       	ld	r24, X
    1fc8:	86 fd       	sbrc	r24, 6
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	07 fc       	sbrc	r0, 7
    1fd0:	f5 cf       	rjmp	.-22     	; 0x1fbc <_ZN14HardwareSerial5flushEv+0x10>
    1fd2:	80 81       	ld	r24, Z
    1fd4:	85 ff       	sbrs	r24, 5
    1fd6:	f2 cf       	rjmp	.-28     	; 0x1fbc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1fd8:	a8 89       	ldd	r26, Y+16	; 0x10
    1fda:	b9 89       	ldd	r27, Y+17	; 0x11
    1fdc:	8c 91       	ld	r24, X
    1fde:	85 ff       	sbrs	r24, 5
    1fe0:	ed cf       	rjmp	.-38     	; 0x1fbc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1fe8:	e7 cf       	rjmp	.-50     	; 0x1fb8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ec 01       	movw	r28, r24
    2000:	6a 01       	movw	r12, r20
    2002:	7b 01       	movw	r14, r22
    2004:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2006:	e8 89       	ldd	r30, Y+16	; 0x10
    2008:	f9 89       	ldd	r31, Y+17	; 0x11
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    200e:	41 15       	cp	r20, r1
    2010:	51 4e       	sbci	r21, 0xE1	; 225
    2012:	61 05       	cpc	r22, r1
    2014:	71 05       	cpc	r23, r1
    2016:	b1 f0       	breq	.+44     	; 0x2044 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	79 e0       	ldi	r23, 0x09	; 9
    201c:	8d e3       	ldi	r24, 0x3D	; 61
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a7 01       	movw	r20, r14
    2022:	96 01       	movw	r18, r12
    2024:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__udivmodsi4>
    2028:	da 01       	movw	r26, r20
    202a:	c9 01       	movw	r24, r18
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	a1 09       	sbc	r26, r1
    2030:	b1 09       	sbc	r27, r1
    2032:	b6 95       	lsr	r27
    2034:	a7 95       	ror	r26
    2036:	97 95       	ror	r25
    2038:	87 95       	ror	r24
    203a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    203c:	21 15       	cp	r18, r1
    203e:	80 e1       	ldi	r24, 0x10	; 16
    2040:	38 07       	cpc	r19, r24
    2042:	a8 f0       	brcs	.+42     	; 0x206e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2044:	e8 89       	ldd	r30, Y+16	; 0x10
    2046:	f9 89       	ldd	r31, Y+17	; 0x11
    2048:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    204a:	60 e8       	ldi	r22, 0x80	; 128
    204c:	74 e8       	ldi	r23, 0x84	; 132
    204e:	8e e1       	ldi	r24, 0x1E	; 30
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a7 01       	movw	r20, r14
    2054:	96 01       	movw	r18, r12
    2056:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__udivmodsi4>
    205a:	da 01       	movw	r26, r20
    205c:	c9 01       	movw	r24, r18
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	a1 09       	sbc	r26, r1
    2062:	b1 09       	sbc	r27, r1
    2064:	b6 95       	lsr	r27
    2066:	a7 95       	ror	r26
    2068:	97 95       	ror	r25
    206a:	87 95       	ror	r24
    206c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    206e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2070:	fd 85       	ldd	r31, Y+13	; 0x0d
    2072:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2074:	ee 85       	ldd	r30, Y+14	; 0x0e
    2076:	ff 85       	ldd	r31, Y+15	; 0x0f
    2078:	20 83       	st	Z, r18

  _written = false;
    207a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    207c:	ec 89       	ldd	r30, Y+20	; 0x14
    207e:	fd 89       	ldd	r31, Y+21	; 0x15
    2080:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2082:	ea 89       	ldd	r30, Y+18	; 0x12
    2084:	fb 89       	ldd	r31, Y+19	; 0x13
    2086:	80 81       	ld	r24, Z
    2088:	80 61       	ori	r24, 0x10	; 16
    208a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    208c:	ea 89       	ldd	r30, Y+18	; 0x12
    208e:	fb 89       	ldd	r31, Y+19	; 0x13
    2090:	80 81       	ld	r24, Z
    2092:	88 60       	ori	r24, 0x08	; 8
    2094:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2096:	ea 89       	ldd	r30, Y+18	; 0x12
    2098:	fb 89       	ldd	r31, Y+19	; 0x13
    209a:	80 81       	ld	r24, Z
    209c:	80 68       	ori	r24, 0x80	; 128
    209e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    20a0:	ea 89       	ldd	r30, Y+18	; 0x12
    20a2:	fb 89       	ldd	r31, Y+19	; 0x13
    20a4:	80 81       	ld	r24, Z
    20a6:	8f 7d       	andi	r24, 0xDF	; 223
    20a8:	80 83       	st	Z, r24
}
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	08 95       	ret

000020ba <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	08 95       	ret

000020c0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    20c0:	1f 92       	push	r1
    20c2:	0f 92       	push	r0
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	2f 93       	push	r18
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	ef 93       	push	r30
    20d2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    20d4:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <Serial+0x10>
    20d8:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <Serial+0x11>
    20dc:	80 81       	ld	r24, Z
    20de:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <Serial+0x16>
    20e2:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <Serial+0x17>
    20e6:	82 fd       	sbrc	r24, 2
    20e8:	12 c0       	rjmp	.+36     	; 0x210e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    20ea:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    20ec:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <Serial+0x19>
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    20f4:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <Serial+0x1a>
    20f8:	82 17       	cp	r24, r18
    20fa:	51 f0       	breq	.+20     	; 0x2110 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    20fc:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <Serial+0x19>
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	e2 5b       	subi	r30, 0xB2	; 178
    2104:	fc 4f       	sbci	r31, 0xFC	; 252
    2106:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2108:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <Serial+0x19>
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    210e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2110:	ff 91       	pop	r31
    2112:	ef 91       	pop	r30
    2114:	9f 91       	pop	r25
    2116:	8f 91       	pop	r24
    2118:	2f 91       	pop	r18
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	0f 90       	pop	r0
    2120:	1f 90       	pop	r1
    2122:	18 95       	reti

00002124 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2124:	1f 92       	push	r1
    2126:	0f 92       	push	r0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	0f 92       	push	r0
    212c:	11 24       	eor	r1, r1
    212e:	2f 93       	push	r18
    2130:	3f 93       	push	r19
    2132:	4f 93       	push	r20
    2134:	5f 93       	push	r21
    2136:	6f 93       	push	r22
    2138:	7f 93       	push	r23
    213a:	8f 93       	push	r24
    213c:	9f 93       	push	r25
    213e:	af 93       	push	r26
    2140:	bf 93       	push	r27
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2146:	8e e4       	ldi	r24, 0x4E	; 78
    2148:	93 e0       	ldi	r25, 0x03	; 3
    214a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    214e:	ff 91       	pop	r31
    2150:	ef 91       	pop	r30
    2152:	bf 91       	pop	r27
    2154:	af 91       	pop	r26
    2156:	9f 91       	pop	r25
    2158:	8f 91       	pop	r24
    215a:	7f 91       	pop	r23
    215c:	6f 91       	pop	r22
    215e:	5f 91       	pop	r21
    2160:	4f 91       	pop	r20
    2162:	3f 91       	pop	r19
    2164:	2f 91       	pop	r18
    2166:	0f 90       	pop	r0
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	0f 90       	pop	r0
    216c:	1f 90       	pop	r1
    216e:	18 95       	reti

00002170 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2170:	8e e4       	ldi	r24, 0x4E	; 78
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN14HardwareSerial9availableEv>
    2178:	21 e0       	ldi	r18, 0x01	; 1
    217a:	89 2b       	or	r24, r25
    217c:	09 f4       	brne	.+2      	; 0x2180 <_Z17Serial0_availablev+0x10>
    217e:	20 e0       	ldi	r18, 0x00	; 0
}
    2180:	82 2f       	mov	r24, r18
    2182:	08 95       	ret

00002184 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2184:	ee e4       	ldi	r30, 0x4E	; 78
    2186:	f3 e0       	ldi	r31, 0x03	; 3
    2188:	13 82       	std	Z+3, r1	; 0x03
    218a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    218c:	88 ee       	ldi	r24, 0xE8	; 232
    218e:	93 e0       	ldi	r25, 0x03	; 3
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	84 83       	std	Z+4, r24	; 0x04
    2196:	95 83       	std	Z+5, r25	; 0x05
    2198:	a6 83       	std	Z+6, r26	; 0x06
    219a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    219c:	8e e6       	ldi	r24, 0x6E	; 110
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	85 ec       	ldi	r24, 0xC5	; 197
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	95 87       	std	Z+13, r25	; 0x0d
    21aa:	84 87       	std	Z+12, r24	; 0x0c
    21ac:	84 ec       	ldi	r24, 0xC4	; 196
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	97 87       	std	Z+15, r25	; 0x0f
    21b2:	86 87       	std	Z+14, r24	; 0x0e
    21b4:	80 ec       	ldi	r24, 0xC0	; 192
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	91 8b       	std	Z+17, r25	; 0x11
    21ba:	80 8b       	std	Z+16, r24	; 0x10
    21bc:	81 ec       	ldi	r24, 0xC1	; 193
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	93 8b       	std	Z+19, r25	; 0x13
    21c2:	82 8b       	std	Z+18, r24	; 0x12
    21c4:	82 ec       	ldi	r24, 0xC2	; 194
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	95 8b       	std	Z+21, r25	; 0x15
    21ca:	84 8b       	std	Z+20, r24	; 0x14
    21cc:	86 ec       	ldi	r24, 0xC6	; 198
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	97 8b       	std	Z+23, r25	; 0x17
    21d2:	86 8b       	std	Z+22, r24	; 0x16
    21d4:	11 8e       	std	Z+25, r1	; 0x19
    21d6:	12 8e       	std	Z+26, r1	; 0x1a
    21d8:	13 8e       	std	Z+27, r1	; 0x1b
    21da:	14 8e       	std	Z+28, r1	; 0x1c
    21dc:	08 95       	ret

000021de <initVariant>:
    21de:	08 95       	ret

000021e0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    21e0:	0e 94 41 13 	call	0x2682	; 0x2682 <init>

	initVariant();
    21e4:	0e 94 ef 10 	call	0x21de	; 0x21de <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    21e8:	0e 94 4e 0a 	call	0x149c	; 0x149c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    21ec:	c9 e5       	ldi	r28, 0x59	; 89
    21ee:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    21f0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <loop>
		if (serialEventRun) serialEventRun();
    21f4:	20 97       	sbiw	r28, 0x00	; 0
    21f6:	e1 f3       	breq	.-8      	; 0x21f0 <main+0x10>
    21f8:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z14serialEventRunv>
    21fc:	f9 cf       	rjmp	.-14     	; 0x21f0 <main+0x10>

000021fe <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	6c 01       	movw	r12, r24
    2210:	7a 01       	movw	r14, r20
    2212:	8b 01       	movw	r16, r22
    2214:	c0 e0       	ldi	r28, 0x00	; 0
    2216:	d0 e0       	ldi	r29, 0x00	; 0
    2218:	ce 15       	cp	r28, r14
    221a:	df 05       	cpc	r29, r15
    221c:	81 f0       	breq	.+32     	; 0x223e <_ZN5Print5writeEPKhj+0x40>
    221e:	d8 01       	movw	r26, r16
    2220:	6d 91       	ld	r22, X+
    2222:	8d 01       	movw	r16, r26
    2224:	d6 01       	movw	r26, r12
    2226:	ed 91       	ld	r30, X+
    2228:	fc 91       	ld	r31, X
    222a:	01 90       	ld	r0, Z+
    222c:	f0 81       	ld	r31, Z
    222e:	e0 2d       	mov	r30, r0
    2230:	c6 01       	movw	r24, r12
    2232:	09 95       	icall
    2234:	89 2b       	or	r24, r25
    2236:	11 f0       	breq	.+4      	; 0x223c <_ZN5Print5writeEPKhj+0x3e>
    2238:	21 96       	adiw	r28, 0x01	; 1
    223a:	ee cf       	rjmp	.-36     	; 0x2218 <_ZN5Print5writeEPKhj+0x1a>
    223c:	7e 01       	movw	r14, r28
    223e:	c7 01       	movw	r24, r14
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	08 95       	ret

00002252 <_ZN5Print5writeEPKc>:
    2252:	61 15       	cp	r22, r1
    2254:	71 05       	cpc	r23, r1
    2256:	79 f0       	breq	.+30     	; 0x2276 <_ZN5Print5writeEPKc+0x24>
    2258:	fb 01       	movw	r30, r22
    225a:	01 90       	ld	r0, Z+
    225c:	00 20       	and	r0, r0
    225e:	e9 f7       	brne	.-6      	; 0x225a <_ZN5Print5writeEPKc+0x8>
    2260:	31 97       	sbiw	r30, 0x01	; 1
    2262:	af 01       	movw	r20, r30
    2264:	46 1b       	sub	r20, r22
    2266:	57 0b       	sbc	r21, r23
    2268:	dc 01       	movw	r26, r24
    226a:	ed 91       	ld	r30, X+
    226c:	fc 91       	ld	r31, X
    226e:	02 80       	ldd	r0, Z+2	; 0x02
    2270:	f3 81       	ldd	r31, Z+3	; 0x03
    2272:	e0 2d       	mov	r30, r0
    2274:	09 94       	ijmp
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	08 95       	ret

0000227c <_ZN5Print5printEPKc>:
    227c:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_ZN5Print5writeEPKc>

00002280 <_ZN5Print5printEc>:
    2280:	dc 01       	movw	r26, r24
    2282:	ed 91       	ld	r30, X+
    2284:	fc 91       	ld	r31, X
    2286:	01 90       	ld	r0, Z+
    2288:	f0 81       	ld	r31, Z
    228a:	e0 2d       	mov	r30, r0
    228c:	09 94       	ijmp

0000228e <_ZN5Print7printlnEv>:
    228e:	6c e7       	ldi	r22, 0x7C	; 124
    2290:	71 e0       	ldi	r23, 0x01	; 1
    2292:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_ZN5Print5writeEPKc>

00002296 <_ZN5Print7printlnEPKc>:
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	ec 01       	movw	r28, r24
    22a0:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5writeEPKc>
    22a4:	8c 01       	movw	r16, r24
    22a6:	ce 01       	movw	r24, r28
    22a8:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN5Print7printlnEv>
    22ac:	80 0f       	add	r24, r16
    22ae:	91 1f       	adc	r25, r17
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <_ZN5Print11printNumberEmh>:
    22ba:	8f 92       	push	r8
    22bc:	9f 92       	push	r9
    22be:	af 92       	push	r10
    22c0:	bf 92       	push	r11
    22c2:	ef 92       	push	r14
    22c4:	ff 92       	push	r15
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	a1 97       	sbiw	r28, 0x21	; 33
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	7c 01       	movw	r14, r24
    22e0:	fa 01       	movw	r30, r20
    22e2:	cb 01       	movw	r24, r22
    22e4:	19 a2       	std	Y+33, r1	; 0x21
    22e6:	22 30       	cpi	r18, 0x02	; 2
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <_ZN5Print11printNumberEmh+0x32>
    22ea:	2a e0       	ldi	r18, 0x0A	; 10
    22ec:	8e 01       	movw	r16, r28
    22ee:	0f 5d       	subi	r16, 0xDF	; 223
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	82 2e       	mov	r8, r18
    22f4:	91 2c       	mov	r9, r1
    22f6:	a1 2c       	mov	r10, r1
    22f8:	b1 2c       	mov	r11, r1
    22fa:	bf 01       	movw	r22, r30
    22fc:	a5 01       	movw	r20, r10
    22fe:	94 01       	movw	r18, r8
    2300:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__udivmodsi4>
    2304:	f9 01       	movw	r30, r18
    2306:	ca 01       	movw	r24, r20
    2308:	01 50       	subi	r16, 0x01	; 1
    230a:	11 09       	sbc	r17, r1
    230c:	6a 30       	cpi	r22, 0x0A	; 10
    230e:	10 f4       	brcc	.+4      	; 0x2314 <_ZN5Print11printNumberEmh+0x5a>
    2310:	60 5d       	subi	r22, 0xD0	; 208
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <_ZN5Print11printNumberEmh+0x5c>
    2314:	69 5c       	subi	r22, 0xC9	; 201
    2316:	d8 01       	movw	r26, r16
    2318:	6c 93       	st	X, r22
    231a:	23 2b       	or	r18, r19
    231c:	24 2b       	or	r18, r20
    231e:	25 2b       	or	r18, r21
    2320:	61 f7       	brne	.-40     	; 0x22fa <_ZN5Print11printNumberEmh+0x40>
    2322:	b8 01       	movw	r22, r16
    2324:	c7 01       	movw	r24, r14
    2326:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN5Print5writeEPKc>
    232a:	a1 96       	adiw	r28, 0x21	; 33
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	bf 90       	pop	r11
    2344:	af 90       	pop	r10
    2346:	9f 90       	pop	r9
    2348:	8f 90       	pop	r8
    234a:	08 95       	ret

0000234c <_ZN5Print5printEmi>:
    234c:	21 15       	cp	r18, r1
    234e:	31 05       	cpc	r19, r1
    2350:	41 f4       	brne	.+16     	; 0x2362 <_ZN5Print5printEmi+0x16>
    2352:	dc 01       	movw	r26, r24
    2354:	ed 91       	ld	r30, X+
    2356:	fc 91       	ld	r31, X
    2358:	01 90       	ld	r0, Z+
    235a:	f0 81       	ld	r31, Z
    235c:	e0 2d       	mov	r30, r0
    235e:	64 2f       	mov	r22, r20
    2360:	09 94       	ijmp
    2362:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <_ZN5Print11printNumberEmh>

00002366 <_ZN5Print5printEji>:
    2366:	9a 01       	movw	r18, r20
    2368:	ab 01       	movw	r20, r22
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <_ZN5Print5printEmi>

00002372 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2372:	7f 92       	push	r7
    2374:	8f 92       	push	r8
    2376:	9f 92       	push	r9
    2378:	af 92       	push	r10
    237a:	bf 92       	push	r11
    237c:	cf 92       	push	r12
    237e:	df 92       	push	r13
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	8c 01       	movw	r16, r24
    238e:	6a 01       	movw	r12, r20
    2390:	7b 01       	movw	r14, r22
    2392:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2394:	9a 01       	movw	r18, r20
    2396:	ab 01       	movw	r20, r22
    2398:	c7 01       	movw	r24, r14
    239a:	b6 01       	movw	r22, r12
    239c:	0e 94 82 27 	call	0x4f04	; 0x4f04 <__unordsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	19 f0       	breq	.+6      	; 0x23aa <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    23a4:	6f e7       	ldi	r22, 0x7F	; 127
    23a6:	71 e0       	ldi	r23, 0x01	; 1
    23a8:	27 c0       	rjmp	.+78     	; 0x23f8 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    23aa:	46 01       	movw	r8, r12
    23ac:	57 01       	movw	r10, r14
    23ae:	e8 94       	clt
    23b0:	b7 f8       	bld	r11, 7
    23b2:	2f ef       	ldi	r18, 0xFF	; 255
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	5f e7       	ldi	r21, 0x7F	; 127
    23ba:	c5 01       	movw	r24, r10
    23bc:	b4 01       	movw	r22, r8
    23be:	0e 94 82 27 	call	0x4f04	; 0x4f04 <__unordsf2>
    23c2:	81 11       	cpse	r24, r1
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <_ZN5Print10printFloatEdh+0x6e>
    23c6:	2f ef       	ldi	r18, 0xFF	; 255
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	5f e7       	ldi	r21, 0x7F	; 127
    23ce:	c5 01       	movw	r24, r10
    23d0:	b4 01       	movw	r22, r8
    23d2:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__cmpsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	1c f4       	brge	.+6      	; 0x23e0 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    23da:	63 e8       	ldi	r22, 0x83	; 131
    23dc:	71 e0       	ldi	r23, 0x01	; 1
    23de:	0c c0       	rjmp	.+24     	; 0x23f8 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    23e0:	2f ef       	ldi	r18, 0xFF	; 255
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	5f e4       	ldi	r21, 0x4F	; 79
    23e8:	c7 01       	movw	r24, r14
    23ea:	b6 01       	movw	r22, r12
    23ec:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__gesf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	94 f4       	brge	.+36     	; 0x2418 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    23f4:	67 e8       	ldi	r22, 0x87	; 135
    23f6:	71 e0       	ldi	r23, 0x01	; 1
    23f8:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	bf 90       	pop	r11
    240c:	af 90       	pop	r10
    240e:	9f 90       	pop	r9
    2410:	8f 90       	pop	r8
    2412:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2414:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2418:	2f ef       	ldi	r18, 0xFF	; 255
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	5f ec       	ldi	r21, 0xCF	; 207
    2420:	c7 01       	movw	r24, r14
    2422:	b6 01       	movw	r22, r12
    2424:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__cmpsf2>
    2428:	87 fd       	sbrc	r24, 7
    242a:	e4 cf       	rjmp	.-56     	; 0x23f4 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	a9 01       	movw	r20, r18
    2432:	c7 01       	movw	r24, r14
    2434:	b6 01       	movw	r22, r12
    2436:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__cmpsf2>
    243a:	87 ff       	sbrs	r24, 7
    243c:	0a c0       	rjmp	.+20     	; 0x2452 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    243e:	6d e2       	ldi	r22, 0x2D	; 45
    2440:	c8 01       	movw	r24, r16
    2442:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN5Print5printEc>
    2446:	ec 01       	movw	r28, r24
     number = -number;
    2448:	f7 fa       	bst	r15, 7
    244a:	f0 94       	com	r15
    244c:	f7 f8       	bld	r15, 7
    244e:	f0 94       	com	r15
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2452:	c0 e0       	ldi	r28, 0x00	; 0
    2454:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2456:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2460:	7b 14       	cp	r7, r11
    2462:	41 f0       	breq	.+16     	; 0x2474 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2470:	b3 94       	inc	r11
    2472:	f6 cf       	rjmp	.-20     	; 0x2460 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2474:	a7 01       	movw	r20, r14
    2476:	96 01       	movw	r18, r12
    2478:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    247c:	6b 01       	movw	r12, r22
    247e:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2480:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    2484:	4b 01       	movw	r8, r22
    2486:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2488:	2a e0       	ldi	r18, 0x0A	; 10
    248a:	ab 01       	movw	r20, r22
    248c:	bc 01       	movw	r22, r24
    248e:	c8 01       	movw	r24, r16
    2490:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2494:	c8 0f       	add	r28, r24
    2496:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2498:	77 20       	and	r7, r7
    249a:	b9 f1       	breq	.+110    	; 0x250a <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    249c:	c5 01       	movw	r24, r10
    249e:	b4 01       	movw	r22, r8
    24a0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__floatunsisf>
    24a4:	9b 01       	movw	r18, r22
    24a6:	ac 01       	movw	r20, r24
    24a8:	c7 01       	movw	r24, r14
    24aa:	b6 01       	movw	r22, r12
    24ac:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    24b0:	6b 01       	movw	r12, r22
    24b2:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    24b4:	6e e2       	ldi	r22, 0x2E	; 46
    24b6:	c8 01       	movw	r24, r16
    24b8:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN5Print5printEc>
    24bc:	c8 0f       	add	r28, r24
    24be:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	c7 01       	movw	r24, r14
    24ca:	b6 01       	movw	r22, r12
    24cc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    24d0:	4b 01       	movw	r8, r22
    24d2:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    24d4:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    24d8:	6b 01       	movw	r12, r22
    24da:	7c 01       	movw	r14, r24
    n += print(toPrint);
    24dc:	4a e0       	ldi	r20, 0x0A	; 10
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	c8 01       	movw	r24, r16
    24e2:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN5Print5printEji>
    24e6:	c8 0f       	add	r28, r24
    24e8:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    24ea:	b6 01       	movw	r22, r12
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__floatunsisf>
    24f4:	9b 01       	movw	r18, r22
    24f6:	ac 01       	movw	r20, r24
    24f8:	c5 01       	movw	r24, r10
    24fa:	b4 01       	movw	r22, r8
    24fc:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    2500:	6b 01       	movw	r12, r22
    2502:	7c 01       	movw	r14, r24
    2504:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2506:	71 10       	cpse	r7, r1
    2508:	db cf       	rjmp	.-74     	; 0x24c0 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    250a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	bf 90       	pop	r11
    251e:	af 90       	pop	r10
    2520:	9f 90       	pop	r9
    2522:	8f 90       	pop	r8
    2524:	7f 90       	pop	r7
    2526:	08 95       	ret

00002528 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2528:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <_ZN5Print10printFloatEdh>

0000252c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    252c:	1f 92       	push	r1
    252e:	0f 92       	push	r0
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	0f 92       	push	r0
    2534:	11 24       	eor	r1, r1
    2536:	2f 93       	push	r18
    2538:	3f 93       	push	r19
    253a:	8f 93       	push	r24
    253c:	9f 93       	push	r25
    253e:	af 93       	push	r26
    2540:	bf 93       	push	r27
    2542:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer0_millis>
    2546:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <timer0_millis+0x1>
    254a:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <timer0_millis+0x2>
    254e:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <timer0_millis+0x3>
    2552:	30 91 eb 03 	lds	r19, 0x03EB	; 0x8003eb <timer0_fract>
    2556:	23 e0       	ldi	r18, 0x03	; 3
    2558:	23 0f       	add	r18, r19
    255a:	2d 37       	cpi	r18, 0x7D	; 125
    255c:	20 f4       	brcc	.+8      	; 0x2566 <__vector_16+0x3a>
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	a1 1d       	adc	r26, r1
    2562:	b1 1d       	adc	r27, r1
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <__vector_16+0x44>
    2566:	26 e8       	ldi	r18, 0x86	; 134
    2568:	23 0f       	add	r18, r19
    256a:	02 96       	adiw	r24, 0x02	; 2
    256c:	a1 1d       	adc	r26, r1
    256e:	b1 1d       	adc	r27, r1
    2570:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <timer0_fract>
    2574:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <timer0_millis>
    2578:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <timer0_millis+0x1>
    257c:	a0 93 ee 03 	sts	0x03EE, r26	; 0x8003ee <timer0_millis+0x2>
    2580:	b0 93 ef 03 	sts	0x03EF, r27	; 0x8003ef <timer0_millis+0x3>
    2584:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <timer0_overflow_count>
    2588:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <timer0_overflow_count+0x1>
    258c:	a0 91 f2 03 	lds	r26, 0x03F2	; 0x8003f2 <timer0_overflow_count+0x2>
    2590:	b0 91 f3 03 	lds	r27, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x3>
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	a1 1d       	adc	r26, r1
    2598:	b1 1d       	adc	r27, r1
    259a:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <timer0_overflow_count>
    259e:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <timer0_overflow_count+0x1>
    25a2:	a0 93 f2 03 	sts	0x03F2, r26	; 0x8003f2 <timer0_overflow_count+0x2>
    25a6:	b0 93 f3 03 	sts	0x03F3, r27	; 0x8003f3 <timer0_overflow_count+0x3>
    25aa:	bf 91       	pop	r27
    25ac:	af 91       	pop	r26
    25ae:	9f 91       	pop	r25
    25b0:	8f 91       	pop	r24
    25b2:	3f 91       	pop	r19
    25b4:	2f 91       	pop	r18
    25b6:	0f 90       	pop	r0
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	0f 90       	pop	r0
    25bc:	1f 90       	pop	r1
    25be:	18 95       	reti

000025c0 <micros>:
    25c0:	3f b7       	in	r19, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <timer0_overflow_count>
    25c8:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <timer0_overflow_count+0x1>
    25cc:	a0 91 f2 03 	lds	r26, 0x03F2	; 0x8003f2 <timer0_overflow_count+0x2>
    25d0:	b0 91 f3 03 	lds	r27, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x3>
    25d4:	26 b5       	in	r18, 0x26	; 38
    25d6:	a8 9b       	sbis	0x15, 0	; 21
    25d8:	05 c0       	rjmp	.+10     	; 0x25e4 <micros+0x24>
    25da:	2f 3f       	cpi	r18, 0xFF	; 255
    25dc:	19 f0       	breq	.+6      	; 0x25e4 <micros+0x24>
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	a1 1d       	adc	r26, r1
    25e2:	b1 1d       	adc	r27, r1
    25e4:	3f bf       	out	0x3f, r19	; 63
    25e6:	ba 2f       	mov	r27, r26
    25e8:	a9 2f       	mov	r26, r25
    25ea:	98 2f       	mov	r25, r24
    25ec:	88 27       	eor	r24, r24
    25ee:	82 0f       	add	r24, r18
    25f0:	91 1d       	adc	r25, r1
    25f2:	a1 1d       	adc	r26, r1
    25f4:	b1 1d       	adc	r27, r1
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	42 e0       	ldi	r20, 0x02	; 2
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	88 1f       	adc	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	4a 95       	dec	r20
    2606:	d1 f7       	brne	.-12     	; 0x25fc <micros+0x3c>
    2608:	08 95       	ret

0000260a <delay>:
    260a:	8f 92       	push	r8
    260c:	9f 92       	push	r9
    260e:	af 92       	push	r10
    2610:	bf 92       	push	r11
    2612:	cf 92       	push	r12
    2614:	df 92       	push	r13
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	6b 01       	movw	r12, r22
    261c:	7c 01       	movw	r14, r24
    261e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    2622:	4b 01       	movw	r8, r22
    2624:	5c 01       	movw	r10, r24
    2626:	c1 14       	cp	r12, r1
    2628:	d1 04       	cpc	r13, r1
    262a:	e1 04       	cpc	r14, r1
    262c:	f1 04       	cpc	r15, r1
    262e:	01 f1       	breq	.+64     	; 0x2670 <delay+0x66>
    2630:	0e 94 88 22 	call	0x4510	; 0x4510 <yield>
    2634:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	88 19       	sub	r24, r8
    263e:	99 09       	sbc	r25, r9
    2640:	aa 09       	sbc	r26, r10
    2642:	bb 09       	sbc	r27, r11
    2644:	88 3e       	cpi	r24, 0xE8	; 232
    2646:	93 40       	sbci	r25, 0x03	; 3
    2648:	a1 05       	cpc	r26, r1
    264a:	b1 05       	cpc	r27, r1
    264c:	60 f3       	brcs	.-40     	; 0x2626 <delay+0x1c>
    264e:	21 e0       	ldi	r18, 0x01	; 1
    2650:	c2 1a       	sub	r12, r18
    2652:	d1 08       	sbc	r13, r1
    2654:	e1 08       	sbc	r14, r1
    2656:	f1 08       	sbc	r15, r1
    2658:	88 ee       	ldi	r24, 0xE8	; 232
    265a:	88 0e       	add	r8, r24
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	98 1e       	adc	r9, r24
    2660:	a1 1c       	adc	r10, r1
    2662:	b1 1c       	adc	r11, r1
    2664:	c1 14       	cp	r12, r1
    2666:	d1 04       	cpc	r13, r1
    2668:	e1 04       	cpc	r14, r1
    266a:	f1 04       	cpc	r15, r1
    266c:	19 f7       	brne	.-58     	; 0x2634 <delay+0x2a>
    266e:	db cf       	rjmp	.-74     	; 0x2626 <delay+0x1c>
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	08 95       	ret

00002682 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2682:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2684:	84 b5       	in	r24, 0x24	; 36
    2686:	82 60       	ori	r24, 0x02	; 2
    2688:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    268a:	84 b5       	in	r24, 0x24	; 36
    268c:	81 60       	ori	r24, 0x01	; 1
    268e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2690:	85 b5       	in	r24, 0x25	; 37
    2692:	82 60       	ori	r24, 0x02	; 2
    2694:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2696:	85 b5       	in	r24, 0x25	; 37
    2698:	81 60       	ori	r24, 0x01	; 1
    269a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    269c:	ee e6       	ldi	r30, 0x6E	; 110
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	81 60       	ori	r24, 0x01	; 1
    26a4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    26a6:	e1 e8       	ldi	r30, 0x81	; 129
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    26ac:	80 81       	ld	r24, Z
    26ae:	82 60       	ori	r24, 0x02	; 2
    26b0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    26b2:	80 81       	ld	r24, Z
    26b4:	81 60       	ori	r24, 0x01	; 1
    26b6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    26b8:	e0 e8       	ldi	r30, 0x80	; 128
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	81 60       	ori	r24, 0x01	; 1
    26c0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    26c2:	e1 eb       	ldi	r30, 0xB1	; 177
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	84 60       	ori	r24, 0x04	; 4
    26ca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    26cc:	e0 eb       	ldi	r30, 0xB0	; 176
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	81 60       	ori	r24, 0x01	; 1
    26d4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    26d6:	ea e7       	ldi	r30, 0x7A	; 122
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	84 60       	ori	r24, 0x04	; 4
    26de:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    26e0:	80 81       	ld	r24, Z
    26e2:	82 60       	ori	r24, 0x02	; 2
    26e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    26e6:	80 81       	ld	r24, Z
    26e8:	81 60       	ori	r24, 0x01	; 1
    26ea:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    26ec:	80 81       	ld	r24, Z
    26ee:	80 68       	ori	r24, 0x80	; 128
    26f0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    26f2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    26f6:	08 95       	ret

000026f8 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    26f8:	4f 92       	push	r4
    26fa:	5f 92       	push	r5
    26fc:	6f 92       	push	r6
    26fe:	7f 92       	push	r7
    2700:	af 92       	push	r10
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	29 01       	movw	r4, r18
    271a:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    271c:	9b 01       	movw	r18, r22
    271e:	ac 01       	movw	r20, r24
    2720:	24 19       	sub	r18, r4
    2722:	35 09       	sbc	r19, r5
    2724:	46 09       	sbc	r20, r6
    2726:	57 09       	sbc	r21, r7
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	ab 89       	ldd	r26, Y+19	; 0x13
    272e:	bc 89       	ldd	r27, Y+20	; 0x14
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	6a 19       	sub	r22, r10
    2736:	7b 09       	sbc	r23, r11
    2738:	8c 09       	sbc	r24, r12
    273a:	9d 09       	sbc	r25, r13
    273c:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <__mulsi3>
    2740:	a8 01       	movw	r20, r16
    2742:	97 01       	movw	r18, r14
    2744:	24 19       	sub	r18, r4
    2746:	35 09       	sbc	r19, r5
    2748:	46 09       	sbc	r20, r6
    274a:	57 09       	sbc	r21, r7
    274c:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <__divmodsi4>
    2750:	ca 01       	movw	r24, r20
    2752:	b9 01       	movw	r22, r18
    2754:	6a 0d       	add	r22, r10
    2756:	7b 1d       	adc	r23, r11
    2758:	8c 1d       	adc	r24, r12
    275a:	9d 1d       	adc	r25, r13
}
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	df 90       	pop	r13
    276a:	cf 90       	pop	r12
    276c:	bf 90       	pop	r11
    276e:	af 90       	pop	r10
    2770:	7f 90       	pop	r7
    2772:	6f 90       	pop	r6
    2774:	5f 90       	pop	r5
    2776:	4f 90       	pop	r4
    2778:	08 95       	ret

0000277a <_ZN7AMS5812C1ER7TwoWirehNS_10TransducerE>:
}

/* returns the temperature value, C */
float AMS5812::getTemperature_C(){
  return _data.Temp_C;
}
    277a:	4f 92       	push	r4
    277c:	5f 92       	push	r5
    277e:	6f 92       	push	r6
    2780:	7f 92       	push	r7
    2782:	8f 92       	push	r8
    2784:	9f 92       	push	r9
    2786:	af 92       	push	r10
    2788:	bf 92       	push	r11
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	fc 01       	movw	r30, r24
    279c:	5b 01       	movw	r10, r22
    279e:	94 2e       	mov	r9, r20
    27a0:	82 2e       	mov	r8, r18
    27a2:	8a e0       	ldi	r24, 0x0A	; 10
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	93 8b       	std	Z+19, r25	; 0x13
    27a8:	82 8b       	std	Z+18, r24	; 0x12
    27aa:	80 e8       	ldi	r24, 0x80	; 128
    27ac:	9a e1       	ldi	r25, 0x1A	; 26
    27ae:	a6 e0       	ldi	r26, 0x06	; 6
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	82 a3       	std	Z+34, r24	; 0x22
    27b4:	93 a3       	std	Z+35, r25	; 0x23
    27b6:	a4 a3       	std	Z+36, r26	; 0x24
    27b8:	b5 a3       	std	Z+37, r27	; 0x25
    27ba:	80 e1       	ldi	r24, 0x10	; 16
    27bc:	96 e7       	ldi	r25, 0x76	; 118
    27be:	a7 ed       	ldi	r26, 0xD7	; 215
    27c0:	b5 e4       	ldi	r27, 0x45	; 69
    27c2:	86 a3       	std	Z+38, r24	; 0x26
    27c4:	97 a3       	std	Z+39, r25	; 0x27
    27c6:	a0 a7       	std	Z+40, r26	; 0x28
    27c8:	b1 a7       	std	Z+41, r27	; 0x29
    27ca:	2d ec       	ldi	r18, 0xCD	; 205
    27cc:	3c e0       	ldi	r19, 0x0C	; 12
    27ce:	33 a7       	std	Z+43, r19	; 0x2b
    27d0:	22 a7       	std	Z+42, r18	; 0x2a
    27d2:	83 e3       	ldi	r24, 0x33	; 51
    27d4:	93 e7       	ldi	r25, 0x73	; 115
    27d6:	95 a7       	std	Z+45, r25	; 0x2d
    27d8:	84 a7       	std	Z+44, r24	; 0x2c
    27da:	37 a7       	std	Z+47, r19	; 0x2f
    27dc:	26 a7       	std	Z+46, r18	; 0x2e
    27de:	91 ab       	std	Z+49, r25	; 0x31
    27e0:	80 ab       	std	Z+48, r24	; 0x30
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a8 ec       	ldi	r26, 0xC8	; 200
    27e8:	b1 ec       	ldi	r27, 0xC1	; 193
    27ea:	82 ab       	std	Z+50, r24	; 0x32
    27ec:	93 ab       	std	Z+51, r25	; 0x33
    27ee:	a4 ab       	std	Z+52, r26	; 0x34
    27f0:	b5 ab       	std	Z+53, r27	; 0x35
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	aa ea       	ldi	r26, 0xAA	; 170
    27f8:	b2 e4       	ldi	r27, 0x42	; 66
    27fa:	86 ab       	std	Z+54, r24	; 0x36
    27fc:	97 ab       	std	Z+55, r25	; 0x37
    27fe:	a0 af       	std	Z+56, r26	; 0x38
    2800:	b1 af       	std	Z+57, r27	; 0x39
    2802:	12 ae       	std	Z+58, r1	; 0x3a
    2804:	13 ae       	std	Z+59, r1	; 0x3b
    2806:	14 ae       	std	Z+60, r1	; 0x3c
    2808:	15 ae       	std	Z+61, r1	; 0x3d
    280a:	df 01       	movw	r26, r30
    280c:	de 96       	adiw	r26, 0x3e	; 62
    280e:	4a e9       	ldi	r20, 0x9A	; 154
    2810:	59 e9       	ldi	r21, 0x99	; 153
    2812:	69 e9       	ldi	r22, 0x99	; 153
    2814:	7d e3       	ldi	r23, 0x3D	; 61
    2816:	4d 93       	st	X+, r20
    2818:	5d 93       	st	X+, r21
    281a:	6d 93       	st	X+, r22
    281c:	7c 93       	st	X, r23
    281e:	13 97       	sbiw	r26, 0x03	; 3
    2820:	14 96       	adiw	r26, 0x04	; 4
    2822:	1d 92       	st	X+, r1
    2824:	1d 92       	st	X+, r1
    2826:	1d 92       	st	X+, r1
    2828:	1c 92       	st	X, r1
    282a:	13 97       	sbiw	r26, 0x03	; 3
    282c:	ef 01       	movw	r28, r30
    282e:	ca 5b       	subi	r28, 0xBA	; 186
    2830:	df 4f       	sbci	r29, 0xFF	; 255
    2832:	8a e9       	ldi	r24, 0x9A	; 154
    2834:	99 e9       	ldi	r25, 0x99	; 153
    2836:	a9 e1       	ldi	r26, 0x19	; 25
    2838:	be e3       	ldi	r27, 0x3E	; 62
    283a:	88 83       	st	Y, r24
    283c:	99 83       	std	Y+1, r25	; 0x01
    283e:	aa 83       	std	Y+2, r26	; 0x02
    2840:	bb 83       	std	Y+3, r27	; 0x03
    2842:	24 96       	adiw	r28, 0x04	; 4
    2844:	0a e9       	ldi	r16, 0x9A	; 154
    2846:	19 e9       	ldi	r17, 0x99	; 153
    2848:	29 e9       	ldi	r18, 0x99	; 153
    284a:	3d eb       	ldi	r19, 0xBD	; 189
    284c:	08 83       	st	Y, r16
    284e:	19 83       	std	Y+1, r17	; 0x01
    2850:	2a 83       	std	Y+2, r18	; 0x02
    2852:	3b 83       	std	Y+3, r19	; 0x03
    2854:	24 96       	adiw	r28, 0x04	; 4
    2856:	48 83       	st	Y, r20
    2858:	59 83       	std	Y+1, r21	; 0x01
    285a:	6a 83       	std	Y+2, r22	; 0x02
    285c:	7b 83       	std	Y+3, r23	; 0x03
    285e:	24 96       	adiw	r28, 0x04	; 4
    2860:	4a e9       	ldi	r20, 0x9A	; 154
    2862:	59 e9       	ldi	r21, 0x99	; 153
    2864:	69 e1       	ldi	r22, 0x19	; 25
    2866:	7e eb       	ldi	r23, 0xBE	; 190
    2868:	48 83       	st	Y, r20
    286a:	59 83       	std	Y+1, r21	; 0x01
    286c:	6a 83       	std	Y+2, r22	; 0x02
    286e:	7b 83       	std	Y+3, r23	; 0x03
    2870:	24 96       	adiw	r28, 0x04	; 4
    2872:	88 83       	st	Y, r24
    2874:	99 83       	std	Y+1, r25	; 0x01
    2876:	aa 83       	std	Y+2, r26	; 0x02
    2878:	bb 83       	std	Y+3, r27	; 0x03
    287a:	df 01       	movw	r26, r30
    287c:	a6 5a       	subi	r26, 0xA6	; 166
    287e:	bf 4f       	sbci	r27, 0xFF	; 255
    2880:	1d 92       	st	X+, r1
    2882:	1d 92       	st	X+, r1
    2884:	1d 92       	st	X+, r1
    2886:	1c 92       	st	X, r1
    2888:	13 97       	sbiw	r26, 0x03	; 3
    288a:	14 96       	adiw	r26, 0x04	; 4
    288c:	0a e9       	ldi	r16, 0x9A	; 154
    288e:	19 e9       	ldi	r17, 0x99	; 153
    2890:	29 e9       	ldi	r18, 0x99	; 153
    2892:	3e e3       	ldi	r19, 0x3E	; 62
    2894:	0d 93       	st	X+, r16
    2896:	1d 93       	st	X+, r17
    2898:	2d 93       	st	X+, r18
    289a:	3c 93       	st	X, r19
    289c:	13 97       	sbiw	r26, 0x03	; 3
    289e:	14 96       	adiw	r26, 0x04	; 4
    28a0:	1d 92       	st	X+, r1
    28a2:	1d 92       	st	X+, r1
    28a4:	1d 92       	st	X+, r1
    28a6:	1c 92       	st	X, r1
    28a8:	13 97       	sbiw	r26, 0x03	; 3
    28aa:	14 96       	adiw	r26, 0x04	; 4
    28ac:	4d ec       	ldi	r20, 0xCD	; 205
    28ae:	5c ec       	ldi	r21, 0xCC	; 204
    28b0:	6c e4       	ldi	r22, 0x4C	; 76
    28b2:	7f e3       	ldi	r23, 0x3F	; 63
    28b4:	4d 93       	st	X+, r20
    28b6:	5d 93       	st	X+, r21
    28b8:	6d 93       	st	X+, r22
    28ba:	7c 93       	st	X, r23
    28bc:	13 97       	sbiw	r26, 0x03	; 3
    28be:	14 96       	adiw	r26, 0x04	; 4
    28c0:	1d 92       	st	X+, r1
    28c2:	1d 92       	st	X+, r1
    28c4:	1d 92       	st	X+, r1
    28c6:	1c 92       	st	X, r1
    28c8:	13 97       	sbiw	r26, 0x03	; 3
    28ca:	68 96       	adiw	r28, 0x18	; 24
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	a0 ec       	ldi	r26, 0xC0	; 192
    28d2:	bf e3       	ldi	r27, 0x3F	; 63
    28d4:	88 83       	st	Y, r24
    28d6:	99 83       	std	Y+1, r25	; 0x01
    28d8:	aa 83       	std	Y+2, r26	; 0x02
    28da:	bb 83       	std	Y+3, r27	; 0x03
    28dc:	24 96       	adiw	r28, 0x04	; 4
    28de:	0f 2e       	mov	r0, r31
    28e0:	fa e9       	ldi	r31, 0x9A	; 154
    28e2:	cf 2e       	mov	r12, r31
    28e4:	f9 e9       	ldi	r31, 0x99	; 153
    28e6:	df 2e       	mov	r13, r31
    28e8:	ed 2c       	mov	r14, r13
    28ea:	fe eb       	ldi	r31, 0xBE	; 190
    28ec:	ff 2e       	mov	r15, r31
    28ee:	f0 2d       	mov	r31, r0
    28f0:	c8 82       	st	Y, r12
    28f2:	d9 82       	std	Y+1, r13	; 0x01
    28f4:	ea 82       	std	Y+2, r14	; 0x02
    28f6:	fb 82       	std	Y+3, r15	; 0x03
    28f8:	24 96       	adiw	r28, 0x04	; 4
    28fa:	08 83       	st	Y, r16
    28fc:	19 83       	std	Y+1, r17	; 0x01
    28fe:	2a 83       	std	Y+2, r18	; 0x02
    2900:	3b 83       	std	Y+3, r19	; 0x03
    2902:	24 96       	adiw	r28, 0x04	; 4
    2904:	0d ec       	ldi	r16, 0xCD	; 205
    2906:	1c ec       	ldi	r17, 0xCC	; 204
    2908:	2c e4       	ldi	r18, 0x4C	; 76
    290a:	3f eb       	ldi	r19, 0xBF	; 191
    290c:	08 83       	st	Y, r16
    290e:	19 83       	std	Y+1, r17	; 0x01
    2910:	2a 83       	std	Y+2, r18	; 0x02
    2912:	3b 83       	std	Y+3, r19	; 0x03
    2914:	24 96       	adiw	r28, 0x04	; 4
    2916:	48 83       	st	Y, r20
    2918:	59 83       	std	Y+1, r21	; 0x01
    291a:	6a 83       	std	Y+2, r22	; 0x02
    291c:	7b 83       	std	Y+3, r23	; 0x03
    291e:	24 96       	adiw	r28, 0x04	; 4
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	60 ec       	ldi	r22, 0xC0	; 192
    2926:	7f eb       	ldi	r23, 0xBF	; 191
    2928:	48 83       	st	Y, r20
    292a:	59 83       	std	Y+1, r21	; 0x01
    292c:	6a 83       	std	Y+2, r22	; 0x02
    292e:	7b 83       	std	Y+3, r23	; 0x03
    2930:	24 96       	adiw	r28, 0x04	; 4
    2932:	88 83       	st	Y, r24
    2934:	99 83       	std	Y+1, r25	; 0x01
    2936:	aa 83       	std	Y+2, r26	; 0x02
    2938:	bb 83       	std	Y+3, r27	; 0x03
    293a:	df 01       	movw	r26, r30
    293c:	a6 57       	subi	r26, 0x76	; 118
    293e:	bf 4f       	sbci	r27, 0xFF	; 255
    2940:	1d 92       	st	X+, r1
    2942:	1d 92       	st	X+, r1
    2944:	1d 92       	st	X+, r1
    2946:	1c 92       	st	X, r1
    2948:	13 97       	sbiw	r26, 0x03	; 3
    294a:	14 96       	adiw	r26, 0x04	; 4
    294c:	00 e0       	ldi	r16, 0x00	; 0
    294e:	10 e0       	ldi	r17, 0x00	; 0
    2950:	20 e4       	ldi	r18, 0x40	; 64
    2952:	30 e4       	ldi	r19, 0x40	; 64
    2954:	0d 93       	st	X+, r16
    2956:	1d 93       	st	X+, r17
    2958:	2d 93       	st	X+, r18
    295a:	3c 93       	st	X, r19
    295c:	13 97       	sbiw	r26, 0x03	; 3
    295e:	14 96       	adiw	r26, 0x04	; 4
    2960:	1d 92       	st	X+, r1
    2962:	1d 92       	st	X+, r1
    2964:	1d 92       	st	X+, r1
    2966:	1c 92       	st	X, r1
    2968:	13 97       	sbiw	r26, 0x03	; 3
    296a:	14 96       	adiw	r26, 0x04	; 4
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	60 ea       	ldi	r22, 0xA0	; 160
    2972:	70 e4       	ldi	r23, 0x40	; 64
    2974:	4d 93       	st	X+, r20
    2976:	5d 93       	st	X+, r21
    2978:	6d 93       	st	X+, r22
    297a:	7c 93       	st	X, r23
    297c:	13 97       	sbiw	r26, 0x03	; 3
    297e:	14 96       	adiw	r26, 0x04	; 4
    2980:	1d 92       	st	X+, r1
    2982:	1d 92       	st	X+, r1
    2984:	1d 92       	st	X+, r1
    2986:	1c 92       	st	X, r1
    2988:	13 97       	sbiw	r26, 0x03	; 3
    298a:	68 96       	adiw	r28, 0x18	; 24
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e7       	ldi	r26, 0x70	; 112
    2992:	b1 e4       	ldi	r27, 0x41	; 65
    2994:	88 83       	st	Y, r24
    2996:	99 83       	std	Y+1, r25	; 0x01
    2998:	aa 83       	std	Y+2, r26	; 0x02
    299a:	bb 83       	std	Y+3, r27	; 0x03
    299c:	24 96       	adiw	r28, 0x04	; 4
    299e:	18 82       	st	Y, r1
    29a0:	19 82       	std	Y+1, r1	; 0x01
    29a2:	1a 82       	std	Y+2, r1	; 0x02
    29a4:	1b 82       	std	Y+3, r1	; 0x03
    29a6:	24 96       	adiw	r28, 0x04	; 4
    29a8:	0f 2e       	mov	r0, r31
    29aa:	c1 2c       	mov	r12, r1
    29ac:	d1 2c       	mov	r13, r1
    29ae:	f0 ef       	ldi	r31, 0xF0	; 240
    29b0:	ef 2e       	mov	r14, r31
    29b2:	f1 e4       	ldi	r31, 0x41	; 65
    29b4:	ff 2e       	mov	r15, r31
    29b6:	f0 2d       	mov	r31, r0
    29b8:	c8 82       	st	Y, r12
    29ba:	d9 82       	std	Y+1, r13	; 0x01
    29bc:	ea 82       	std	Y+2, r14	; 0x02
    29be:	fb 82       	std	Y+3, r15	; 0x03
    29c0:	24 96       	adiw	r28, 0x04	; 4
    29c2:	18 82       	st	Y, r1
    29c4:	19 82       	std	Y+1, r1	; 0x01
    29c6:	1a 82       	std	Y+2, r1	; 0x02
    29c8:	1b 82       	std	Y+3, r1	; 0x03
    29ca:	24 96       	adiw	r28, 0x04	; 4
    29cc:	0f 2e       	mov	r0, r31
    29ce:	41 2c       	mov	r4, r1
    29d0:	51 2c       	mov	r5, r1
    29d2:	f0 e7       	ldi	r31, 0x70	; 112
    29d4:	6f 2e       	mov	r6, r31
    29d6:	f2 e4       	ldi	r31, 0x42	; 66
    29d8:	7f 2e       	mov	r7, r31
    29da:	f0 2d       	mov	r31, r0
    29dc:	48 82       	st	Y, r4
    29de:	59 82       	std	Y+1, r5	; 0x01
    29e0:	6a 82       	std	Y+2, r6	; 0x02
    29e2:	7b 82       	std	Y+3, r7	; 0x03
    29e4:	24 96       	adiw	r28, 0x04	; 4
    29e6:	18 82       	st	Y, r1
    29e8:	19 82       	std	Y+1, r1	; 0x01
    29ea:	1a 82       	std	Y+2, r1	; 0x02
    29ec:	1b 82       	std	Y+3, r1	; 0x03
    29ee:	24 96       	adiw	r28, 0x04	; 4
    29f0:	0f 2e       	mov	r0, r31
    29f2:	41 2c       	mov	r4, r1
    29f4:	51 2c       	mov	r5, r1
    29f6:	f8 ec       	ldi	r31, 0xC8	; 200
    29f8:	6f 2e       	mov	r6, r31
    29fa:	f2 e4       	ldi	r31, 0x42	; 66
    29fc:	7f 2e       	mov	r7, r31
    29fe:	f0 2d       	mov	r31, r0
    2a00:	48 82       	st	Y, r4
    2a02:	59 82       	std	Y+1, r5	; 0x01
    2a04:	6a 82       	std	Y+2, r6	; 0x02
    2a06:	7b 82       	std	Y+3, r7	; 0x03
    2a08:	24 96       	adiw	r28, 0x04	; 4
    2a0a:	0f 2e       	mov	r0, r31
    2a0c:	41 2c       	mov	r4, r1
    2a0e:	51 2c       	mov	r5, r1
    2a10:	f0 e4       	ldi	r31, 0x40	; 64
    2a12:	6f 2e       	mov	r6, r31
    2a14:	f0 ec       	ldi	r31, 0xC0	; 192
    2a16:	7f 2e       	mov	r7, r31
    2a18:	f0 2d       	mov	r31, r0
    2a1a:	48 82       	st	Y, r4
    2a1c:	59 82       	std	Y+1, r5	; 0x01
    2a1e:	6a 82       	std	Y+2, r6	; 0x02
    2a20:	7b 82       	std	Y+3, r7	; 0x03
    2a22:	24 96       	adiw	r28, 0x04	; 4
    2a24:	08 83       	st	Y, r16
    2a26:	19 83       	std	Y+1, r17	; 0x01
    2a28:	2a 83       	std	Y+2, r18	; 0x02
    2a2a:	3b 83       	std	Y+3, r19	; 0x03
    2a2c:	24 96       	adiw	r28, 0x04	; 4
    2a2e:	00 e0       	ldi	r16, 0x00	; 0
    2a30:	10 e0       	ldi	r17, 0x00	; 0
    2a32:	20 ea       	ldi	r18, 0xA0	; 160
    2a34:	30 ec       	ldi	r19, 0xC0	; 192
    2a36:	08 83       	st	Y, r16
    2a38:	19 83       	std	Y+1, r17	; 0x01
    2a3a:	2a 83       	std	Y+2, r18	; 0x02
    2a3c:	3b 83       	std	Y+3, r19	; 0x03
    2a3e:	24 96       	adiw	r28, 0x04	; 4
    2a40:	48 83       	st	Y, r20
    2a42:	59 83       	std	Y+1, r21	; 0x01
    2a44:	6a 83       	std	Y+2, r22	; 0x02
    2a46:	7b 83       	std	Y+3, r23	; 0x03
    2a48:	24 96       	adiw	r28, 0x04	; 4
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	60 e7       	ldi	r22, 0x70	; 112
    2a50:	71 ec       	ldi	r23, 0xC1	; 193
    2a52:	48 83       	st	Y, r20
    2a54:	59 83       	std	Y+1, r21	; 0x01
    2a56:	6a 83       	std	Y+2, r22	; 0x02
    2a58:	7b 83       	std	Y+3, r23	; 0x03
    2a5a:	24 96       	adiw	r28, 0x04	; 4
    2a5c:	88 83       	st	Y, r24
    2a5e:	99 83       	std	Y+1, r25	; 0x01
    2a60:	aa 83       	std	Y+2, r26	; 0x02
    2a62:	bb 83       	std	Y+3, r27	; 0x03
    2a64:	24 96       	adiw	r28, 0x04	; 4
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	60 e3       	ldi	r22, 0x30	; 48
    2a6c:	71 e4       	ldi	r23, 0x41	; 65
    2a6e:	48 83       	st	Y, r20
    2a70:	59 83       	std	Y+1, r21	; 0x01
    2a72:	6a 83       	std	Y+2, r22	; 0x02
    2a74:	7b 83       	std	Y+3, r23	; 0x03
    2a76:	24 96       	adiw	r28, 0x04	; 4
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	6c e8       	ldi	r22, 0x8C	; 140
    2a7e:	71 e4       	ldi	r23, 0x41	; 65
    2a80:	48 83       	st	Y, r20
    2a82:	59 83       	std	Y+1, r21	; 0x01
    2a84:	6a 83       	std	Y+2, r22	; 0x02
    2a86:	7b 83       	std	Y+3, r23	; 0x03
    2a88:	24 96       	adiw	r28, 0x04	; 4
    2a8a:	18 82       	st	Y, r1
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	1a 82       	std	Y+2, r1	; 0x02
    2a90:	1b 82       	std	Y+3, r1	; 0x03
    2a92:	24 96       	adiw	r28, 0x04	; 4
    2a94:	88 83       	st	Y, r24
    2a96:	99 83       	std	Y+1, r25	; 0x01
    2a98:	aa 83       	std	Y+2, r26	; 0x02
    2a9a:	bb 83       	std	Y+3, r27	; 0x03
    2a9c:	df 01       	movw	r26, r30
    2a9e:	ae 51       	subi	r26, 0x1E	; 30
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	1d 92       	st	X+, r1
    2aa4:	1d 92       	st	X+, r1
    2aa6:	1d 92       	st	X+, r1
    2aa8:	1c 92       	st	X, r1
    2aaa:	13 97       	sbiw	r26, 0x03	; 3
    2aac:	14 96       	adiw	r26, 0x04	; 4
    2aae:	cd 92       	st	X+, r12
    2ab0:	dd 92       	st	X+, r13
    2ab2:	ed 92       	st	X+, r14
    2ab4:	fc 92       	st	X, r15
    2ab6:	13 97       	sbiw	r26, 0x03	; 3
    2ab8:	b1 86       	std	Z+9, r11	; 0x09
    2aba:	a0 86       	std	Z+8, r10	; 0x08
    2abc:	92 86       	std	Z+10, r9	; 0x0a
    2abe:	83 86       	std	Z+11, r8	; 0x0b
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	9f 90       	pop	r9
    2ad6:	8f 90       	pop	r8
    2ad8:	7f 90       	pop	r7
    2ada:	6f 90       	pop	r6
    2adc:	5f 90       	pop	r5
    2ade:	4f 90       	pop	r4
    2ae0:	08 95       	ret

00002ae2 <_ZN7AMS581214getPressure_PaEv>:
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	08 95       	ret

00002aee <_ZN7AMS581213getTransducerEv>:

/* sets the pressure and temperature range based on the chip */
void AMS5812::getTransducer(){
    2aee:	dc 01       	movw	r26, r24
  // setting the min and max pressures based on which transducer it is
  switch(_type) {
    2af0:	1b 96       	adiw	r26, 0x0b	; 11
    2af2:	ec 91       	ld	r30, X
    2af4:	1b 97       	sbiw	r26, 0x0b	; 11
    2af6:	4e 2f       	mov	r20, r30
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	46 31       	cpi	r20, 0x16	; 22
    2afc:	51 05       	cpc	r21, r1
    2afe:	08 f0       	brcs	.+2      	; 0x2b02 <_ZN7AMS581213getTransducerEv+0x14>
    2b00:	7c c0       	rjmp	.+248    	; 0x2bfa <_ZN7AMS581213getTransducerEv+0x10c>
    2b02:	fa 01       	movw	r30, r20
    2b04:	ed 5b       	subi	r30, 0xBD	; 189
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <__tablejump2__>
    case AMS5812_0000_D:
      _pMin = AMS5812_0000_D_P_MIN;
    2b0c:	da 96       	adiw	r26, 0x3a	; 58
    2b0e:	4d 91       	ld	r20, X+
    2b10:	5d 91       	ld	r21, X+
    2b12:	6d 91       	ld	r22, X+
    2b14:	7c 91       	ld	r23, X
    2b16:	dd 97       	sbiw	r26, 0x3d	; 61
    2b18:	5a 96       	adiw	r26, 0x1a	; 26
    2b1a:	4d 93       	st	X+, r20
    2b1c:	5d 93       	st	X+, r21
    2b1e:	6d 93       	st	X+, r22
    2b20:	7c 93       	st	X, r23
    2b22:	5d 97       	sbiw	r26, 0x1d	; 29
      _pMax = AMS5812_0000_D_P_MAX;
    2b24:	fc 01       	movw	r30, r24
    2b26:	fe 96       	adiw	r30, 0x3e	; 62
    2b28:	5e c0       	rjmp	.+188    	; 0x2be6 <_ZN7AMS581213getTransducerEv+0xf8>
      break;
    case AMS5812_0001_D:  
      _pMin = AMS5812_0001_D_P_MIN;
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	ee 5b       	subi	r30, 0xBE	; 190
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	4f c0       	rjmp	.+158    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0001_D_P_MAX;
      break;
    case AMS5812_0000_D_B:
      _pMin = AMS5812_0000_D_B_P_MIN;
    2b32:	fc 01       	movw	r30, r24
    2b34:	e6 5b       	subi	r30, 0xB6	; 182
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	4b c0       	rjmp	.+150    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0000_D_B_P_MAX;
      break;
    case AMS5812_0001_D_B:
      _pMin = AMS5812_0001_D_B_P_MIN;
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	ee 5a       	subi	r30, 0xAE	; 174
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	47 c0       	rjmp	.+142    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0001_D_B_P_MAX;
      break;
    case AMS5812_0003_D:
      _pMin = AMS5812_0003_D_P_MIN;
    2b42:	fc 01       	movw	r30, r24
    2b44:	e6 5a       	subi	r30, 0xA6	; 166
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	43 c0       	rjmp	.+134    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0003_D_P_MAX;
      break;
    case AMS5812_0008_D:
      _pMin = AMS5812_0008_D_P_MIN;
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	ee 59       	subi	r30, 0x9E	; 158
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	3f c0       	rjmp	.+126    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0008_D_P_MAX;
      break;
    case AMS5812_0015_D:
      _pMin = AMS5812_0015_D_P_MIN;
    2b52:	fc 01       	movw	r30, r24
    2b54:	e6 59       	subi	r30, 0x96	; 150
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	3b c0       	rjmp	.+118    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0015_D_P_MAX;
      break;
    case AMS5812_0003_D_B:
      _pMin = AMS5812_0003_D_B_P_MIN;
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	ee 58       	subi	r30, 0x8E	; 142
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	37 c0       	rjmp	.+110    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0003_D_B_P_MAX;
      break;
    case AMS5812_0008_D_B:
      _pMin = AMS5812_0008_D_B_P_MIN;
    2b62:	fc 01       	movw	r30, r24
    2b64:	e6 58       	subi	r30, 0x86	; 134
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	33 c0       	rjmp	.+102    	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0008_D_B_P_MAX;
      break;
    case AMS5812_0015_D_B:
      _pMin = AMS5812_0015_D_B_P_MIN;
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	ee 57       	subi	r30, 0x7E	; 126
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	2f c0       	rjmp	.+94     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0015_D_B_P_MAX;
      break;
    case AMS5812_0030_D:
      _pMin = AMS5812_0030_D_P_MIN;
    2b72:	fc 01       	movw	r30, r24
    2b74:	e6 57       	subi	r30, 0x76	; 118
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	2b c0       	rjmp	.+86     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0030_D_P_MAX;
      break;
    case AMS5812_0050_D:
      _pMin = AMS5812_0050_D_P_MIN;
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	ee 56       	subi	r30, 0x6E	; 110
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	27 c0       	rjmp	.+78     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0050_D_P_MAX;
      break;
    case AMS5812_0150_D:
      _pMin = AMS5812_0150_D_P_MIN;
    2b82:	fc 01       	movw	r30, r24
    2b84:	e6 56       	subi	r30, 0x66	; 102
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	23 c0       	rjmp	.+70     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_D_P_MAX;
      break;
    case AMS5812_0300_D:
      _pMin = AMS5812_0300_D_P_MIN;
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	ee 55       	subi	r30, 0x5E	; 94
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	1f c0       	rjmp	.+62     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0300_D_P_MAX;
      break;
    case AMS5812_0600_D:
      _pMin = AMS5812_0600_D_P_MIN;
    2b92:	fc 01       	movw	r30, r24
    2b94:	e6 55       	subi	r30, 0x56	; 86
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	1b c0       	rjmp	.+54     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0600_D_P_MAX;
      break;
    case AMS5812_1000_D:
      _pMin = AMS5812_1000_D_P_MIN;
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	ee 54       	subi	r30, 0x4E	; 78
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	17 c0       	rjmp	.+46     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_1000_D_P_MAX;
      break;
    case AMS5812_0030_D_B:
      _pMin = AMS5812_0030_D_B_P_MIN;
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	e6 54       	subi	r30, 0x46	; 70
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	13 c0       	rjmp	.+38     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0030_D_B_P_MAX;
      break;
    case AMS5812_0050_D_B:
      _pMin = AMS5812_0050_D_B_P_MIN;
    2baa:	fc 01       	movw	r30, r24
    2bac:	ee 53       	subi	r30, 0x3E	; 62
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0050_D_B_P_MAX;
      break;
    case AMS5812_0150_D_B:
      _pMin = AMS5812_0150_D_B_P_MIN;
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	e6 53       	subi	r30, 0x36	; 54
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	0b c0       	rjmp	.+22     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_D_B_P_MAX;
      break;
    case AMS5812_0150_B:
      _pMin = AMS5812_0150_B_P_MIN;
    2bba:	fc 01       	movw	r30, r24
    2bbc:	ee 52       	subi	r30, 0x2E	; 46
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	07 c0       	rjmp	.+14     	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_B_P_MAX;
      break;
    case AMS5812_0150_A:
      _pMin = AMS5812_0150_A_P_MIN;
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e6 52       	subi	r30, 0x26	; 38
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	03 c0       	rjmp	.+6      	; 0x2bd0 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_A_P_MAX;
      break;
    case AMS5812_0300_A:
      _pMin = AMS5812_0300_A_P_MIN;
    2bca:	fc 01       	movw	r30, r24
    2bcc:	ee 51       	subi	r30, 0x1E	; 30
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	40 81       	ld	r20, Z
    2bd2:	51 81       	ldd	r21, Z+1	; 0x01
    2bd4:	62 81       	ldd	r22, Z+2	; 0x02
    2bd6:	73 81       	ldd	r23, Z+3	; 0x03
    2bd8:	5a 96       	adiw	r26, 0x1a	; 26
    2bda:	4d 93       	st	X+, r20
    2bdc:	5d 93       	st	X+, r21
    2bde:	6d 93       	st	X+, r22
    2be0:	7c 93       	st	X, r23
    2be2:	5d 97       	sbiw	r26, 0x1d	; 29
      _pMax = AMS5812_0300_A_P_MAX;
    2be4:	34 96       	adiw	r30, 0x04	; 4
    2be6:	40 81       	ld	r20, Z
    2be8:	51 81       	ldd	r21, Z+1	; 0x01
    2bea:	62 81       	ldd	r22, Z+2	; 0x02
    2bec:	73 81       	ldd	r23, Z+3	; 0x03
    2bee:	5e 96       	adiw	r26, 0x1e	; 30
    2bf0:	4d 93       	st	X+, r20
    2bf2:	5d 93       	st	X+, r21
    2bf4:	6d 93       	st	X+, r22
    2bf6:	7c 93       	st	X, r23
    2bf8:	91 97       	sbiw	r26, 0x21	; 33
    2bfa:	08 95       	ret

00002bfc <_ZN7AMS58129readBytesEPjS0_>:
      break;
  }
}

/* reads pressure and temperature and returns values in counts */
int AMS5812::readBytes(uint16_t* pressureCounts, uint16_t* temperatureCounts){
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	ec 01       	movw	r28, r24
    2c0a:	7b 01       	movw	r14, r22
    2c0c:	8a 01       	movw	r16, r20
  // read from sensor
  _numBytes = _bus->requestFrom(_address,sizeof(_buffer));
    2c0e:	44 e0       	ldi	r20, 0x04	; 4
    2c10:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c12:	88 85       	ldd	r24, Y+8	; 0x08
    2c14:	99 85       	ldd	r25, Y+9	; 0x09
    2c16:	0e 94 81 22 	call	0x4502	; 0x4502 <_ZN7TwoWire11requestFromEhh>
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	99 8b       	std	Y+17, r25	; 0x11
    2c1e:	88 8b       	std	Y+16, r24	; 0x10
  // put the data in buffer
  if (_numBytes == sizeof(_buffer)) {
    2c20:	04 97       	sbiw	r24, 0x04	; 4
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <_ZN7AMS58129readBytesEPjS0_+0x2a>
    2c24:	41 c0       	rjmp	.+130    	; 0x2ca8 <_ZN7AMS58129readBytesEPjS0_+0xac>
    _buffer[0] = _bus->read(); 
    2c26:	88 85       	ldd	r24, Y+8	; 0x08
    2c28:	99 85       	ldd	r25, Y+9	; 0x09
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	ed 91       	ld	r30, X+
    2c2e:	fc 91       	ld	r31, X
    2c30:	02 84       	ldd	r0, Z+10	; 0x0a
    2c32:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c34:	e0 2d       	mov	r30, r0
    2c36:	09 95       	icall
    2c38:	8c 87       	std	Y+12, r24	; 0x0c
    _buffer[1] = _bus->read();
    2c3a:	88 85       	ldd	r24, Y+8	; 0x08
    2c3c:	99 85       	ldd	r25, Y+9	; 0x09
    2c3e:	dc 01       	movw	r26, r24
    2c40:	ed 91       	ld	r30, X+
    2c42:	fc 91       	ld	r31, X
    2c44:	02 84       	ldd	r0, Z+10	; 0x0a
    2c46:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c48:	e0 2d       	mov	r30, r0
    2c4a:	09 95       	icall
    2c4c:	8d 87       	std	Y+13, r24	; 0x0d
    _buffer[2] = _bus->read();
    2c4e:	88 85       	ldd	r24, Y+8	; 0x08
    2c50:	99 85       	ldd	r25, Y+9	; 0x09
    2c52:	dc 01       	movw	r26, r24
    2c54:	ed 91       	ld	r30, X+
    2c56:	fc 91       	ld	r31, X
    2c58:	02 84       	ldd	r0, Z+10	; 0x0a
    2c5a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c5c:	e0 2d       	mov	r30, r0
    2c5e:	09 95       	icall
    2c60:	8e 87       	std	Y+14, r24	; 0x0e
    _buffer[3] = _bus->read();
    2c62:	88 85       	ldd	r24, Y+8	; 0x08
    2c64:	99 85       	ldd	r25, Y+9	; 0x09
    2c66:	dc 01       	movw	r26, r24
    2c68:	ed 91       	ld	r30, X+
    2c6a:	fc 91       	ld	r31, X
    2c6c:	02 84       	ldd	r0, Z+10	; 0x0a
    2c6e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c70:	e0 2d       	mov	r30, r0
    2c72:	09 95       	icall
    2c74:	8f 87       	std	Y+15, r24	; 0x0f
    // assemble into a uint16_t
    *pressureCounts = (((uint16_t) (_buffer[0]&0x7F)) <<8) + (((uint16_t) _buffer[1]));
    2c76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c78:	8f 77       	andi	r24, 0x7F	; 127
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	98 2f       	mov	r25, r24
    2c7e:	88 27       	eor	r24, r24
    2c80:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c82:	82 0f       	add	r24, r18
    2c84:	91 1d       	adc	r25, r1
    2c86:	f7 01       	movw	r30, r14
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    *temperatureCounts = (((uint16_t) (_buffer[2]&0x7F)) <<8) + (((uint16_t) _buffer[3]));
    2c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c8e:	8f 77       	andi	r24, 0x7F	; 127
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	98 2f       	mov	r25, r24
    2c94:	88 27       	eor	r24, r24
    2c96:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c98:	82 0f       	add	r24, r18
    2c9a:	91 1d       	adc	r25, r1
    2c9c:	d8 01       	movw	r26, r16
    2c9e:	8d 93       	st	X+, r24
    2ca0:	9c 93       	st	X, r25
    _status = 1;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <_ZN7AMS58129readBytesEPjS0_+0xb0>
  } else {
    _status = -1;
    2ca8:	8f ef       	ldi	r24, 0xFF	; 255
    2caa:	9f ef       	ldi	r25, 0xFF	; 255
    2cac:	9d 8b       	std	Y+21, r25	; 0x15
    2cae:	8c 8b       	std	Y+20, r24	; 0x14
  }
  return _status;
}
    2cb0:	8c 89       	ldd	r24, Y+20	; 0x14
    2cb2:	9d 89       	ldd	r25, Y+21	; 0x15
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	08 95       	ret

00002cc2 <_ZN7AMS58125beginEv>:
  // transducer type
  _type = type; 
}

/* starts the I2C communication and sets the pressure and temperature ranges using getTransducer */
int AMS5812::begin(){
    2cc2:	cf 92       	push	r12
    2cc4:	df 92       	push	r13
    2cc6:	ef 92       	push	r14
    2cc8:	ff 92       	push	r15
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	ec 01       	movw	r28, r24
  // starting the I2C bus
  _bus->begin();
    2cd4:	88 85       	ldd	r24, Y+8	; 0x08
    2cd6:	99 85       	ldd	r25, Y+9	; 0x09
    2cd8:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <_ZN7TwoWire5beginEv>
  // setting the I2C clock
  _bus->setClock(_i2cRate);
    2cdc:	4a a1       	ldd	r20, Y+34	; 0x22
    2cde:	5b a1       	ldd	r21, Y+35	; 0x23
    2ce0:	6c a1       	ldd	r22, Y+36	; 0x24
    2ce2:	7d a1       	ldd	r23, Y+37	; 0x25
    2ce4:	88 85       	ldd	r24, Y+8	; 0x08
    2ce6:	99 85       	ldd	r25, Y+9	; 0x09
    2ce8:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <_ZN7TwoWire8setClockEm>
  // setting the min and max pressure based on the chip
  getTransducer();
    2cec:	ce 01       	movw	r24, r28
    2cee:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN7AMS581213getTransducerEv>
  // checking to see if we can talk with the sensor
  for (size_t i=0; i < _maxAttempts; i++) {
    2cf2:	00 e0       	ldi	r16, 0x00	; 0
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
    _status = readBytes(&_pressureCounts,&_temperatureCounts);
    2cf6:	7e 01       	movw	r14, r28
    2cf8:	88 e1       	ldi	r24, 0x18	; 24
    2cfa:	e8 0e       	add	r14, r24
    2cfc:	f1 1c       	adc	r15, r1
    2cfe:	6e 01       	movw	r12, r28
    2d00:	86 e1       	ldi	r24, 0x16	; 22
    2d02:	c8 0e       	add	r12, r24
    2d04:	d1 1c       	adc	r13, r1
  // setting the I2C clock
  _bus->setClock(_i2cRate);
  // setting the min and max pressure based on the chip
  getTransducer();
  // checking to see if we can talk with the sensor
  for (size_t i=0; i < _maxAttempts; i++) {
    2d06:	8a 89       	ldd	r24, Y+18	; 0x12
    2d08:	9b 89       	ldd	r25, Y+19	; 0x13
    2d0a:	08 17       	cp	r16, r24
    2d0c:	19 07       	cpc	r17, r25
    2d0e:	98 f4       	brcc	.+38     	; 0x2d36 <_ZN7AMS58125beginEv+0x74>
    _status = readBytes(&_pressureCounts,&_temperatureCounts);
    2d10:	a7 01       	movw	r20, r14
    2d12:	b6 01       	movw	r22, r12
    2d14:	ce 01       	movw	r24, r28
    2d16:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN7AMS58129readBytesEPjS0_>
    2d1a:	9d 8b       	std	Y+21, r25	; 0x15
    2d1c:	8c 8b       	std	Y+20, r24	; 0x14
    if (_status > 0) {break;}
    2d1e:	18 16       	cp	r1, r24
    2d20:	19 06       	cpc	r1, r25
    2d22:	4c f0       	brlt	.+18     	; 0x2d36 <_ZN7AMS58125beginEv+0x74>
    delay(10);
    2d24:	6a e0       	ldi	r22, 0x0A	; 10
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
  // setting the I2C clock
  _bus->setClock(_i2cRate);
  // setting the min and max pressure based on the chip
  getTransducer();
  // checking to see if we can talk with the sensor
  for (size_t i=0; i < _maxAttempts; i++) {
    2d30:	0f 5f       	subi	r16, 0xFF	; 255
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	e8 cf       	rjmp	.-48     	; 0x2d06 <_ZN7AMS58125beginEv+0x44>
    _status = readBytes(&_pressureCounts,&_temperatureCounts);
    if (_status > 0) {break;}
    delay(10);
  }
  return _status;
}
    2d36:	8c 89       	ldd	r24, Y+20	; 0x14
    2d38:	9d 89       	ldd	r25, Y+21	; 0x15
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	ff 90       	pop	r15
    2d44:	ef 90       	pop	r14
    2d46:	df 90       	pop	r13
    2d48:	cf 90       	pop	r12
    2d4a:	08 95       	ret

00002d4c <_ZN7AMS581210readSensorEv>:

/* reads data from the sensor */
int AMS5812::readSensor(){
    2d4c:	4f 92       	push	r4
    2d4e:	5f 92       	push	r5
    2d50:	6f 92       	push	r6
    2d52:	7f 92       	push	r7
    2d54:	8f 92       	push	r8
    2d56:	9f 92       	push	r9
    2d58:	af 92       	push	r10
    2d5a:	bf 92       	push	r11
    2d5c:	cf 92       	push	r12
    2d5e:	df 92       	push	r13
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	ec 01       	movw	r28, r24
  // get pressure and temperature off transducer
  _status = readBytes(&_pressureCounts, &_temperatureCounts);
    2d6e:	ac 01       	movw	r20, r24
    2d70:	48 5e       	subi	r20, 0xE8	; 232
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255
    2d74:	bc 01       	movw	r22, r24
    2d76:	6a 5e       	subi	r22, 0xEA	; 234
    2d78:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN7AMS58129readBytesEPjS0_>
    2d7e:	8c 01       	movw	r16, r24
    2d80:	9d 8b       	std	Y+21, r25	; 0x15
    2d82:	8c 8b       	std	Y+20, r24	; 0x14
  // convert counts to pressure, PA
  _data.Pressure_Pa = ((_pressureCounts - _digOutPmin)/((_digOutPmax - _digOutPmin)/(_pMax - _pMin)) + _pMin) * _psi2pa;
    2d84:	6a a4       	ldd	r6, Y+42	; 0x2a
    2d86:	7b a4       	ldd	r7, Y+43	; 0x2b
    2d88:	ca 8c       	ldd	r12, Y+26	; 0x1a
    2d8a:	db 8c       	ldd	r13, Y+27	; 0x1b
    2d8c:	ec 8c       	ldd	r14, Y+28	; 0x1c
    2d8e:	fd 8c       	ldd	r15, Y+29	; 0x1d
    2d90:	6e 89       	ldd	r22, Y+22	; 0x16
    2d92:	7f 89       	ldd	r23, Y+23	; 0x17
    2d94:	66 19       	sub	r22, r6
    2d96:	77 09       	sbc	r23, r7
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__floatunsisf>
    2da0:	4b 01       	movw	r8, r22
    2da2:	5c 01       	movw	r10, r24
    2da4:	6c a5       	ldd	r22, Y+44	; 0x2c
    2da6:	7d a5       	ldd	r23, Y+45	; 0x2d
    2da8:	66 19       	sub	r22, r6
    2daa:	77 09       	sbc	r23, r7
    2dac:	07 2e       	mov	r0, r23
    2dae:	00 0c       	add	r0, r0
    2db0:	88 0b       	sbc	r24, r24
    2db2:	99 0b       	sbc	r25, r25
    2db4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__floatsisf>
    2db8:	2b 01       	movw	r4, r22
    2dba:	3c 01       	movw	r6, r24
    2dbc:	a7 01       	movw	r20, r14
    2dbe:	96 01       	movw	r18, r12
    2dc0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2dc2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2dc4:	88 a1       	ldd	r24, Y+32	; 0x20
    2dc6:	99 a1       	ldd	r25, Y+33	; 0x21
    2dc8:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    2dcc:	9b 01       	movw	r18, r22
    2dce:	ac 01       	movw	r20, r24
    2dd0:	c3 01       	movw	r24, r6
    2dd2:	b2 01       	movw	r22, r4
    2dd4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
    2dd8:	9b 01       	movw	r18, r22
    2dda:	ac 01       	movw	r20, r24
    2ddc:	c5 01       	movw	r24, r10
    2dde:	b4 01       	movw	r22, r8
    2de0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
    2de4:	a7 01       	movw	r20, r14
    2de6:	96 01       	movw	r18, r12
    2de8:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    2dec:	2e a1       	ldd	r18, Y+38	; 0x26
    2dee:	3f a1       	ldd	r19, Y+39	; 0x27
    2df0:	48 a5       	ldd	r20, Y+40	; 0x28
    2df2:	59 a5       	ldd	r21, Y+41	; 0x29
    2df4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3>
    2df8:	68 83       	st	Y, r22
    2dfa:	79 83       	std	Y+1, r23	; 0x01
    2dfc:	8a 83       	std	Y+2, r24	; 0x02
    2dfe:	9b 83       	std	Y+3, r25	; 0x03
  // convert counts to temperature, C
  _data.Temp_C = ((_temperatureCounts - _digOutTmin)/((_digOutTmax - _digOutTmin)/(_tMax - _tMin)) + _tMin);
    2e00:	6e a4       	ldd	r6, Y+46	; 0x2e
    2e02:	7f a4       	ldd	r7, Y+47	; 0x2f
    2e04:	ca a8       	ldd	r12, Y+50	; 0x32
    2e06:	db a8       	ldd	r13, Y+51	; 0x33
    2e08:	ec a8       	ldd	r14, Y+52	; 0x34
    2e0a:	fd a8       	ldd	r15, Y+53	; 0x35
    2e0c:	68 8d       	ldd	r22, Y+24	; 0x18
    2e0e:	79 8d       	ldd	r23, Y+25	; 0x19
    2e10:	66 19       	sub	r22, r6
    2e12:	77 09       	sbc	r23, r7
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__floatunsisf>
    2e1c:	4b 01       	movw	r8, r22
    2e1e:	5c 01       	movw	r10, r24
    2e20:	68 a9       	ldd	r22, Y+48	; 0x30
    2e22:	79 a9       	ldd	r23, Y+49	; 0x31
    2e24:	66 19       	sub	r22, r6
    2e26:	77 09       	sbc	r23, r7
    2e28:	07 2e       	mov	r0, r23
    2e2a:	00 0c       	add	r0, r0
    2e2c:	88 0b       	sbc	r24, r24
    2e2e:	99 0b       	sbc	r25, r25
    2e30:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__floatsisf>
    2e34:	2b 01       	movw	r4, r22
    2e36:	3c 01       	movw	r6, r24
    2e38:	a7 01       	movw	r20, r14
    2e3a:	96 01       	movw	r18, r12
    2e3c:	6e a9       	ldd	r22, Y+54	; 0x36
    2e3e:	7f a9       	ldd	r23, Y+55	; 0x37
    2e40:	88 ad       	ldd	r24, Y+56	; 0x38
    2e42:	99 ad       	ldd	r25, Y+57	; 0x39
    2e44:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    2e48:	9b 01       	movw	r18, r22
    2e4a:	ac 01       	movw	r20, r24
    2e4c:	c3 01       	movw	r24, r6
    2e4e:	b2 01       	movw	r22, r4
    2e50:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
    2e54:	9b 01       	movw	r18, r22
    2e56:	ac 01       	movw	r20, r24
    2e58:	c5 01       	movw	r24, r10
    2e5a:	b4 01       	movw	r22, r8
    2e5c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__divsf3>
    2e60:	a7 01       	movw	r20, r14
    2e62:	96 01       	movw	r18, r12
    2e64:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
    2e68:	6c 83       	std	Y+4, r22	; 0x04
    2e6a:	7d 83       	std	Y+5, r23	; 0x05
    2e6c:	8e 83       	std	Y+6, r24	; 0x06
    2e6e:	9f 83       	std	Y+7, r25	; 0x07
  return _status;
}
    2e70:	c8 01       	movw	r24, r16
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	ff 90       	pop	r15
    2e7c:	ef 90       	pop	r14
    2e7e:	df 90       	pop	r13
    2e80:	cf 90       	pop	r12
    2e82:	bf 90       	pop	r11
    2e84:	af 90       	pop	r10
    2e86:	9f 90       	pop	r9
    2e88:	8f 90       	pop	r8
    2e8a:	7f 90       	pop	r7
    2e8c:	6f 90       	pop	r6
    2e8e:	5f 90       	pop	r5
    2e90:	4f 90       	pop	r4
    2e92:	08 95       	ret

00002e94 <_ZN14TFT_22_ILI9225C1Eaaaah>:
    for (uint8_t k = 0; k < strlen(s); k++) {
        currx += drawChar(currx, y, s[k], color) + 1;
    }
#endif
    return currx;
}
    2e94:	ef 92       	push	r14
    2e96:	0f 93       	push	r16
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	ec 01       	movw	r28, r24
    2e9e:	88 e1       	ldi	r24, 0x18	; 24
    2ea0:	e4 e0       	ldi	r30, 0x04	; 4
    2ea2:	f1 e0       	ldi	r31, 0x01	; 1
    2ea4:	de 01       	movw	r26, r28
    2ea6:	5c 96       	adiw	r26, 0x1c	; 28
    2ea8:	01 90       	ld	r0, Z+
    2eaa:	0d 92       	st	X+, r0
    2eac:	8a 95       	dec	r24
    2eae:	e1 f7       	brne	.-8      	; 0x2ea8 <_ZN14TFT_22_ILI9225C1Eaaaah+0x14>
    2eb0:	6e 83       	std	Y+6, r22	; 0x06
    2eb2:	4f 83       	std	Y+7, r20	; 0x07
    2eb4:	28 87       	std	Y+8, r18	; 0x08
    2eb6:	8f ef       	ldi	r24, 0xFF	; 255
    2eb8:	8a 87       	std	Y+10, r24	; 0x0a
    2eba:	89 87       	std	Y+9, r24	; 0x09
    2ebc:	0b 87       	std	Y+11, r16	; 0x0b
    2ebe:	eb 8e       	std	Y+27, r14	; 0x1b
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	8c ab       	std	Y+52, r24	; 0x34
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	fe 96       	adiw	r30, 0x3e	; 62
    2ec8:	10 82       	st	Z, r1
    2eca:	11 82       	std	Z+1, r1	; 0x01
    2ecc:	12 82       	std	Z+2, r1	; 0x02
    2ece:	13 82       	std	Z+3, r1	; 0x03
    2ed0:	ce 5b       	subi	r28, 0xBE	; 190
    2ed2:	df 4f       	sbci	r29, 0xFF	; 255
    2ed4:	19 82       	std	Y+1, r1	; 0x01
    2ed6:	18 82       	st	Y, r1
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	0f 91       	pop	r16
    2ede:	ef 90       	pop	r14
    2ee0:	08 95       	ret

00002ee2 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>:
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	ec 01       	movw	r28, r24
    2ee8:	db 01       	movw	r26, r22
    2eea:	fa 01       	movw	r30, r20
    2eec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eee:	82 30       	cpi	r24, 0x02	; 2
    2ef0:	a9 f0       	breq	.+42     	; 0x2f1c <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x3a>
    2ef2:	83 30       	cpi	r24, 0x03	; 3
    2ef4:	29 f1       	breq	.+74     	; 0x2f40 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x5e>
    2ef6:	81 30       	cpi	r24, 0x01	; 1
    2ef8:	a1 f5       	brne	.+104    	; 0x2f62 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x80>
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	9b 81       	ldd	r25, Y+3	; 0x03
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	20 81       	ld	r18, Z
    2f02:	31 81       	ldd	r19, Z+1	; 0x01
    2f04:	82 1b       	sub	r24, r18
    2f06:	93 0b       	sbc	r25, r19
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	2d 91       	ld	r18, X+
    2f0e:	3c 91       	ld	r19, X
    2f10:	11 97       	sbiw	r26, 0x01	; 1
    2f12:	8d 93       	st	X+, r24
    2f14:	9c 93       	st	X, r25
    2f16:	31 83       	std	Z+1, r19	; 0x01
    2f18:	20 83       	st	Z, r18
    2f1a:	23 c0       	rjmp	.+70     	; 0x2f62 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x80>
    2f1c:	88 81       	ld	r24, Y
    2f1e:	99 81       	ldd	r25, Y+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	2d 91       	ld	r18, X+
    2f24:	3c 91       	ld	r19, X
    2f26:	11 97       	sbiw	r26, 0x01	; 1
    2f28:	82 1b       	sub	r24, r18
    2f2a:	93 0b       	sbc	r25, r19
    2f2c:	8d 93       	st	X+, r24
    2f2e:	9c 93       	st	X, r25
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	9b 81       	ldd	r25, Y+3	; 0x03
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	20 81       	ld	r18, Z
    2f38:	31 81       	ldd	r19, Z+1	; 0x01
    2f3a:	82 1b       	sub	r24, r18
    2f3c:	93 0b       	sbc	r25, r19
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x7c>
    2f40:	88 81       	ld	r24, Y
    2f42:	99 81       	ldd	r25, Y+1	; 0x01
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	2d 91       	ld	r18, X+
    2f48:	3c 91       	ld	r19, X
    2f4a:	11 97       	sbiw	r26, 0x01	; 1
    2f4c:	82 1b       	sub	r24, r18
    2f4e:	93 0b       	sbc	r25, r19
    2f50:	11 96       	adiw	r26, 0x01	; 1
    2f52:	9c 93       	st	X, r25
    2f54:	8e 93       	st	-X, r24
    2f56:	20 81       	ld	r18, Z
    2f58:	31 81       	ldd	r19, Z+1	; 0x01
    2f5a:	2d 93       	st	X+, r18
    2f5c:	3c 93       	st	X, r19
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	08 95       	ret

00002f68 <_ZN14TFT_22_ILI922512setBacklightEb>:
    2f68:	fc 01       	movw	r30, r24
    2f6a:	65 ab       	std	Z+53, r22	; 0x35
    2f6c:	83 85       	ldd	r24, Z+11	; 0x0b
    2f6e:	88 23       	and	r24, r24
    2f70:	49 f0       	breq	.+18     	; 0x2f84 <_ZN14TFT_22_ILI922512setBacklightEb+0x1c>
    2f72:	66 23       	and	r22, r22
    2f74:	19 f0       	breq	.+6      	; 0x2f7c <_ZN14TFT_22_ILI922512setBacklightEb+0x14>
    2f76:	63 8d       	ldd	r22, Z+27	; 0x1b
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <_ZN14TFT_22_ILI922512setBacklightEb+0x18>
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	0c 94 89 22 	jmp	0x4512	; 0x4512 <analogWrite>
    2f84:	08 95       	ret

00002f86 <_ZN14TFT_22_ILI922514setOrientationEh>:
    2f86:	fc 01       	movw	r30, r24
    2f88:	63 70       	andi	r22, 0x03	; 3
    2f8a:	62 8f       	std	Z+26, r22	; 0x1a
    2f8c:	62 30       	cpi	r22, 0x02	; 2
    2f8e:	21 f0       	breq	.+8      	; 0x2f98 <_ZN14TFT_22_ILI922514setOrientationEh+0x12>
    2f90:	63 30       	cpi	r22, 0x03	; 3
    2f92:	49 f0       	breq	.+18     	; 0x2fa6 <_ZN14TFT_22_ILI922514setOrientationEh+0x20>
    2f94:	61 30       	cpi	r22, 0x01	; 1
    2f96:	39 f0       	breq	.+14     	; 0x2fa6 <_ZN14TFT_22_ILI922514setOrientationEh+0x20>
    2f98:	80 eb       	ldi	r24, 0xB0	; 176
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
    2fa0:	8c ed       	ldi	r24, 0xDC	; 220
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	06 c0       	rjmp	.+12     	; 0x2fb2 <_ZN14TFT_22_ILI922514setOrientationEh+0x2c>
    2fa6:	8c ed       	ldi	r24, 0xDC	; 220
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
    2fae:	80 eb       	ldi	r24, 0xB0	; 176
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	93 83       	std	Z+3, r25	; 0x03
    2fb4:	82 83       	std	Z+2, r24	; 0x02
    2fb6:	08 95       	ret

00002fb8 <_ZN14TFT_22_ILI92254maxXEv>:
    2fb8:	fc 01       	movw	r30, r24
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	08 95       	ret

00002fc0 <_ZN14TFT_22_ILI92254maxYEv>:
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	08 95       	ret

00002fc8 <_ZN14TFT_22_ILI922515_writeCommand16Ej>:
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	fc 01       	movw	r30, r24
    2fce:	a0 89       	ldd	r26, Z+16	; 0x10
    2fd0:	b1 89       	ldd	r27, Z+17	; 0x11
    2fd2:	9c 91       	ld	r25, X
    2fd4:	81 8d       	ldd	r24, Z+25	; 0x19
    2fd6:	80 95       	com	r24
    2fd8:	89 23       	and	r24, r25
    2fda:	8c 93       	st	X, r24
    2fdc:	a4 89       	ldd	r26, Z+20	; 0x14
    2fde:	b5 89       	ldd	r27, Z+21	; 0x15
    2fe0:	9c 91       	ld	r25, X
    2fe2:	80 8d       	ldd	r24, Z+24	; 0x18
    2fe4:	80 95       	com	r24
    2fe6:	89 23       	and	r24, r25
    2fe8:	8c 93       	st	X, r24
    2fea:	82 85       	ldd	r24, Z+10	; 0x0a
    2fec:	87 ff       	sbrs	r24, 7
    2fee:	11 c0       	rjmp	.+34     	; 0x3012 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x4a>
    2ff0:	7e bd       	out	0x2e, r23	; 46
    2ff2:	0d b4       	in	r0, 0x2d	; 45
    2ff4:	07 fe       	sbrs	r0, 7
    2ff6:	fd cf       	rjmp	.-6      	; 0x2ff2 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x2a>
    2ff8:	6e bd       	out	0x2e, r22	; 46
    2ffa:	0d b4       	in	r0, 0x2d	; 45
    2ffc:	07 fe       	sbrs	r0, 7
    2ffe:	fd cf       	rjmp	.-6      	; 0x2ffa <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x32>
    3000:	a4 89       	ldd	r26, Z+20	; 0x14
    3002:	b5 89       	ldd	r27, Z+21	; 0x15
    3004:	9c 91       	ld	r25, X
    3006:	80 8d       	ldd	r24, Z+24	; 0x18
    3008:	89 2b       	or	r24, r25
    300a:	8c 93       	st	X, r24
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret
    3012:	20 e1       	ldi	r18, 0x10	; 16
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	50 e8       	ldi	r21, 0x80	; 128
    301a:	a4 85       	ldd	r26, Z+12	; 0x0c
    301c:	b5 85       	ldd	r27, Z+13	; 0x0d
    301e:	86 89       	ldd	r24, Z+22	; 0x16
    3020:	eb 01       	movw	r28, r22
    3022:	c4 23       	and	r28, r20
    3024:	d5 23       	and	r29, r21
    3026:	9c 91       	ld	r25, X
    3028:	cd 2b       	or	r28, r29
    302a:	11 f0       	breq	.+4      	; 0x3030 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x68>
    302c:	89 2b       	or	r24, r25
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x6c>
    3030:	80 95       	com	r24
    3032:	89 23       	and	r24, r25
    3034:	8c 93       	st	X, r24
    3036:	a6 85       	ldd	r26, Z+14	; 0x0e
    3038:	b7 85       	ldd	r27, Z+15	; 0x0f
    303a:	9c 91       	ld	r25, X
    303c:	87 89       	ldd	r24, Z+23	; 0x17
    303e:	89 2b       	or	r24, r25
    3040:	8c 93       	st	X, r24
    3042:	a6 85       	ldd	r26, Z+14	; 0x0e
    3044:	b7 85       	ldd	r27, Z+15	; 0x0f
    3046:	9c 91       	ld	r25, X
    3048:	87 89       	ldd	r24, Z+23	; 0x17
    304a:	80 95       	com	r24
    304c:	89 23       	and	r24, r25
    304e:	8c 93       	st	X, r24
    3050:	56 95       	lsr	r21
    3052:	47 95       	ror	r20
    3054:	21 50       	subi	r18, 0x01	; 1
    3056:	31 09       	sbc	r19, r1
    3058:	01 f7       	brne	.-64     	; 0x301a <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x52>
    305a:	d2 cf       	rjmp	.-92     	; 0x3000 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x38>

0000305c <_ZN14TFT_22_ILI922512_writeData16Ej>:
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	fc 01       	movw	r30, r24
    3062:	a0 89       	ldd	r26, Z+16	; 0x10
    3064:	b1 89       	ldd	r27, Z+17	; 0x11
    3066:	9c 91       	ld	r25, X
    3068:	81 8d       	ldd	r24, Z+25	; 0x19
    306a:	89 2b       	or	r24, r25
    306c:	8c 93       	st	X, r24
    306e:	a4 89       	ldd	r26, Z+20	; 0x14
    3070:	b5 89       	ldd	r27, Z+21	; 0x15
    3072:	9c 91       	ld	r25, X
    3074:	80 8d       	ldd	r24, Z+24	; 0x18
    3076:	80 95       	com	r24
    3078:	89 23       	and	r24, r25
    307a:	8c 93       	st	X, r24
    307c:	82 85       	ldd	r24, Z+10	; 0x0a
    307e:	87 ff       	sbrs	r24, 7
    3080:	11 c0       	rjmp	.+34     	; 0x30a4 <_ZN14TFT_22_ILI922512_writeData16Ej+0x48>
    3082:	7e bd       	out	0x2e, r23	; 46
    3084:	0d b4       	in	r0, 0x2d	; 45
    3086:	07 fe       	sbrs	r0, 7
    3088:	fd cf       	rjmp	.-6      	; 0x3084 <_ZN14TFT_22_ILI922512_writeData16Ej+0x28>
    308a:	6e bd       	out	0x2e, r22	; 46
    308c:	0d b4       	in	r0, 0x2d	; 45
    308e:	07 fe       	sbrs	r0, 7
    3090:	fd cf       	rjmp	.-6      	; 0x308c <_ZN14TFT_22_ILI922512_writeData16Ej+0x30>
    3092:	a4 89       	ldd	r26, Z+20	; 0x14
    3094:	b5 89       	ldd	r27, Z+21	; 0x15
    3096:	9c 91       	ld	r25, X
    3098:	80 8d       	ldd	r24, Z+24	; 0x18
    309a:	89 2b       	or	r24, r25
    309c:	8c 93       	st	X, r24
    309e:	df 91       	pop	r29
    30a0:	cf 91       	pop	r28
    30a2:	08 95       	ret
    30a4:	20 e1       	ldi	r18, 0x10	; 16
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e8       	ldi	r21, 0x80	; 128
    30ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    30ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    30b0:	86 89       	ldd	r24, Z+22	; 0x16
    30b2:	eb 01       	movw	r28, r22
    30b4:	c4 23       	and	r28, r20
    30b6:	d5 23       	and	r29, r21
    30b8:	9c 91       	ld	r25, X
    30ba:	cd 2b       	or	r28, r29
    30bc:	11 f0       	breq	.+4      	; 0x30c2 <_ZN14TFT_22_ILI922512_writeData16Ej+0x66>
    30be:	89 2b       	or	r24, r25
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <_ZN14TFT_22_ILI922512_writeData16Ej+0x6a>
    30c2:	80 95       	com	r24
    30c4:	89 23       	and	r24, r25
    30c6:	8c 93       	st	X, r24
    30c8:	a6 85       	ldd	r26, Z+14	; 0x0e
    30ca:	b7 85       	ldd	r27, Z+15	; 0x0f
    30cc:	9c 91       	ld	r25, X
    30ce:	87 89       	ldd	r24, Z+23	; 0x17
    30d0:	89 2b       	or	r24, r25
    30d2:	8c 93       	st	X, r24
    30d4:	a6 85       	ldd	r26, Z+14	; 0x0e
    30d6:	b7 85       	ldd	r27, Z+15	; 0x0f
    30d8:	9c 91       	ld	r25, X
    30da:	87 89       	ldd	r24, Z+23	; 0x17
    30dc:	80 95       	com	r24
    30de:	89 23       	and	r24, r25
    30e0:	8c 93       	st	X, r24
    30e2:	56 95       	lsr	r21
    30e4:	47 95       	ror	r20
    30e6:	21 50       	subi	r18, 0x01	; 1
    30e8:	31 09       	sbc	r19, r1
    30ea:	01 f7       	brne	.-64     	; 0x30ac <_ZN14TFT_22_ILI922512_writeData16Ej+0x50>
    30ec:	d2 cf       	rjmp	.-92     	; 0x3092 <_ZN14TFT_22_ILI922512_writeData16Ej+0x36>

000030ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>:
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	ec 01       	movw	r28, r24
    30f8:	8a 01       	movw	r16, r20
    30fa:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN14TFT_22_ILI922515_writeCommand16Ej>
    30fe:	b8 01       	movw	r22, r16
    3100:	ce 01       	movw	r24, r28
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <_ZN14TFT_22_ILI922512_writeData16Ej>

0000310e <_ZN14TFT_22_ILI922512_resetWindowEv>:
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	ec 01       	movw	r28, r24
    3114:	4f ea       	ldi	r20, 0xAF	; 175
    3116:	50 e0       	ldi	r21, 0x00	; 0
    3118:	66 e3       	ldi	r22, 0x36	; 54
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	67 e3       	ldi	r22, 0x37	; 55
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	ce 01       	movw	r24, r28
    312a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    312e:	4b ed       	ldi	r20, 0xDB	; 219
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	68 e3       	ldi	r22, 0x38	; 56
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	ce 01       	movw	r24, r28
    3138:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    313c:	40 e0       	ldi	r20, 0x00	; 0
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	69 e3       	ldi	r22, 0x39	; 57
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	ce 01       	movw	r24, r28
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>

0000314e <_ZN14TFT_22_ILI922510startWriteEv>:
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	fc 01       	movw	r30, r24
    3154:	ec 01       	movw	r28, r24
    3156:	ee 96       	adiw	r28, 0x3e	; 62
    3158:	88 81       	ld	r24, Y
    315a:	99 81       	ldd	r25, Y+1	; 0x01
    315c:	aa 81       	ldd	r26, Y+2	; 0x02
    315e:	bb 81       	ldd	r27, Y+3	; 0x03
    3160:	ac 01       	movw	r20, r24
    3162:	bd 01       	movw	r22, r26
    3164:	4f 5f       	subi	r20, 0xFF	; 255
    3166:	5f 4f       	sbci	r21, 0xFF	; 255
    3168:	6f 4f       	sbci	r22, 0xFF	; 255
    316a:	7f 4f       	sbci	r23, 0xFF	; 255
    316c:	48 83       	st	Y, r20
    316e:	59 83       	std	Y+1, r21	; 0x01
    3170:	6a 83       	std	Y+2, r22	; 0x02
    3172:	7b 83       	std	Y+3, r23	; 0x03
    3174:	89 2b       	or	r24, r25
    3176:	8a 2b       	or	r24, r26
    3178:	8b 2b       	or	r24, r27
    317a:	29 f5       	brne	.+74     	; 0x31c6 <_ZN14TFT_22_ILI922510startWriteEv+0x78>
    317c:	82 85       	ldd	r24, Z+10	; 0x0a
    317e:	87 ff       	sbrs	r24, 7
    3180:	1b c0       	rjmp	.+54     	; 0x31b8 <_ZN14TFT_22_ILI922510startWriteEv+0x6a>
    3182:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN8SPIClass13interruptModeE>
    3186:	88 23       	and	r24, r24
    3188:	99 f0       	breq	.+38     	; 0x31b0 <_ZN14TFT_22_ILI922510startWriteEv+0x62>
    318a:	2f b7       	in	r18, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN8SPIClass13interruptModeE>
    3192:	81 30       	cpi	r24, 0x01	; 1
    3194:	59 f4       	brne	.+22     	; 0x31ac <_ZN14TFT_22_ILI922510startWriteEv+0x5e>
    3196:	8d b3       	in	r24, 0x1d	; 29
    3198:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZN8SPIClass13interruptSaveE>
    319c:	9d b3       	in	r25, 0x1d	; 29
    319e:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN8SPIClass13interruptMaskE>
    31a2:	80 95       	com	r24
    31a4:	89 23       	and	r24, r25
    31a6:	8d bb       	out	0x1d, r24	; 29
    31a8:	2f bf       	out	0x3f, r18	; 63
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <_ZN14TFT_22_ILI922510startWriteEv+0x62>
    31ac:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <_ZN8SPIClass13interruptSaveE>
    31b0:	80 e5       	ldi	r24, 0x50	; 80
    31b2:	8c bd       	out	0x2c, r24	; 44
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	8d bd       	out	0x2d, r24	; 45
    31b8:	a4 89       	ldd	r26, Z+20	; 0x14
    31ba:	b5 89       	ldd	r27, Z+21	; 0x15
    31bc:	9c 91       	ld	r25, X
    31be:	80 8d       	ldd	r24, Z+24	; 0x18
    31c0:	80 95       	com	r24
    31c2:	89 23       	and	r24, r25
    31c4:	8c 93       	st	X, r24
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	08 95       	ret

000031cc <_ZN14TFT_22_ILI92258endWriteEv>:
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	fc 01       	movw	r30, r24
    31d2:	ec 01       	movw	r28, r24
    31d4:	ee 96       	adiw	r28, 0x3e	; 62
    31d6:	88 81       	ld	r24, Y
    31d8:	99 81       	ldd	r25, Y+1	; 0x01
    31da:	aa 81       	ldd	r26, Y+2	; 0x02
    31dc:	bb 81       	ldd	r27, Y+3	; 0x03
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	a1 09       	sbc	r26, r1
    31e2:	b1 09       	sbc	r27, r1
    31e4:	88 83       	st	Y, r24
    31e6:	99 83       	std	Y+1, r25	; 0x01
    31e8:	aa 83       	std	Y+2, r26	; 0x02
    31ea:	bb 83       	std	Y+3, r27	; 0x03
    31ec:	89 2b       	or	r24, r25
    31ee:	8a 2b       	or	r24, r26
    31f0:	8b 2b       	or	r24, r27
    31f2:	c9 f4       	brne	.+50     	; 0x3226 <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    31f4:	a4 89       	ldd	r26, Z+20	; 0x14
    31f6:	b5 89       	ldd	r27, Z+21	; 0x15
    31f8:	9c 91       	ld	r25, X
    31fa:	80 8d       	ldd	r24, Z+24	; 0x18
    31fc:	89 2b       	or	r24, r25
    31fe:	8c 93       	st	X, r24
    3200:	82 85       	ldd	r24, Z+10	; 0x0a
    3202:	87 ff       	sbrs	r24, 7
    3204:	10 c0       	rjmp	.+32     	; 0x3226 <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    3206:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN8SPIClass13interruptModeE>
    320a:	88 23       	and	r24, r24
    320c:	61 f0       	breq	.+24     	; 0x3226 <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    320e:	9f b7       	in	r25, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	20 91 4c 04 	lds	r18, 0x044C	; 0x80044c <_ZN8SPIClass13interruptModeE>
    3216:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZN8SPIClass13interruptSaveE>
    321a:	21 30       	cpi	r18, 0x01	; 1
    321c:	19 f4       	brne	.+6      	; 0x3224 <_ZN14TFT_22_ILI92258endWriteEv+0x58>
    321e:	8d bb       	out	0x1d, r24	; 29
    3220:	9f bf       	out	0x3f, r25	; 63
    3222:	01 c0       	rjmp	.+2      	; 0x3226 <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    3224:	8f bf       	out	0x3f, r24	; 63
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	08 95       	ret

0000322c <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t>:
    322c:	af 92       	push	r10
    322e:	bf 92       	push	r11
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	c4 54       	subi	r28, 0x44	; 68
    3244:	d1 09       	sbc	r29, r1
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	6c 01       	movw	r12, r24
    3252:	7e af       	std	Y+62, r23	; 0x3e
    3254:	6d af       	std	Y+61, r22	; 0x3d
    3256:	21 96       	adiw	r28, 0x01	; 1
    3258:	5f af       	std	Y+63, r21	; 0x3f
    325a:	4e af       	std	Y+62, r20	; 0x3e
    325c:	21 97       	sbiw	r28, 0x01	; 1
    325e:	23 96       	adiw	r28, 0x03	; 3
    3260:	3f af       	std	Y+63, r19	; 0x3f
    3262:	2e af       	std	Y+62, r18	; 0x3e
    3264:	23 97       	sbiw	r28, 0x03	; 3
    3266:	25 96       	adiw	r28, 0x05	; 5
    3268:	1f af       	std	Y+63, r17	; 0x3f
    326a:	0e af       	std	Y+62, r16	; 0x3e
    326c:	25 97       	sbiw	r28, 0x05	; 5
    326e:	0e 2d       	mov	r16, r14
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	1f 92       	push	r1
    3274:	ef 92       	push	r14
    3276:	25 96       	adiw	r28, 0x05	; 5
    3278:	8f ad       	ldd	r24, Y+63	; 0x3f
    327a:	25 97       	sbiw	r28, 0x05	; 5
    327c:	8f 93       	push	r24
    327e:	24 96       	adiw	r28, 0x04	; 4
    3280:	8f ad       	ldd	r24, Y+63	; 0x3f
    3282:	24 97       	sbiw	r28, 0x04	; 4
    3284:	8f 93       	push	r24
    3286:	23 96       	adiw	r28, 0x03	; 3
    3288:	8f ad       	ldd	r24, Y+63	; 0x3f
    328a:	23 97       	sbiw	r28, 0x03	; 3
    328c:	8f 93       	push	r24
    328e:	22 96       	adiw	r28, 0x02	; 2
    3290:	8f ad       	ldd	r24, Y+63	; 0x3f
    3292:	22 97       	sbiw	r28, 0x02	; 2
    3294:	8f 93       	push	r24
    3296:	21 96       	adiw	r28, 0x01	; 1
    3298:	8f ad       	ldd	r24, Y+63	; 0x3f
    329a:	21 97       	sbiw	r28, 0x01	; 1
    329c:	8f 93       	push	r24
    329e:	8f ad       	ldd	r24, Y+63	; 0x3f
    32a0:	8f 93       	push	r24
    32a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    32a4:	8f 93       	push	r24
    32a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    32a8:	8f 93       	push	r24
    32aa:	8b e8       	ldi	r24, 0x8B	; 139
    32ac:	91 e0       	ldi	r25, 0x01	; 1
    32ae:	9f 93       	push	r25
    32b0:	8f 93       	push	r24
    32b2:	9e 01       	movw	r18, r28
    32b4:	2f 5f       	subi	r18, 0xFF	; 255
    32b6:	3f 4f       	sbci	r19, 0xFF	; 255
    32b8:	59 01       	movw	r10, r18
    32ba:	3f 93       	push	r19
    32bc:	2f 93       	push	r18
    32be:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <sprintf>
    32c2:	b5 01       	movw	r22, r10
    32c4:	8e e4       	ldi	r24, 0x4E	; 78
    32c6:	93 e0       	ldi	r25, 0x03	; 3
    32c8:	0e 94 4b 11 	call	0x2296	; 0x2296 <_ZN5Print7printlnEPKc>
    32cc:	f6 01       	movw	r30, r12
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	2d ad       	ldd	r18, Y+61	; 0x3d
    32d6:	3e ad       	ldd	r19, Y+62	; 0x3e
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	82 17       	cp	r24, r18
    32e4:	93 07       	cpc	r25, r19
    32e6:	08 f4       	brcc	.+2      	; 0x32ea <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0xbe>
    32e8:	9c 01       	movw	r18, r24
    32ea:	3e af       	std	Y+62, r19	; 0x3e
    32ec:	2d af       	std	Y+61, r18	; 0x3d
    32ee:	23 96       	adiw	r28, 0x03	; 3
    32f0:	2e ad       	ldd	r18, Y+62	; 0x3e
    32f2:	3f ad       	ldd	r19, Y+63	; 0x3f
    32f4:	23 97       	sbiw	r28, 0x03	; 3
    32f6:	82 17       	cp	r24, r18
    32f8:	93 07       	cpc	r25, r19
    32fa:	08 f4       	brcc	.+2      	; 0x32fe <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0xd2>
    32fc:	9c 01       	movw	r18, r24
    32fe:	23 96       	adiw	r28, 0x03	; 3
    3300:	3f af       	std	Y+63, r19	; 0x3f
    3302:	2e af       	std	Y+62, r18	; 0x3e
    3304:	23 97       	sbiw	r28, 0x03	; 3
    3306:	f6 01       	movw	r30, r12
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	21 96       	adiw	r28, 0x01	; 1
    3310:	2e ad       	ldd	r18, Y+62	; 0x3e
    3312:	3f ad       	ldd	r19, Y+63	; 0x3f
    3314:	21 97       	sbiw	r28, 0x01	; 1
    3316:	82 17       	cp	r24, r18
    3318:	93 07       	cpc	r25, r19
    331a:	08 f4       	brcc	.+2      	; 0x331e <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0xf2>
    331c:	9c 01       	movw	r18, r24
    331e:	21 96       	adiw	r28, 0x01	; 1
    3320:	3f af       	std	Y+63, r19	; 0x3f
    3322:	2e af       	std	Y+62, r18	; 0x3e
    3324:	21 97       	sbiw	r28, 0x01	; 1
    3326:	25 96       	adiw	r28, 0x05	; 5
    3328:	2e ad       	ldd	r18, Y+62	; 0x3e
    332a:	3f ad       	ldd	r19, Y+63	; 0x3f
    332c:	25 97       	sbiw	r28, 0x05	; 5
    332e:	82 17       	cp	r24, r18
    3330:	93 07       	cpc	r25, r19
    3332:	08 f4       	brcc	.+2      	; 0x3336 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x10a>
    3334:	9c 01       	movw	r18, r24
    3336:	25 96       	adiw	r28, 0x05	; 5
    3338:	3f af       	std	Y+63, r19	; 0x3f
    333a:	2e af       	std	Y+62, r18	; 0x3e
    333c:	25 97       	sbiw	r28, 0x05	; 5
    333e:	ae 01       	movw	r20, r28
    3340:	41 5c       	subi	r20, 0xC1	; 193
    3342:	5f 4f       	sbci	r21, 0xFF	; 255
    3344:	be 01       	movw	r22, r28
    3346:	63 5c       	subi	r22, 0xC3	; 195
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	c6 01       	movw	r24, r12
    334c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>
    3350:	ae 01       	movw	r20, r28
    3352:	4d 5b       	subi	r20, 0xBD	; 189
    3354:	5f 4f       	sbci	r21, 0xFF	; 255
    3356:	be 01       	movw	r22, r28
    3358:	6f 5b       	subi	r22, 0xBF	; 191
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	c6 01       	movw	r24, r12
    335e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>
    3362:	23 96       	adiw	r28, 0x03	; 3
    3364:	2e ad       	ldd	r18, Y+62	; 0x3e
    3366:	3f ad       	ldd	r19, Y+63	; 0x3f
    3368:	23 97       	sbiw	r28, 0x03	; 3
    336a:	8d ad       	ldd	r24, Y+61	; 0x3d
    336c:	9e ad       	ldd	r25, Y+62	; 0x3e
    336e:	28 17       	cp	r18, r24
    3370:	39 07       	cpc	r19, r25
    3372:	30 f4       	brcc	.+12     	; 0x3380 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x154>
    3374:	3e af       	std	Y+62, r19	; 0x3e
    3376:	2d af       	std	Y+61, r18	; 0x3d
    3378:	23 96       	adiw	r28, 0x03	; 3
    337a:	9f af       	std	Y+63, r25	; 0x3f
    337c:	8e af       	std	Y+62, r24	; 0x3e
    337e:	23 97       	sbiw	r28, 0x03	; 3
    3380:	25 96       	adiw	r28, 0x05	; 5
    3382:	2e ad       	ldd	r18, Y+62	; 0x3e
    3384:	3f ad       	ldd	r19, Y+63	; 0x3f
    3386:	25 97       	sbiw	r28, 0x05	; 5
    3388:	21 96       	adiw	r28, 0x01	; 1
    338a:	8e ad       	ldd	r24, Y+62	; 0x3e
    338c:	9f ad       	ldd	r25, Y+63	; 0x3f
    338e:	21 97       	sbiw	r28, 0x01	; 1
    3390:	28 17       	cp	r18, r24
    3392:	39 07       	cpc	r19, r25
    3394:	40 f4       	brcc	.+16     	; 0x33a6 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x17a>
    3396:	21 96       	adiw	r28, 0x01	; 1
    3398:	3f af       	std	Y+63, r19	; 0x3f
    339a:	2e af       	std	Y+62, r18	; 0x3e
    339c:	21 97       	sbiw	r28, 0x01	; 1
    339e:	25 96       	adiw	r28, 0x05	; 5
    33a0:	9f af       	std	Y+63, r25	; 0x3f
    33a2:	8e af       	std	Y+62, r24	; 0x3e
    33a4:	25 97       	sbiw	r28, 0x05	; 5
    33a6:	c6 01       	movw	r24, r12
    33a8:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    33ac:	f6 01       	movw	r30, r12
    33ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b0:	88 23       	and	r24, r24
    33b2:	51 f0       	breq	.+20     	; 0x33c8 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x19c>
    33b4:	96 01       	movw	r18, r12
    33b6:	48 e0       	ldi	r20, 0x08	; 8
    33b8:	84 9f       	mul	r24, r20
    33ba:	20 0d       	add	r18, r0
    33bc:	31 1d       	adc	r19, r1
    33be:	11 24       	eor	r1, r1
    33c0:	f8 01       	movw	r30, r16
    33c2:	e2 0f       	add	r30, r18
    33c4:	f3 1f       	adc	r31, r19
    33c6:	e4 88       	ldd	r14, Z+20	; 0x14
    33c8:	0e 2d       	mov	r16, r14
    33ca:	10 e0       	ldi	r17, 0x00	; 0
    33cc:	a8 01       	movw	r20, r16
    33ce:	83 e0       	ldi	r24, 0x03	; 3
    33d0:	44 0f       	add	r20, r20
    33d2:	55 1f       	adc	r21, r21
    33d4:	8a 95       	dec	r24
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x1a4>
    33d8:	50 61       	ori	r21, 0x10	; 16
    33da:	63 e0       	ldi	r22, 0x03	; 3
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	c6 01       	movw	r24, r12
    33e0:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    33e4:	23 96       	adiw	r28, 0x03	; 3
    33e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    33e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    33ea:	23 97       	sbiw	r28, 0x03	; 3
    33ec:	66 e3       	ldi	r22, 0x36	; 54
    33ee:	70 e0       	ldi	r23, 0x00	; 0
    33f0:	c6 01       	movw	r24, r12
    33f2:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    33f6:	4d ad       	ldd	r20, Y+61	; 0x3d
    33f8:	5e ad       	ldd	r21, Y+62	; 0x3e
    33fa:	67 e3       	ldi	r22, 0x37	; 55
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	c6 01       	movw	r24, r12
    3400:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3404:	25 96       	adiw	r28, 0x05	; 5
    3406:	4e ad       	ldd	r20, Y+62	; 0x3e
    3408:	5f ad       	ldd	r21, Y+63	; 0x3f
    340a:	25 97       	sbiw	r28, 0x05	; 5
    340c:	68 e3       	ldi	r22, 0x38	; 56
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	c6 01       	movw	r24, r12
    3412:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3416:	21 96       	adiw	r28, 0x01	; 1
    3418:	4e ad       	ldd	r20, Y+62	; 0x3e
    341a:	5f ad       	ldd	r21, Y+63	; 0x3f
    341c:	21 97       	sbiw	r28, 0x01	; 1
    341e:	69 e3       	ldi	r22, 0x39	; 57
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	c6 01       	movw	r24, r12
    3424:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3428:	1f 92       	push	r1
    342a:	ef 92       	push	r14
    342c:	25 96       	adiw	r28, 0x05	; 5
    342e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3430:	25 97       	sbiw	r28, 0x05	; 5
    3432:	8f 93       	push	r24
    3434:	24 96       	adiw	r28, 0x04	; 4
    3436:	8f ad       	ldd	r24, Y+63	; 0x3f
    3438:	24 97       	sbiw	r28, 0x04	; 4
    343a:	8f 93       	push	r24
    343c:	23 96       	adiw	r28, 0x03	; 3
    343e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3440:	23 97       	sbiw	r28, 0x03	; 3
    3442:	8f 93       	push	r24
    3444:	22 96       	adiw	r28, 0x02	; 2
    3446:	8f ad       	ldd	r24, Y+63	; 0x3f
    3448:	22 97       	sbiw	r28, 0x02	; 2
    344a:	8f 93       	push	r24
    344c:	21 96       	adiw	r28, 0x01	; 1
    344e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3450:	21 97       	sbiw	r28, 0x01	; 1
    3452:	8f 93       	push	r24
    3454:	8f ad       	ldd	r24, Y+63	; 0x3f
    3456:	8f 93       	push	r24
    3458:	8e ad       	ldd	r24, Y+62	; 0x3e
    345a:	8f 93       	push	r24
    345c:	8d ad       	ldd	r24, Y+61	; 0x3d
    345e:	8f 93       	push	r24
    3460:	8b eb       	ldi	r24, 0xBB	; 187
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	9f 93       	push	r25
    3466:	8f 93       	push	r24
    3468:	bf 92       	push	r11
    346a:	af 92       	push	r10
    346c:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <sprintf>
    3470:	b5 01       	movw	r22, r10
    3472:	8e e4       	ldi	r24, 0x4E	; 78
    3474:	93 e0       	ldi	r25, 0x03	; 3
    3476:	0e 94 4b 11 	call	0x2296	; 0x2296 <_ZN5Print7printlnEPKc>
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	c8 01       	movw	r24, r16
    3486:	95 95       	asr	r25
    3488:	87 95       	ror	r24
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	91 05       	cpc	r25, r1
    348e:	81 f0       	breq	.+32     	; 0x34b0 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x284>
    3490:	3c f4       	brge	.+14     	; 0x34a0 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x274>
    3492:	89 2b       	or	r24, r25
    3494:	59 f5       	brne	.+86     	; 0x34ec <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2c0>
    3496:	23 96       	adiw	r28, 0x03	; 3
    3498:	4e ad       	ldd	r20, Y+62	; 0x3e
    349a:	5f ad       	ldd	r21, Y+63	; 0x3f
    349c:	23 97       	sbiw	r28, 0x03	; 3
    349e:	0a c0       	rjmp	.+20     	; 0x34b4 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x288>
    34a0:	82 30       	cpi	r24, 0x02	; 2
    34a2:	91 05       	cpc	r25, r1
    34a4:	89 f0       	breq	.+34     	; 0x34c8 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x29c>
    34a6:	03 97       	sbiw	r24, 0x03	; 3
    34a8:	09 f5       	brne	.+66     	; 0x34ec <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2c0>
    34aa:	4d ad       	ldd	r20, Y+61	; 0x3d
    34ac:	5e ad       	ldd	r21, Y+62	; 0x3e
    34ae:	10 c0       	rjmp	.+32     	; 0x34d0 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2a4>
    34b0:	4d ad       	ldd	r20, Y+61	; 0x3d
    34b2:	5e ad       	ldd	r21, Y+62	; 0x3e
    34b4:	60 e2       	ldi	r22, 0x20	; 32
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	c6 01       	movw	r24, r12
    34ba:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    34be:	25 96       	adiw	r28, 0x05	; 5
    34c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    34c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    34c4:	25 97       	sbiw	r28, 0x05	; 5
    34c6:	0d c0       	rjmp	.+26     	; 0x34e2 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2b6>
    34c8:	23 96       	adiw	r28, 0x03	; 3
    34ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    34cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    34ce:	23 97       	sbiw	r28, 0x03	; 3
    34d0:	60 e2       	ldi	r22, 0x20	; 32
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	c6 01       	movw	r24, r12
    34d6:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    34da:	21 96       	adiw	r28, 0x01	; 1
    34dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    34de:	5f ad       	ldd	r21, Y+63	; 0x3f
    34e0:	21 97       	sbiw	r28, 0x01	; 1
    34e2:	61 e2       	ldi	r22, 0x21	; 33
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	c6 01       	movw	r24, r12
    34e8:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    34ec:	62 e2       	ldi	r22, 0x22	; 34
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	c6 01       	movw	r24, r12
    34f2:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN14TFT_22_ILI922515_writeCommand16Ej>
    34f6:	c6 01       	movw	r24, r12
    34f8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    34fc:	cc 5b       	subi	r28, 0xBC	; 188
    34fe:	df 4f       	sbci	r29, 0xFF	; 255
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	ef 90       	pop	r14
    3514:	df 90       	pop	r13
    3516:	cf 90       	pop	r12
    3518:	bf 90       	pop	r11
    351a:	af 90       	pop	r10
    351c:	08 95       	ret

0000351e <_ZN14TFT_22_ILI922510_setWindowEjjjj>:
    351e:	ef 92       	push	r14
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	e7 e0       	ldi	r30, 0x07	; 7
    3526:	ee 2e       	mov	r14, r30
    3528:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t>
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	ef 90       	pop	r14
    3532:	08 95       	ret

00003534 <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>:
    3534:	6f 92       	push	r6
    3536:	7f 92       	push	r7
    3538:	8f 92       	push	r8
    353a:	9f 92       	push	r9
    353c:	af 92       	push	r10
    353e:	bf 92       	push	r11
    3540:	cf 92       	push	r12
    3542:	df 92       	push	r13
    3544:	ef 92       	push	r14
    3546:	ff 92       	push	r15
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	5c 01       	movw	r10, r24
    3552:	4b 01       	movw	r8, r22
    3554:	3a 01       	movw	r6, r20
    3556:	e9 01       	movw	r28, r18
    3558:	68 01       	movw	r12, r16
    355a:	0e 94 8f 1a 	call	0x351e	; 0x351e <_ZN14TFT_22_ILI922510_setWindowEjjjj>
    355e:	c5 01       	movw	r24, r10
    3560:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3564:	8f ef       	ldi	r24, 0xFF	; 255
    3566:	c8 1a       	sub	r12, r24
    3568:	d8 0a       	sbc	r13, r24
    356a:	c6 18       	sub	r12, r6
    356c:	d7 08       	sbc	r13, r7
    356e:	21 96       	adiw	r28, 0x01	; 1
    3570:	c8 19       	sub	r28, r8
    3572:	d9 09       	sbc	r29, r9
    3574:	cc 9e       	mul	r12, r28
    3576:	40 01       	movw	r8, r0
    3578:	cd 9e       	mul	r12, r29
    357a:	90 0c       	add	r9, r0
    357c:	dc 9e       	mul	r13, r28
    357e:	90 0c       	add	r9, r0
    3580:	11 24       	eor	r1, r1
    3582:	81 14       	cp	r8, r1
    3584:	91 04       	cpc	r9, r1
    3586:	41 f0       	breq	.+16     	; 0x3598 <_ZN14TFT_22_ILI922513fillRectangleEjjjjj+0x64>
    3588:	b7 01       	movw	r22, r14
    358a:	c5 01       	movw	r24, r10
    358c:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN14TFT_22_ILI922512_writeData16Ej>
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	88 1a       	sub	r8, r24
    3594:	91 08       	sbc	r9, r1
    3596:	f5 cf       	rjmp	.-22     	; 0x3582 <_ZN14TFT_22_ILI922513fillRectangleEjjjjj+0x4e>
    3598:	c5 01       	movw	r24, r10
    359a:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    359e:	c5 01       	movw	r24, r10
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	df 90       	pop	r13
    35ae:	cf 90       	pop	r12
    35b0:	bf 90       	pop	r11
    35b2:	af 90       	pop	r10
    35b4:	9f 90       	pop	r9
    35b6:	8f 90       	pop	r8
    35b8:	7f 90       	pop	r7
    35ba:	6f 90       	pop	r6
    35bc:	0c 94 87 18 	jmp	0x310e	; 0x310e <_ZN14TFT_22_ILI922512_resetWindowEv>

000035c0 <_ZN14TFT_22_ILI92255clearEv>:
    35c0:	df 92       	push	r13
    35c2:	ef 92       	push	r14
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	ec 01       	movw	r28, r24
    35d0:	da 8c       	ldd	r13, Y+26	; 0x1a
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN14TFT_22_ILI922514setOrientationEh>
    35d8:	0a 81       	ldd	r16, Y+2	; 0x02
    35da:	1b 81       	ldd	r17, Y+3	; 0x03
    35dc:	01 50       	subi	r16, 0x01	; 1
    35de:	11 09       	sbc	r17, r1
    35e0:	28 81       	ld	r18, Y
    35e2:	39 81       	ldd	r19, Y+1	; 0x01
    35e4:	21 50       	subi	r18, 0x01	; 1
    35e6:	31 09       	sbc	r19, r1
    35e8:	e1 2c       	mov	r14, r1
    35ea:	f1 2c       	mov	r15, r1
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	70 e0       	ldi	r23, 0x00	; 0
    35f4:	ce 01       	movw	r24, r28
    35f6:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>
    35fa:	6d 2d       	mov	r22, r13
    35fc:	ce 01       	movw	r24, r28
    35fe:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN14TFT_22_ILI922514setOrientationEh>
    3602:	6a e0       	ldi	r22, 0x0A	; 10
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	ff 90       	pop	r15
    3614:	ef 90       	pop	r14
    3616:	df 90       	pop	r13
    3618:	0c 94 05 13 	jmp	0x260a	; 0x260a <delay>

0000361c <_ZN14TFT_22_ILI92255beginEv>:
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	ec 01       	movw	r28, r24
    3622:	8e 81       	ldd	r24, Y+6	; 0x06
    3624:	18 16       	cp	r1, r24
    3626:	3c f4       	brge	.+14     	; 0x3636 <_ZN14TFT_22_ILI92255beginEv+0x1a>
    3628:	61 e0       	ldi	r22, 0x01	; 1
    362a:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	8e 81       	ldd	r24, Y+6	; 0x06
    3632:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    3636:	8b 85       	ldd	r24, Y+11	; 0x0b
    3638:	18 16       	cp	r1, r24
    363a:	3c f4       	brge	.+14     	; 0x364a <_ZN14TFT_22_ILI92255beginEv+0x2e>
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	ce 01       	movw	r24, r28
    3646:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <_ZN14TFT_22_ILI922512setBacklightEb>
    364a:	61 e0       	ldi	r22, 0x01	; 1
    364c:	8f 81       	ldd	r24, Y+7	; 0x07
    364e:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	8f 81       	ldd	r24, Y+7	; 0x07
    3656:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    365a:	61 e0       	ldi	r22, 0x01	; 1
    365c:	88 85       	ldd	r24, Y+8	; 0x08
    365e:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    3662:	61 e0       	ldi	r22, 0x01	; 1
    3664:	88 85       	ldd	r24, Y+8	; 0x08
    3666:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    366a:	88 85       	ldd	r24, Y+8	; 0x08
    366c:	08 2e       	mov	r0, r24
    366e:	00 0c       	add	r0, r0
    3670:	99 0b       	sbc	r25, r25
    3672:	fc 01       	movw	r30, r24
    3674:	e6 5e       	subi	r30, 0xE6	; 230
    3676:	fb 4e       	sbci	r31, 0xEB	; 235
    3678:	e4 91       	lpm	r30, Z
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	ee 0f       	add	r30, r30
    367e:	ff 1f       	adc	r31, r31
    3680:	e2 5d       	subi	r30, 0xD2	; 210
    3682:	fb 4e       	sbci	r31, 0xEB	; 235
    3684:	25 91       	lpm	r18, Z+
    3686:	34 91       	lpm	r19, Z
    3688:	3d 8b       	std	Y+21, r19	; 0x15
    368a:	2c 8b       	std	Y+20, r18	; 0x14
    368c:	fc 01       	movw	r30, r24
    368e:	ea 5f       	subi	r30, 0xFA	; 250
    3690:	fb 4e       	sbci	r31, 0xEB	; 235
    3692:	e4 91       	lpm	r30, Z
    3694:	e8 8f       	std	Y+24, r30	; 0x18
    3696:	8f 81       	ldd	r24, Y+7	; 0x07
    3698:	08 2e       	mov	r0, r24
    369a:	00 0c       	add	r0, r0
    369c:	99 0b       	sbc	r25, r25
    369e:	fc 01       	movw	r30, r24
    36a0:	e6 5e       	subi	r30, 0xE6	; 230
    36a2:	fb 4e       	sbci	r31, 0xEB	; 235
    36a4:	e4 91       	lpm	r30, Z
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	ee 0f       	add	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	e2 5d       	subi	r30, 0xD2	; 210
    36ae:	fb 4e       	sbci	r31, 0xEB	; 235
    36b0:	25 91       	lpm	r18, Z+
    36b2:	34 91       	lpm	r19, Z
    36b4:	39 8b       	std	Y+17, r19	; 0x11
    36b6:	28 8b       	std	Y+16, r18	; 0x10
    36b8:	fc 01       	movw	r30, r24
    36ba:	ea 5f       	subi	r30, 0xFA	; 250
    36bc:	fb 4e       	sbci	r31, 0xEB	; 235
    36be:	e4 91       	lpm	r30, Z
    36c0:	e9 8f       	std	Y+25, r30	; 0x19
    36c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    36c4:	87 fd       	sbrc	r24, 7
    36c6:	49 c0       	rjmp	.+146    	; 0x375a <_ZN14TFT_22_ILI92255beginEv+0x13e>
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	89 85       	ldd	r24, Y+9	; 0x09
    36cc:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	89 85       	ldd	r24, Y+9	; 0x09
    36d4:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	8a 85       	ldd	r24, Y+10	; 0x0a
    36dc:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e4:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    36e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    36ea:	08 2e       	mov	r0, r24
    36ec:	00 0c       	add	r0, r0
    36ee:	99 0b       	sbc	r25, r25
    36f0:	fc 01       	movw	r30, r24
    36f2:	e6 5e       	subi	r30, 0xE6	; 230
    36f4:	fb 4e       	sbci	r31, 0xEB	; 235
    36f6:	e4 91       	lpm	r30, Z
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	ee 0f       	add	r30, r30
    36fc:	ff 1f       	adc	r31, r31
    36fe:	e2 5d       	subi	r30, 0xD2	; 210
    3700:	fb 4e       	sbci	r31, 0xEB	; 235
    3702:	a5 91       	lpm	r26, Z+
    3704:	b4 91       	lpm	r27, Z
    3706:	bf 87       	std	Y+15, r27	; 0x0f
    3708:	ae 87       	std	Y+14, r26	; 0x0e
    370a:	fc 01       	movw	r30, r24
    370c:	ea 5f       	subi	r30, 0xFA	; 250
    370e:	fb 4e       	sbci	r31, 0xEB	; 235
    3710:	84 91       	lpm	r24, Z
    3712:	8f 8b       	std	Y+23, r24	; 0x17
    3714:	29 85       	ldd	r18, Y+9	; 0x09
    3716:	02 2e       	mov	r0, r18
    3718:	00 0c       	add	r0, r0
    371a:	33 0b       	sbc	r19, r19
    371c:	f9 01       	movw	r30, r18
    371e:	e6 5e       	subi	r30, 0xE6	; 230
    3720:	fb 4e       	sbci	r31, 0xEB	; 235
    3722:	e4 91       	lpm	r30, Z
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	ee 0f       	add	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	e2 5d       	subi	r30, 0xD2	; 210
    372c:	fb 4e       	sbci	r31, 0xEB	; 235
    372e:	45 91       	lpm	r20, Z+
    3730:	54 91       	lpm	r21, Z
    3732:	5d 87       	std	Y+13, r21	; 0x0d
    3734:	4c 87       	std	Y+12, r20	; 0x0c
    3736:	f9 01       	movw	r30, r18
    3738:	ea 5f       	subi	r30, 0xFA	; 250
    373a:	fb 4e       	sbci	r31, 0xEB	; 235
    373c:	e4 91       	lpm	r30, Z
    373e:	ee 8b       	std	Y+22, r30	; 0x16
    3740:	9c 91       	ld	r25, X
    3742:	e8 2f       	mov	r30, r24
    3744:	e0 95       	com	r30
    3746:	e9 23       	and	r30, r25
    3748:	ec 93       	st	X, r30
    374a:	ec 85       	ldd	r30, Y+12	; 0x0c
    374c:	fd 85       	ldd	r31, Y+13	; 0x0d
    374e:	90 81       	ld	r25, Z
    3750:	8e 89       	ldd	r24, Y+22	; 0x16
    3752:	80 95       	com	r24
    3754:	89 23       	and	r24, r25
    3756:	80 83       	st	Z, r24
    3758:	06 c0       	rjmp	.+12     	; 0x3766 <_ZN14TFT_22_ILI92255beginEv+0x14a>
    375a:	1f 86       	std	Y+15, r1	; 0x0f
    375c:	1e 86       	std	Y+14, r1	; 0x0e
    375e:	1f 8a       	std	Y+23, r1	; 0x17
    3760:	1d 86       	std	Y+13, r1	; 0x0d
    3762:	1c 86       	std	Y+12, r1	; 0x0c
    3764:	1e 8a       	std	Y+22, r1	; 0x16
    3766:	8a 85       	ldd	r24, Y+10	; 0x0a
    3768:	87 fd       	sbrc	r24, 7
    376a:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_ZN8SPIClass5beginEv>
    376e:	8e 81       	ldd	r24, Y+6	; 0x06
    3770:	18 16       	cp	r1, r24
    3772:	ec f4       	brge	.+58     	; 0x37ae <_ZN14TFT_22_ILI92255beginEv+0x192>
    3774:	61 e0       	ldi	r22, 0x01	; 1
    3776:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    377a:	61 e0       	ldi	r22, 0x01	; 1
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	8e 81       	ldd	r24, Y+6	; 0x06
    378a:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    378e:	6a e0       	ldi	r22, 0x0A	; 10
    3790:	70 e0       	ldi	r23, 0x00	; 0
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    379a:	61 e0       	ldi	r22, 0x01	; 1
    379c:	8e 81       	ldd	r24, Y+6	; 0x06
    379e:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    37a2:	62 e3       	ldi	r22, 0x32	; 50
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    37ae:	ce 01       	movw	r24, r28
    37b0:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	60 e1       	ldi	r22, 0x10	; 16
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	ce 01       	movw	r24, r28
    37be:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	50 e0       	ldi	r21, 0x00	; 0
    37c6:	61 e1       	ldi	r22, 0x11	; 17
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	ce 01       	movw	r24, r28
    37cc:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	62 e1       	ldi	r22, 0x12	; 18
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	ce 01       	movw	r24, r28
    37da:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	50 e0       	ldi	r21, 0x00	; 0
    37e2:	63 e1       	ldi	r22, 0x13	; 19
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	ce 01       	movw	r24, r28
    37e8:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	50 e0       	ldi	r21, 0x00	; 0
    37f0:	64 e1       	ldi	r22, 0x14	; 20
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	ce 01       	movw	r24, r28
    37f6:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    37fa:	ce 01       	movw	r24, r28
    37fc:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    3800:	68 e2       	ldi	r22, 0x28	; 40
    3802:	70 e0       	ldi	r23, 0x00	; 0
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    380c:	ce 01       	movw	r24, r28
    380e:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3812:	48 e1       	ldi	r20, 0x18	; 24
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	61 e1       	ldi	r22, 0x11	; 17
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	ce 01       	movw	r24, r28
    381c:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3820:	41 e2       	ldi	r20, 0x21	; 33
    3822:	51 e6       	ldi	r21, 0x61	; 97
    3824:	62 e1       	ldi	r22, 0x12	; 18
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	ce 01       	movw	r24, r28
    382a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    382e:	4f e6       	ldi	r20, 0x6F	; 111
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	63 e1       	ldi	r22, 0x13	; 19
    3834:	70 e0       	ldi	r23, 0x00	; 0
    3836:	ce 01       	movw	r24, r28
    3838:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    383c:	4f e5       	ldi	r20, 0x5F	; 95
    383e:	59 e4       	ldi	r21, 0x49	; 73
    3840:	64 e1       	ldi	r22, 0x14	; 20
    3842:	70 e0       	ldi	r23, 0x00	; 0
    3844:	ce 01       	movw	r24, r28
    3846:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	58 e0       	ldi	r21, 0x08	; 8
    384e:	60 e1       	ldi	r22, 0x10	; 16
    3850:	70 e0       	ldi	r23, 0x00	; 0
    3852:	ce 01       	movw	r24, r28
    3854:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3858:	ce 01       	movw	r24, r28
    385a:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    385e:	6a e0       	ldi	r22, 0x0A	; 10
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    386a:	ce 01       	movw	r24, r28
    386c:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3870:	4b e3       	ldi	r20, 0x3B	; 59
    3872:	50 e1       	ldi	r21, 0x10	; 16
    3874:	61 e1       	ldi	r22, 0x11	; 17
    3876:	70 e0       	ldi	r23, 0x00	; 0
    3878:	ce 01       	movw	r24, r28
    387a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    387e:	ce 01       	movw	r24, r28
    3880:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    3884:	62 e3       	ldi	r22, 0x32	; 50
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    3890:	ce 01       	movw	r24, r28
    3892:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3896:	4c e1       	ldi	r20, 0x1C	; 28
    3898:	51 e0       	ldi	r21, 0x01	; 1
    389a:	61 e0       	ldi	r22, 0x01	; 1
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	ce 01       	movw	r24, r28
    38a0:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	51 e0       	ldi	r21, 0x01	; 1
    38a8:	62 e0       	ldi	r22, 0x02	; 2
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	ce 01       	movw	r24, r28
    38ae:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38b2:	48 e3       	ldi	r20, 0x38	; 56
    38b4:	50 e1       	ldi	r21, 0x10	; 16
    38b6:	63 e0       	ldi	r22, 0x03	; 3
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	ce 01       	movw	r24, r28
    38bc:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	67 e0       	ldi	r22, 0x07	; 7
    38c6:	70 e0       	ldi	r23, 0x00	; 0
    38c8:	ce 01       	movw	r24, r28
    38ca:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38ce:	48 e0       	ldi	r20, 0x08	; 8
    38d0:	58 e0       	ldi	r21, 0x08	; 8
    38d2:	68 e0       	ldi	r22, 0x08	; 8
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	ce 01       	movw	r24, r28
    38d8:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	51 e1       	ldi	r21, 0x11	; 17
    38e0:	6b e0       	ldi	r22, 0x0B	; 11
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	ce 01       	movw	r24, r28
    38e6:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38ea:	40 e0       	ldi	r20, 0x00	; 0
    38ec:	50 e0       	ldi	r21, 0x00	; 0
    38ee:	6c e0       	ldi	r22, 0x0C	; 12
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	ce 01       	movw	r24, r28
    38f4:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    38f8:	41 e0       	ldi	r20, 0x01	; 1
    38fa:	5d e0       	ldi	r21, 0x0D	; 13
    38fc:	6f e0       	ldi	r22, 0x0F	; 15
    38fe:	70 e0       	ldi	r23, 0x00	; 0
    3900:	ce 01       	movw	r24, r28
    3902:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3906:	40 e2       	ldi	r20, 0x20	; 32
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	65 e1       	ldi	r22, 0x15	; 21
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	ce 01       	movw	r24, r28
    3910:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	50 e0       	ldi	r21, 0x00	; 0
    3918:	60 e2       	ldi	r22, 0x20	; 32
    391a:	70 e0       	ldi	r23, 0x00	; 0
    391c:	ce 01       	movw	r24, r28
    391e:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3922:	40 e0       	ldi	r20, 0x00	; 0
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	61 e2       	ldi	r22, 0x21	; 33
    3928:	70 e0       	ldi	r23, 0x00	; 0
    392a:	ce 01       	movw	r24, r28
    392c:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3930:	40 e0       	ldi	r20, 0x00	; 0
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	60 e3       	ldi	r22, 0x30	; 48
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	ce 01       	movw	r24, r28
    393a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    393e:	4b ed       	ldi	r20, 0xDB	; 219
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	61 e3       	ldi	r22, 0x31	; 49
    3944:	70 e0       	ldi	r23, 0x00	; 0
    3946:	ce 01       	movw	r24, r28
    3948:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	62 e3       	ldi	r22, 0x32	; 50
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	ce 01       	movw	r24, r28
    3956:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	63 e3       	ldi	r22, 0x33	; 51
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	ce 01       	movw	r24, r28
    3964:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3968:	4b ed       	ldi	r20, 0xDB	; 219
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	64 e3       	ldi	r22, 0x34	; 52
    396e:	70 e0       	ldi	r23, 0x00	; 0
    3970:	ce 01       	movw	r24, r28
    3972:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3976:	40 e0       	ldi	r20, 0x00	; 0
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	65 e3       	ldi	r22, 0x35	; 53
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	ce 01       	movw	r24, r28
    3980:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3984:	4f ea       	ldi	r20, 0xAF	; 175
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	66 e3       	ldi	r22, 0x36	; 54
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	ce 01       	movw	r24, r28
    398e:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	67 e3       	ldi	r22, 0x37	; 55
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	ce 01       	movw	r24, r28
    399c:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39a0:	4b ed       	ldi	r20, 0xDB	; 219
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	68 e3       	ldi	r22, 0x38	; 56
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	ce 01       	movw	r24, r28
    39aa:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	69 e3       	ldi	r22, 0x39	; 57
    39b4:	70 e0       	ldi	r23, 0x00	; 0
    39b6:	ce 01       	movw	r24, r28
    39b8:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39bc:	40 e0       	ldi	r20, 0x00	; 0
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	60 e5       	ldi	r22, 0x50	; 80
    39c2:	70 e0       	ldi	r23, 0x00	; 0
    39c4:	ce 01       	movw	r24, r28
    39c6:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39ca:	48 e0       	ldi	r20, 0x08	; 8
    39cc:	58 e0       	ldi	r21, 0x08	; 8
    39ce:	61 e5       	ldi	r22, 0x51	; 81
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	ce 01       	movw	r24, r28
    39d4:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39d8:	4a e0       	ldi	r20, 0x0A	; 10
    39da:	58 e0       	ldi	r21, 0x08	; 8
    39dc:	62 e5       	ldi	r22, 0x52	; 82
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	ce 01       	movw	r24, r28
    39e2:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39e6:	4a e0       	ldi	r20, 0x0A	; 10
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	63 e5       	ldi	r22, 0x53	; 83
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	ce 01       	movw	r24, r28
    39f0:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39f4:	48 e0       	ldi	r20, 0x08	; 8
    39f6:	5a e0       	ldi	r21, 0x0A	; 10
    39f8:	64 e5       	ldi	r22, 0x54	; 84
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	ce 01       	movw	r24, r28
    39fe:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a02:	48 e0       	ldi	r20, 0x08	; 8
    3a04:	58 e0       	ldi	r21, 0x08	; 8
    3a06:	65 e5       	ldi	r22, 0x55	; 85
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	66 e5       	ldi	r22, 0x56	; 86
    3a16:	70 e0       	ldi	r23, 0x00	; 0
    3a18:	ce 01       	movw	r24, r28
    3a1a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a1e:	40 e0       	ldi	r20, 0x00	; 0
    3a20:	5a e0       	ldi	r21, 0x0A	; 10
    3a22:	67 e5       	ldi	r22, 0x57	; 87
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	ce 01       	movw	r24, r28
    3a28:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a2c:	40 e1       	ldi	r20, 0x10	; 16
    3a2e:	57 e0       	ldi	r21, 0x07	; 7
    3a30:	68 e5       	ldi	r22, 0x58	; 88
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	ce 01       	movw	r24, r28
    3a36:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a3a:	40 e1       	ldi	r20, 0x10	; 16
    3a3c:	57 e0       	ldi	r21, 0x07	; 7
    3a3e:	69 e5       	ldi	r22, 0x59	; 89
    3a40:	70 e0       	ldi	r23, 0x00	; 0
    3a42:	ce 01       	movw	r24, r28
    3a44:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a48:	42 e1       	ldi	r20, 0x12	; 18
    3a4a:	50 e0       	ldi	r21, 0x00	; 0
    3a4c:	67 e0       	ldi	r22, 0x07	; 7
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	ce 01       	movw	r24, r28
    3a52:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a56:	ce 01       	movw	r24, r28
    3a58:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    3a5c:	62 e3       	ldi	r22, 0x32	; 50
    3a5e:	70 e0       	ldi	r23, 0x00	; 0
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	0e 94 05 13 	call	0x260a	; 0x260a <delay>
    3a68:	ce 01       	movw	r24, r28
    3a6a:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3a6e:	47 e1       	ldi	r20, 0x17	; 23
    3a70:	50 e1       	ldi	r21, 0x10	; 16
    3a72:	67 e0       	ldi	r22, 0x07	; 7
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	ce 01       	movw	r24, r28
    3a78:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    3a82:	61 e0       	ldi	r22, 0x01	; 1
    3a84:	ce 01       	movw	r24, r28
    3a86:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <_ZN14TFT_22_ILI922512setBacklightEb>
    3a8a:	60 e0       	ldi	r22, 0x00	; 0
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN14TFT_22_ILI922514setOrientationEh>
    3a92:	1d 82       	std	Y+5, r1	; 0x05
    3a94:	1c 82       	std	Y+4, r1	; 0x04
    3a96:	ce 01       	movw	r24, r28
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <_ZN14TFT_22_ILI92255clearEv>

00003aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>:
    3aa0:	ef 92       	push	r14
    3aa2:	ff 92       	push	r15
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <_ZN14TFT_22_ILI92259drawPixelEjjj+0xe>
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <_ZN14TFT_22_ILI92259drawPixelEjjj+0x10>
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	7a 83       	std	Y+2, r23	; 0x02
    3ab6:	69 83       	std	Y+1, r22	; 0x01
    3ab8:	5c 83       	std	Y+4, r21	; 0x04
    3aba:	4b 83       	std	Y+3, r20	; 0x03
    3abc:	dc 01       	movw	r26, r24
    3abe:	4d 91       	ld	r20, X+
    3ac0:	5c 91       	ld	r21, X
    3ac2:	11 97       	sbiw	r26, 0x01	; 1
    3ac4:	64 17       	cp	r22, r20
    3ac6:	75 07       	cpc	r23, r21
    3ac8:	68 f5       	brcc	.+90     	; 0x3b24 <_ZN14TFT_22_ILI92259drawPixelEjjj+0x84>
    3aca:	12 96       	adiw	r26, 0x02	; 2
    3acc:	6d 91       	ld	r22, X+
    3ace:	7c 91       	ld	r23, X
    3ad0:	13 97       	sbiw	r26, 0x03	; 3
    3ad2:	4b 81       	ldd	r20, Y+3	; 0x03
    3ad4:	5c 81       	ldd	r21, Y+4	; 0x04
    3ad6:	46 17       	cp	r20, r22
    3ad8:	57 07       	cpc	r21, r23
    3ada:	20 f5       	brcc	.+72     	; 0x3b24 <_ZN14TFT_22_ILI92259drawPixelEjjj+0x84>
    3adc:	79 01       	movw	r14, r18
    3ade:	8c 01       	movw	r16, r24
    3ae0:	ae 01       	movw	r20, r28
    3ae2:	4d 5f       	subi	r20, 0xFD	; 253
    3ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae6:	be 01       	movw	r22, r28
    3ae8:	6f 5f       	subi	r22, 0xFF	; 255
    3aea:	7f 4f       	sbci	r23, 0xFF	; 255
    3aec:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>
    3af0:	c8 01       	movw	r24, r16
    3af2:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3af6:	49 81       	ldd	r20, Y+1	; 0x01
    3af8:	5a 81       	ldd	r21, Y+2	; 0x02
    3afa:	60 e2       	ldi	r22, 0x20	; 32
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	c8 01       	movw	r24, r16
    3b00:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b04:	4b 81       	ldd	r20, Y+3	; 0x03
    3b06:	5c 81       	ldd	r21, Y+4	; 0x04
    3b08:	61 e2       	ldi	r22, 0x21	; 33
    3b0a:	70 e0       	ldi	r23, 0x00	; 0
    3b0c:	c8 01       	movw	r24, r16
    3b0e:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b12:	a7 01       	movw	r20, r14
    3b14:	62 e2       	ldi	r22, 0x22	; 34
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	c8 01       	movw	r24, r16
    3b1a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b1e:	c8 01       	movw	r24, r16
    3b20:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	1f 91       	pop	r17
    3b32:	0f 91       	pop	r16
    3b34:	ff 90       	pop	r15
    3b36:	ef 90       	pop	r14
    3b38:	08 95       	ret

00003b3a <_ZN14TFT_22_ILI922510drawCircleEjjjj>:
    3b3a:	2f 92       	push	r2
    3b3c:	3f 92       	push	r3
    3b3e:	4f 92       	push	r4
    3b40:	5f 92       	push	r5
    3b42:	6f 92       	push	r6
    3b44:	7f 92       	push	r7
    3b46:	8f 92       	push	r8
    3b48:	9f 92       	push	r9
    3b4a:	af 92       	push	r10
    3b4c:	bf 92       	push	r11
    3b4e:	cf 92       	push	r12
    3b50:	df 92       	push	r13
    3b52:	ef 92       	push	r14
    3b54:	ff 92       	push	r15
    3b56:	0f 93       	push	r16
    3b58:	1f 93       	push	r17
    3b5a:	cf 93       	push	r28
    3b5c:	df 93       	push	r29
    3b5e:	00 d0       	rcall	.+0      	; 0x3b60 <_ZN14TFT_22_ILI922510drawCircleEjjjj+0x26>
    3b60:	00 d0       	rcall	.+0      	; 0x3b62 <_ZN14TFT_22_ILI922510drawCircleEjjjj+0x28>
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <_ZN14TFT_22_ILI922510drawCircleEjjjj+0x2a>
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	7c 01       	movw	r14, r24
    3b6a:	5b 01       	movw	r10, r22
    3b6c:	6a 01       	movw	r12, r20
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	2c 01       	movw	r4, r24
    3b74:	42 1a       	sub	r4, r18
    3b76:	53 0a       	sbc	r5, r19
    3b78:	88 27       	eor	r24, r24
    3b7a:	99 27       	eor	r25, r25
    3b7c:	82 1b       	sub	r24, r18
    3b7e:	93 0b       	sbc	r25, r19
    3b80:	ac 01       	movw	r20, r24
    3b82:	44 0f       	add	r20, r20
    3b84:	55 1f       	adc	r21, r21
    3b86:	5c 83       	std	Y+4, r21	; 0x04
    3b88:	4b 83       	std	Y+3, r20	; 0x03
    3b8a:	3e 83       	std	Y+6, r19	; 0x06
    3b8c:	2d 83       	std	Y+5, r18	; 0x05
    3b8e:	c7 01       	movw	r24, r14
    3b90:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3b94:	4d 81       	ldd	r20, Y+5	; 0x05
    3b96:	5e 81       	ldd	r21, Y+6	; 0x06
    3b98:	4c 0d       	add	r20, r12
    3b9a:	5d 1d       	adc	r21, r13
    3b9c:	98 01       	movw	r18, r16
    3b9e:	b5 01       	movw	r22, r10
    3ba0:	c7 01       	movw	r24, r14
    3ba2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3ba6:	a6 01       	movw	r20, r12
    3ba8:	6d 81       	ldd	r22, Y+5	; 0x05
    3baa:	7e 81       	ldd	r23, Y+6	; 0x06
    3bac:	46 1b       	sub	r20, r22
    3bae:	57 0b       	sbc	r21, r23
    3bb0:	98 01       	movw	r18, r16
    3bb2:	b5 01       	movw	r22, r10
    3bb4:	c7 01       	movw	r24, r14
    3bb6:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3bba:	6d 81       	ldd	r22, Y+5	; 0x05
    3bbc:	7e 81       	ldd	r23, Y+6	; 0x06
    3bbe:	6a 0d       	add	r22, r10
    3bc0:	7b 1d       	adc	r23, r11
    3bc2:	98 01       	movw	r18, r16
    3bc4:	a6 01       	movw	r20, r12
    3bc6:	c7 01       	movw	r24, r14
    3bc8:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3bcc:	b5 01       	movw	r22, r10
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	68 1b       	sub	r22, r24
    3bd4:	79 0b       	sbc	r23, r25
    3bd6:	98 01       	movw	r18, r16
    3bd8:	a6 01       	movw	r20, r12
    3bda:	c7 01       	movw	r24, r14
    3bdc:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3be0:	61 2c       	mov	r6, r1
    3be2:	71 2c       	mov	r7, r1
    3be4:	4d 81       	ldd	r20, Y+5	; 0x05
    3be6:	5e 81       	ldd	r21, Y+6	; 0x06
    3be8:	64 16       	cp	r6, r20
    3bea:	75 06       	cpc	r7, r21
    3bec:	0c f0       	brlt	.+2      	; 0x3bf0 <_ZN14TFT_22_ILI922510drawCircleEjjjj+0xb6>
    3bee:	6b c0       	rjmp	.+214    	; 0x3cc6 <_ZN14TFT_22_ILI922510drawCircleEjjjj+0x18c>
    3bf0:	57 fc       	sbrc	r5, 7
    3bf2:	0c c0       	rjmp	.+24     	; 0x3c0c <_ZN14TFT_22_ILI922510drawCircleEjjjj+0xd2>
    3bf4:	41 50       	subi	r20, 0x01	; 1
    3bf6:	51 09       	sbc	r21, r1
    3bf8:	5e 83       	std	Y+6, r21	; 0x06
    3bfa:	4d 83       	std	Y+5, r20	; 0x05
    3bfc:	6b 81       	ldd	r22, Y+3	; 0x03
    3bfe:	7c 81       	ldd	r23, Y+4	; 0x04
    3c00:	6e 5f       	subi	r22, 0xFE	; 254
    3c02:	7f 4f       	sbci	r23, 0xFF	; 255
    3c04:	7c 83       	std	Y+4, r23	; 0x04
    3c06:	6b 83       	std	Y+3, r22	; 0x03
    3c08:	46 0e       	add	r4, r22
    3c0a:	57 1e       	adc	r5, r23
    3c0c:	7f ef       	ldi	r23, 0xFF	; 255
    3c0e:	67 1a       	sub	r6, r23
    3c10:	77 0a       	sbc	r7, r23
    3c12:	c3 01       	movw	r24, r6
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	01 96       	adiw	r24, 0x01	; 1
    3c1a:	48 0e       	add	r4, r24
    3c1c:	59 1e       	adc	r5, r25
    3c1e:	15 01       	movw	r2, r10
    3c20:	26 0c       	add	r2, r6
    3c22:	37 1c       	adc	r3, r7
    3c24:	98 01       	movw	r18, r16
    3c26:	8d 80       	ldd	r8, Y+5	; 0x05
    3c28:	9e 80       	ldd	r9, Y+6	; 0x06
    3c2a:	8c 0c       	add	r8, r12
    3c2c:	9d 1c       	adc	r9, r13
    3c2e:	a4 01       	movw	r20, r8
    3c30:	b1 01       	movw	r22, r2
    3c32:	c7 01       	movw	r24, r14
    3c34:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3c38:	c5 01       	movw	r24, r10
    3c3a:	86 19       	sub	r24, r6
    3c3c:	97 09       	sbc	r25, r7
    3c3e:	9a 83       	std	Y+2, r25	; 0x02
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	98 01       	movw	r18, r16
    3c44:	a4 01       	movw	r20, r8
    3c46:	bc 01       	movw	r22, r24
    3c48:	c7 01       	movw	r24, r14
    3c4a:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3c4e:	98 01       	movw	r18, r16
    3c50:	46 01       	movw	r8, r12
    3c52:	4d 81       	ldd	r20, Y+5	; 0x05
    3c54:	5e 81       	ldd	r21, Y+6	; 0x06
    3c56:	84 1a       	sub	r8, r20
    3c58:	95 0a       	sbc	r9, r21
    3c5a:	a4 01       	movw	r20, r8
    3c5c:	b1 01       	movw	r22, r2
    3c5e:	c7 01       	movw	r24, r14
    3c60:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3c64:	98 01       	movw	r18, r16
    3c66:	a4 01       	movw	r20, r8
    3c68:	69 81       	ldd	r22, Y+1	; 0x01
    3c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3c72:	46 01       	movw	r8, r12
    3c74:	86 0c       	add	r8, r6
    3c76:	97 1c       	adc	r9, r7
    3c78:	98 01       	movw	r18, r16
    3c7a:	a4 01       	movw	r20, r8
    3c7c:	2d 80       	ldd	r2, Y+5	; 0x05
    3c7e:	3e 80       	ldd	r3, Y+6	; 0x06
    3c80:	2a 0c       	add	r2, r10
    3c82:	3b 1c       	adc	r3, r11
    3c84:	b1 01       	movw	r22, r2
    3c86:	c7 01       	movw	r24, r14
    3c88:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3c8c:	98 01       	movw	r18, r16
    3c8e:	a4 01       	movw	r20, r8
    3c90:	b5 01       	movw	r22, r10
    3c92:	8d 81       	ldd	r24, Y+5	; 0x05
    3c94:	9e 81       	ldd	r25, Y+6	; 0x06
    3c96:	68 1b       	sub	r22, r24
    3c98:	79 0b       	sbc	r23, r25
    3c9a:	7a 83       	std	Y+2, r23	; 0x02
    3c9c:	69 83       	std	Y+1, r22	; 0x01
    3c9e:	c7 01       	movw	r24, r14
    3ca0:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3ca4:	46 01       	movw	r8, r12
    3ca6:	86 18       	sub	r8, r6
    3ca8:	97 08       	sbc	r9, r7
    3caa:	98 01       	movw	r18, r16
    3cac:	a4 01       	movw	r20, r8
    3cae:	b1 01       	movw	r22, r2
    3cb0:	c7 01       	movw	r24, r14
    3cb2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3cb6:	98 01       	movw	r18, r16
    3cb8:	a4 01       	movw	r20, r8
    3cba:	69 81       	ldd	r22, Y+1	; 0x01
    3cbc:	7a 81       	ldd	r23, Y+2	; 0x02
    3cbe:	c7 01       	movw	r24, r14
    3cc0:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3cc4:	8f cf       	rjmp	.-226    	; 0x3be4 <_ZN14TFT_22_ILI922510drawCircleEjjjj+0xaa>
    3cc6:	c7 01       	movw	r24, r14
    3cc8:	26 96       	adiw	r28, 0x06	; 6
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	1f 91       	pop	r17
    3cda:	0f 91       	pop	r16
    3cdc:	ff 90       	pop	r15
    3cde:	ef 90       	pop	r14
    3ce0:	df 90       	pop	r13
    3ce2:	cf 90       	pop	r12
    3ce4:	bf 90       	pop	r11
    3ce6:	af 90       	pop	r10
    3ce8:	9f 90       	pop	r9
    3cea:	8f 90       	pop	r8
    3cec:	7f 90       	pop	r7
    3cee:	6f 90       	pop	r6
    3cf0:	5f 90       	pop	r5
    3cf2:	4f 90       	pop	r4
    3cf4:	3f 90       	pop	r3
    3cf6:	2f 90       	pop	r2
    3cf8:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>

00003cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>:
    3cfc:	2f 92       	push	r2
    3cfe:	3f 92       	push	r3
    3d00:	4f 92       	push	r4
    3d02:	5f 92       	push	r5
    3d04:	6f 92       	push	r6
    3d06:	7f 92       	push	r7
    3d08:	8f 92       	push	r8
    3d0a:	9f 92       	push	r9
    3d0c:	af 92       	push	r10
    3d0e:	bf 92       	push	r11
    3d10:	cf 92       	push	r12
    3d12:	df 92       	push	r13
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x26>
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x28>
    3d24:	00 d0       	rcall	.+0      	; 0x3d26 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x2a>
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	4c 01       	movw	r8, r24
    3d2c:	7e 83       	std	Y+6, r23	; 0x06
    3d2e:	6d 83       	std	Y+5, r22	; 0x05
    3d30:	6a 01       	movw	r12, r20
    3d32:	59 01       	movw	r10, r18
    3d34:	fc 82       	std	Y+4, r15	; 0x04
    3d36:	eb 82       	std	Y+3, r14	; 0x03
    3d38:	38 01       	movw	r6, r16
    3d3a:	64 1a       	sub	r6, r20
    3d3c:	75 0a       	sbc	r7, r21
    3d3e:	77 fe       	sbrs	r7, 7
    3d40:	03 c0       	rjmp	.+6      	; 0x3d48 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x4c>
    3d42:	71 94       	neg	r7
    3d44:	61 94       	neg	r6
    3d46:	71 08       	sbc	r7, r1
    3d48:	75 01       	movw	r14, r10
    3d4a:	2d 81       	ldd	r18, Y+5	; 0x05
    3d4c:	3e 81       	ldd	r19, Y+6	; 0x06
    3d4e:	e2 1a       	sub	r14, r18
    3d50:	f3 0a       	sbc	r15, r19
    3d52:	f7 fe       	sbrs	r15, 7
    3d54:	03 c0       	rjmp	.+6      	; 0x3d5c <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x60>
    3d56:	f1 94       	neg	r15
    3d58:	e1 94       	neg	r14
    3d5a:	f1 08       	sbc	r15, r1
    3d5c:	e6 14       	cp	r14, r6
    3d5e:	f7 04       	cpc	r15, r7
    3d60:	5c f4       	brge	.+22     	; 0x3d78 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x7c>
    3d62:	9a 2d       	mov	r25, r10
    3d64:	8b 2d       	mov	r24, r11
    3d66:	58 01       	movw	r10, r16
    3d68:	09 2f       	mov	r16, r25
    3d6a:	18 2f       	mov	r17, r24
    3d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d70:	de 82       	std	Y+6, r13	; 0x06
    3d72:	cd 82       	std	Y+5, r12	; 0x05
    3d74:	c9 2e       	mov	r12, r25
    3d76:	d8 2e       	mov	r13, r24
    3d78:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7c:	a8 16       	cp	r10, r24
    3d7e:	b9 06       	cpc	r11, r25
    3d80:	58 f4       	brcc	.+22     	; 0x3d98 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x9c>
    3d82:	9c 2d       	mov	r25, r12
    3d84:	8d 2d       	mov	r24, r13
    3d86:	68 01       	movw	r12, r16
    3d88:	09 2f       	mov	r16, r25
    3d8a:	18 2f       	mov	r17, r24
    3d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d90:	be 82       	std	Y+6, r11	; 0x06
    3d92:	ad 82       	std	Y+5, r10	; 0x05
    3d94:	a9 2e       	mov	r10, r25
    3d96:	b8 2e       	mov	r11, r24
    3d98:	95 01       	movw	r18, r10
    3d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9e:	28 1b       	sub	r18, r24
    3da0:	39 0b       	sbc	r19, r25
    3da2:	3a 83       	std	Y+2, r19	; 0x02
    3da4:	29 83       	std	Y+1, r18	; 0x01
    3da6:	18 01       	movw	r2, r16
    3da8:	2c 18       	sub	r2, r12
    3daa:	3d 08       	sbc	r3, r13
    3dac:	37 fe       	sbrs	r3, 7
    3dae:	03 c0       	rjmp	.+6      	; 0x3db6 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xba>
    3db0:	31 94       	neg	r3
    3db2:	21 94       	neg	r2
    3db4:	31 08       	sbc	r3, r1
    3db6:	49 80       	ldd	r4, Y+1	; 0x01
    3db8:	5a 80       	ldd	r5, Y+2	; 0x02
    3dba:	57 fe       	sbrs	r5, 7
    3dbc:	03 c0       	rjmp	.+6      	; 0x3dc4 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xc8>
    3dbe:	9f ef       	ldi	r25, 0xFF	; 255
    3dc0:	49 1a       	sub	r4, r25
    3dc2:	59 0a       	sbc	r5, r25
    3dc4:	55 94       	asr	r5
    3dc6:	47 94       	ror	r4
    3dc8:	c0 16       	cp	r12, r16
    3dca:	d1 06       	cpc	r13, r17
    3dcc:	18 f0       	brcs	.+6      	; 0x3dd4 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xd8>
    3dce:	0f ef       	ldi	r16, 0xFF	; 255
    3dd0:	1f ef       	ldi	r17, 0xFF	; 255
    3dd2:	02 c0       	rjmp	.+4      	; 0x3dd8 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xdc>
    3dd4:	01 e0       	ldi	r16, 0x01	; 1
    3dd6:	10 e0       	ldi	r17, 0x00	; 0
    3dd8:	c4 01       	movw	r24, r8
    3dda:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3dde:	2d 81       	ldd	r18, Y+5	; 0x05
    3de0:	3e 81       	ldd	r19, Y+6	; 0x06
    3de2:	a2 16       	cp	r10, r18
    3de4:	b3 06       	cpc	r11, r19
    3de6:	00 f1       	brcs	.+64     	; 0x3e28 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x12c>
    3de8:	2b 81       	ldd	r18, Y+3	; 0x03
    3dea:	3c 81       	ldd	r19, Y+4	; 0x04
    3dec:	e6 14       	cp	r14, r6
    3dee:	f7 04       	cpc	r15, r7
    3df0:	24 f4       	brge	.+8      	; 0x3dfa <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xfe>
    3df2:	4d 81       	ldd	r20, Y+5	; 0x05
    3df4:	5e 81       	ldd	r21, Y+6	; 0x06
    3df6:	b6 01       	movw	r22, r12
    3df8:	03 c0       	rjmp	.+6      	; 0x3e00 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x104>
    3dfa:	a6 01       	movw	r20, r12
    3dfc:	6d 81       	ldd	r22, Y+5	; 0x05
    3dfe:	7e 81       	ldd	r23, Y+6	; 0x06
    3e00:	c4 01       	movw	r24, r8
    3e02:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3e06:	42 18       	sub	r4, r2
    3e08:	53 08       	sbc	r5, r3
    3e0a:	57 fe       	sbrs	r5, 7
    3e0c:	06 c0       	rjmp	.+12     	; 0x3e1a <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x11e>
    3e0e:	c0 0e       	add	r12, r16
    3e10:	d1 1e       	adc	r13, r17
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	48 0e       	add	r4, r24
    3e18:	59 1e       	adc	r5, r25
    3e1a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e1c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e1e:	2f 5f       	subi	r18, 0xFF	; 255
    3e20:	3f 4f       	sbci	r19, 0xFF	; 255
    3e22:	3e 83       	std	Y+6, r19	; 0x06
    3e24:	2d 83       	std	Y+5, r18	; 0x05
    3e26:	db cf       	rjmp	.-74     	; 0x3dde <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xe2>
    3e28:	c4 01       	movw	r24, r8
    3e2a:	26 96       	adiw	r28, 0x06	; 6
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	0f be       	out	0x3f, r0	; 63
    3e34:	cd bf       	out	0x3d, r28	; 61
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	ff 90       	pop	r15
    3e40:	ef 90       	pop	r14
    3e42:	df 90       	pop	r13
    3e44:	cf 90       	pop	r12
    3e46:	bf 90       	pop	r11
    3e48:	af 90       	pop	r10
    3e4a:	9f 90       	pop	r9
    3e4c:	8f 90       	pop	r8
    3e4e:	7f 90       	pop	r7
    3e50:	6f 90       	pop	r6
    3e52:	5f 90       	pop	r5
    3e54:	4f 90       	pop	r4
    3e56:	3f 90       	pop	r3
    3e58:	2f 90       	pop	r2
    3e5a:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>

00003e5e <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>:
    3e5e:	4f 92       	push	r4
    3e60:	5f 92       	push	r5
    3e62:	6f 92       	push	r6
    3e64:	7f 92       	push	r7
    3e66:	8f 92       	push	r8
    3e68:	9f 92       	push	r9
    3e6a:	af 92       	push	r10
    3e6c:	bf 92       	push	r11
    3e6e:	cf 92       	push	r12
    3e70:	df 92       	push	r13
    3e72:	ef 92       	push	r14
    3e74:	ff 92       	push	r15
    3e76:	0f 93       	push	r16
    3e78:	1f 93       	push	r17
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	ec 01       	movw	r28, r24
    3e80:	4b 01       	movw	r8, r22
    3e82:	3a 01       	movw	r6, r20
    3e84:	29 01       	movw	r4, r18
    3e86:	68 01       	movw	r12, r16
    3e88:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    3e8c:	94 01       	movw	r18, r8
    3e8e:	a3 01       	movw	r20, r6
    3e90:	b4 01       	movw	r22, r8
    3e92:	ce 01       	movw	r24, r28
    3e94:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3e98:	83 01       	movw	r16, r6
    3e9a:	92 01       	movw	r18, r4
    3e9c:	a3 01       	movw	r20, r6
    3e9e:	b4 01       	movw	r22, r8
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3ea6:	86 01       	movw	r16, r12
    3ea8:	92 01       	movw	r18, r4
    3eaa:	a6 01       	movw	r20, r12
    3eac:	b4 01       	movw	r22, r8
    3eae:	ce 01       	movw	r24, r28
    3eb0:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3eb4:	92 01       	movw	r18, r4
    3eb6:	a3 01       	movw	r20, r6
    3eb8:	b2 01       	movw	r22, r4
    3eba:	ce 01       	movw	r24, r28
    3ebc:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	ef 90       	pop	r14
    3ece:	df 90       	pop	r13
    3ed0:	cf 90       	pop	r12
    3ed2:	bf 90       	pop	r11
    3ed4:	af 90       	pop	r10
    3ed6:	9f 90       	pop	r9
    3ed8:	8f 90       	pop	r8
    3eda:	7f 90       	pop	r7
    3edc:	6f 90       	pop	r6
    3ede:	5f 90       	pop	r5
    3ee0:	4f 90       	pop	r4
    3ee2:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>

00003ee6 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb>:
    _drawBitmap( x,  y, bitmap,  w,  h, color,  bg, false, true, true );
}


// internal function for drawing bitmaps with/without transparent bg, or from ram or progmem
void TFT_22_ILI9225::_drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, uint16_t bg, bool transparent, bool progmem,bool Xbit) {
    3ee6:	2f 92       	push	r2
    3ee8:	3f 92       	push	r3
    3eea:	4f 92       	push	r4
    3eec:	5f 92       	push	r5
    3eee:	6f 92       	push	r6
    3ef0:	7f 92       	push	r7
    3ef2:	8f 92       	push	r8
    3ef4:	9f 92       	push	r9
    3ef6:	af 92       	push	r10
    3ef8:	bf 92       	push	r11
    3efa:	cf 92       	push	r12
    3efc:	df 92       	push	r13
    3efe:	ef 92       	push	r14
    3f00:	ff 92       	push	r15
    3f02:	0f 93       	push	r16
    3f04:	1f 93       	push	r17
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	c2 55       	subi	r28, 0x52	; 82
    3f10:	d1 09       	sbc	r29, r1
    3f12:	0f b6       	in	r0, 0x3f	; 63
    3f14:	f8 94       	cli
    3f16:	de bf       	out	0x3e, r29	; 62
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	cd bf       	out	0x3d, r28	; 61
    3f1c:	3c 01       	movw	r6, r24
    3f1e:	7e af       	std	Y+62, r23	; 0x3e
    3f20:	6d af       	std	Y+61, r22	; 0x3d
    3f22:	2a 01       	movw	r4, r20
    3f24:	28 96       	adiw	r28, 0x08	; 8
    3f26:	3f af       	std	Y+63, r19	; 0x3f
    3f28:	2e af       	std	Y+62, r18	; 0x3e
    3f2a:	28 97       	sbiw	r28, 0x08	; 8
    3f2c:	18 01       	movw	r2, r16
    3f2e:	2a 96       	adiw	r28, 0x0a	; 10
    3f30:	df ae       	std	Y+63, r13	; 0x3f
    3f32:	ce ae       	std	Y+62, r12	; 0x3e
    3f34:	2a 97       	sbiw	r28, 0x0a	; 10
    3f36:	2e 96       	adiw	r28, 0x0e	; 14
    3f38:	bf ae       	std	Y+63, r11	; 0x3f
    3f3a:	ae ae       	std	Y+62, r10	; 0x3e
    3f3c:	2e 97       	sbiw	r28, 0x0e	; 14
    3f3e:	2f 96       	adiw	r28, 0x0f	; 15
    3f40:	8f ae       	std	Y+63, r8	; 0x3f
    3f42:	2f 97       	sbiw	r28, 0x0f	; 15
    bool noAutoInc = false;     // Flag set when transparent pixel was 'written'
    int16_t i, j, byteWidth = (w + 7) / 8;
    3f44:	c8 01       	movw	r24, r16
    3f46:	07 96       	adiw	r24, 0x07	; 7
    3f48:	97 fd       	sbrc	r25, 7
    3f4a:	07 96       	adiw	r24, 0x07	; 7
    3f4c:	9c 01       	movw	r18, r24
    3f4e:	73 e0       	ldi	r23, 0x03	; 3
    3f50:	35 95       	asr	r19
    3f52:	27 95       	ror	r18
    3f54:	7a 95       	dec	r23
    3f56:	e1 f7       	brne	.-8      	; 0x3f50 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x6a>
    3f58:	24 96       	adiw	r28, 0x04	; 4
    3f5a:	3f af       	std	Y+63, r19	; 0x3f
    3f5c:	2e af       	std	Y+62, r18	; 0x3e
    3f5e:	24 97       	sbiw	r28, 0x04	; 4
    int16_t wx0, wy0, wx1, wy1, wh;  // Window-position and size
	// int16_t ww;
    uint8_t byte, maskBit;
	byte = 0;
    maskBit = Xbit? 0x01:0x80;
    3f60:	a9 96       	adiw	r28, 0x29	; 41
    3f62:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f64:	a9 97       	sbiw	r28, 0x29	; 41
    3f66:	31 11       	cpse	r19, r1
    3f68:	05 c0       	rjmp	.+10     	; 0x3f74 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x8e>
    3f6a:	80 e8       	ldi	r24, 0x80	; 128
    3f6c:	22 96       	adiw	r28, 0x02	; 2
    3f6e:	8f af       	std	Y+63, r24	; 0x3f
    3f70:	22 97       	sbiw	r28, 0x02	; 2
    3f72:	04 c0       	rjmp	.+8      	; 0x3f7c <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x96>
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	22 96       	adiw	r28, 0x02	; 2
    3f78:	9f af       	std	Y+63, r25	; 0x3f
    3f7a:	22 97       	sbiw	r28, 0x02	; 2
    // adjust window hight/width to displaydimensions
    DB_PRINT( "DrawBitmap.. maxX=%d, maxY=%d", _maxX,_maxY );
    3f7c:	f3 01       	movw	r30, r6
    3f7e:	83 81       	ldd	r24, Z+3	; 0x03
    3f80:	8f 93       	push	r24
    3f82:	82 81       	ldd	r24, Z+2	; 0x02
    3f84:	8f 93       	push	r24
    3f86:	81 81       	ldd	r24, Z+1	; 0x01
    3f88:	8f 93       	push	r24
    3f8a:	80 81       	ld	r24, Z
    3f8c:	8f 93       	push	r24
    3f8e:	88 ee       	ldi	r24, 0xE8	; 232
    3f90:	91 e0       	ldi	r25, 0x01	; 1
    3f92:	9f 93       	push	r25
    3f94:	8f 93       	push	r24
    3f96:	8e 01       	movw	r16, r28
    3f98:	0f 5f       	subi	r16, 0xFF	; 255
    3f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9c:	1f 93       	push	r17
    3f9e:	0f 93       	push	r16
    3fa0:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <sprintf>
    3fa4:	b8 01       	movw	r22, r16
    3fa6:	8e e4       	ldi	r24, 0x4E	; 78
    3fa8:	93 e0       	ldi	r25, 0x03	; 3
    3faa:	0e 94 4b 11 	call	0x2296	; 0x2296 <_ZN5Print7printlnEPKc>
    wx0 = x < 0 ? 0 : x;
    3fae:	2d ad       	ldd	r18, Y+61	; 0x3d
    3fb0:	3e ad       	ldd	r19, Y+62	; 0x3e
    3fb2:	21 96       	adiw	r28, 0x01	; 1
    3fb4:	3f af       	std	Y+63, r19	; 0x3f
    3fb6:	2e af       	std	Y+62, r18	; 0x3e
    3fb8:	21 97       	sbiw	r28, 0x01	; 1
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	37 ff       	sbrs	r19, 7
    3fc6:	04 c0       	rjmp	.+8      	; 0x3fd0 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0xea>
    3fc8:	21 96       	adiw	r28, 0x01	; 1
    3fca:	1f ae       	std	Y+63, r1	; 0x3f
    3fcc:	1e ae       	std	Y+62, r1	; 0x3e
    3fce:	21 97       	sbiw	r28, 0x01	; 1
    wy0 = y < 0 ? 0 : y;
    3fd0:	a2 01       	movw	r20, r4
    3fd2:	57 fe       	sbrs	r5, 7
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0xf4>
    3fd6:	40 e0       	ldi	r20, 0x00	; 0
    3fd8:	50 e0       	ldi	r21, 0x00	; 0
    wx1 = (x + w > _maxX ?_maxX : x + w ) - 1;
    3fda:	f3 01       	movw	r30, r6
    3fdc:	20 81       	ld	r18, Z
    3fde:	31 81       	ldd	r19, Z+1	; 0x01
    3fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fe4:	82 0d       	add	r24, r2
    3fe6:	93 1d       	adc	r25, r3
    3fe8:	28 17       	cp	r18, r24
    3fea:	39 07       	cpc	r19, r25
    3fec:	08 f4       	brcc	.+2      	; 0x3ff0 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x10a>
    3fee:	c9 01       	movw	r24, r18
    3ff0:	9c 01       	movw	r18, r24
    3ff2:	21 50       	subi	r18, 0x01	; 1
    3ff4:	31 09       	sbc	r19, r1
    3ff6:	26 96       	adiw	r28, 0x06	; 6
    3ff8:	3f af       	std	Y+63, r19	; 0x3f
    3ffa:	2e af       	std	Y+62, r18	; 0x3e
    3ffc:	26 97       	sbiw	r28, 0x06	; 6
    wy1 = (y + h > _maxY ?_maxY : y + h ) - 1;
    3ffe:	f3 01       	movw	r30, r6
    4000:	82 81       	ldd	r24, Z+2	; 0x02
    4002:	93 81       	ldd	r25, Z+3	; 0x03
    4004:	92 01       	movw	r18, r4
    4006:	2e 0d       	add	r18, r14
    4008:	3f 1d       	adc	r19, r15
    400a:	82 17       	cp	r24, r18
    400c:	93 07       	cpc	r25, r19
    400e:	08 f4       	brcc	.+2      	; 0x4012 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x12c>
    4010:	9c 01       	movw	r18, r24
    wh  = wy1 - wy0 + 1;
    4012:	89 01       	movw	r16, r18
    4014:	01 50       	subi	r16, 0x01	; 1
    4016:	11 09       	sbc	r17, r1
    4018:	69 01       	movw	r12, r18
    401a:	c4 1a       	sub	r12, r20
    401c:	d5 0a       	sbc	r13, r21
    // ww  = wx1 - wx0 + 1;
    _setWindow(wx0, wy0, wx1, wy1, L2R_TopDown);
    401e:	66 e0       	ldi	r22, 0x06	; 6
    4020:	e6 2e       	mov	r14, r22
    4022:	26 96       	adiw	r28, 0x06	; 6
    4024:	2e ad       	ldd	r18, Y+62	; 0x3e
    4026:	3f ad       	ldd	r19, Y+63	; 0x3f
    4028:	26 97       	sbiw	r28, 0x06	; 6
    402a:	21 96       	adiw	r28, 0x01	; 1
    402c:	6e ad       	ldd	r22, Y+62	; 0x3e
    402e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4030:	21 97       	sbiw	r28, 0x01	; 1
    4032:	c3 01       	movw	r24, r6
    4034:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t>
    startWrite();
    4038:	c3 01       	movw	r24, r6
    403a:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN14TFT_22_ILI922510startWriteEv>
    for (j = y>=0?0:-y; j < (y>=0?0:-y)+wh; j++) {
    403e:	57 fe       	sbrs	r5, 7
    4040:	05 c0       	rjmp	.+10     	; 0x404c <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x166>
    4042:	aa 24       	eor	r10, r10
    4044:	bb 24       	eor	r11, r11
    4046:	a4 18       	sub	r10, r4
    4048:	b5 08       	sbc	r11, r5
    404a:	02 c0       	rjmp	.+4      	; 0x4050 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x16a>
    404c:	a1 2c       	mov	r10, r1
    404e:	b1 2c       	mov	r11, r1
    4050:	57 fe       	sbrs	r5, 7
    4052:	05 c0       	rjmp	.+10     	; 0x405e <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x178>
    4054:	ee 24       	eor	r14, r14
    4056:	ff 24       	eor	r15, r15
    4058:	e4 18       	sub	r14, r4
    405a:	f5 08       	sbc	r15, r5
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x17c>
    405e:	e1 2c       	mov	r14, r1
    4060:	f1 2c       	mov	r15, r1
    4062:	97 01       	movw	r18, r14
    4064:	2c 0d       	add	r18, r12
    4066:	3d 1d       	adc	r19, r13
    4068:	2c 96       	adiw	r28, 0x0c	; 12
    406a:	3f af       	std	Y+63, r19	; 0x3f
    406c:	2e af       	std	Y+62, r18	; 0x3e
    406e:	2c 97       	sbiw	r28, 0x0c	; 12
    4070:	24 96       	adiw	r28, 0x04	; 4
    4072:	8e ad       	ldd	r24, Y+62	; 0x3e
    4074:	9f ad       	ldd	r25, Y+63	; 0x3f
    4076:	24 97       	sbiw	r28, 0x04	; 4
    4078:	a8 9e       	mul	r10, r24
    407a:	40 01       	movw	r8, r0
    407c:	a9 9e       	mul	r10, r25
    407e:	90 0c       	add	r9, r0
    4080:	b8 9e       	mul	r11, r24
    4082:	90 0c       	add	r9, r0
    4084:	11 24       	eor	r1, r1
    4086:	f1 2c       	mov	r15, r1
    4088:	e1 2c       	mov	r14, r1
    408a:	2c 96       	adiw	r28, 0x0c	; 12
    408c:	ee ad       	ldd	r30, Y+62	; 0x3e
    408e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4090:	2c 97       	sbiw	r28, 0x0c	; 12
    4092:	ae 16       	cp	r10, r30
    4094:	bf 06       	cpc	r11, r31
    4096:	0c f0       	brlt	.+2      	; 0x409a <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1b4>
    4098:	94 c0       	rjmp	.+296    	; 0x41c2 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2dc>
    409a:	cd ac       	ldd	r12, Y+61	; 0x3d
    409c:	de ac       	ldd	r13, Y+62	; 0x3e
    409e:	00 e0       	ldi	r16, 0x00	; 0
    40a0:	10 e0       	ldi	r17, 0x00	; 0
            if (i & 7) { 
                if ( Xbit ) byte >>=1; else byte <<= 1; 
            }
            else {
                if ( progmem ) byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
                else           byte   = bitmap[j * byteWidth + i / 8];
    40a2:	28 96       	adiw	r28, 0x08	; 8
    40a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    40a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    40a8:	28 97       	sbiw	r28, 0x08	; 8
    40aa:	28 0d       	add	r18, r8
    40ac:	39 1d       	adc	r19, r9
    40ae:	61 96       	adiw	r28, 0x11	; 17
    40b0:	3f af       	std	Y+63, r19	; 0x3f
    40b2:	2e af       	std	Y+62, r18	; 0x3e
    40b4:	61 97       	sbiw	r28, 0x11	; 17
            if ( x+i >= wx0 && x+i <= wx1 ) {
                // write only if pixel is within window
                if (byte & maskBit) {
                    if (noAutoInc) {
                        //there was a transparent area, set pixelkoordinates again
                        drawPixel(x + i, y + j, color);
    40b6:	c5 01       	movw	r24, r10
    40b8:	84 0d       	add	r24, r4
    40ba:	95 1d       	adc	r25, r5
    40bc:	63 96       	adiw	r28, 0x13	; 19
    40be:	9f af       	std	Y+63, r25	; 0x3f
    40c0:	8e af       	std	Y+62, r24	; 0x3e
    40c2:	63 97       	sbiw	r28, 0x13	; 19
    wh  = wy1 - wy0 + 1;
    // ww  = wx1 - wx0 + 1;
    _setWindow(wx0, wy0, wx1, wy1, L2R_TopDown);
    startWrite();
    for (j = y>=0?0:-y; j < (y>=0?0:-y)+wh; j++) {
        for (i = 0; i < w; i++ ) {
    40c4:	02 15       	cp	r16, r2
    40c6:	13 05       	cpc	r17, r3
    40c8:	0c f0       	brlt	.+2      	; 0x40cc <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1e6>
    40ca:	71 c0       	rjmp	.+226    	; 0x41ae <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2c8>
            if (i & 7) { 
    40cc:	c8 01       	movw	r24, r16
    40ce:	87 70       	andi	r24, 0x07	; 7
    40d0:	99 27       	eor	r25, r25
    40d2:	89 2b       	or	r24, r25
    40d4:	49 f0       	breq	.+18     	; 0x40e8 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x202>
                if ( Xbit ) byte >>=1; else byte <<= 1; 
    40d6:	a9 96       	adiw	r28, 0x29	; 41
    40d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    40da:	a9 97       	sbiw	r28, 0x29	; 41
    40dc:	99 23       	and	r25, r25
    40de:	11 f0       	breq	.+4      	; 0x40e4 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1fe>
    40e0:	f6 94       	lsr	r15
    40e2:	28 c0       	rjmp	.+80     	; 0x4134 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x24e>
    40e4:	ff 0c       	add	r15, r15
    40e6:	26 c0       	rjmp	.+76     	; 0x4134 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x24e>
            }
            else {
                if ( progmem ) byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    40e8:	a8 96       	adiw	r28, 0x28	; 40
    40ea:	ef ad       	ldd	r30, Y+63	; 0x3f
    40ec:	a8 97       	sbiw	r28, 0x28	; 40
    40ee:	ee 23       	and	r30, r30
    40f0:	91 f0       	breq	.+36     	; 0x4116 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x230>
    40f2:	f8 01       	movw	r30, r16
    40f4:	17 fd       	sbrc	r17, 7
    40f6:	37 96       	adiw	r30, 0x07	; 7
    40f8:	33 e0       	ldi	r19, 0x03	; 3
    40fa:	f5 95       	asr	r31
    40fc:	e7 95       	ror	r30
    40fe:	3a 95       	dec	r19
    4100:	e1 f7       	brne	.-8      	; 0x40fa <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x214>
    4102:	e8 0d       	add	r30, r8
    4104:	f9 1d       	adc	r31, r9
    4106:	28 96       	adiw	r28, 0x08	; 8
    4108:	2e ad       	ldd	r18, Y+62	; 0x3e
    410a:	3f ad       	ldd	r19, Y+63	; 0x3f
    410c:	28 97       	sbiw	r28, 0x08	; 8
    410e:	e2 0f       	add	r30, r18
    4110:	f3 1f       	adc	r31, r19
    4112:	f4 90       	lpm	r15, Z
    4114:	0f c0       	rjmp	.+30     	; 0x4134 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x24e>
                else           byte   = bitmap[j * byteWidth + i / 8];
    4116:	c8 01       	movw	r24, r16
    4118:	17 fd       	sbrc	r17, 7
    411a:	07 96       	adiw	r24, 0x07	; 7
    411c:	23 e0       	ldi	r18, 0x03	; 3
    411e:	95 95       	asr	r25
    4120:	87 95       	ror	r24
    4122:	2a 95       	dec	r18
    4124:	e1 f7       	brne	.-8      	; 0x411e <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x238>
    4126:	61 96       	adiw	r28, 0x11	; 17
    4128:	ee ad       	ldd	r30, Y+62	; 0x3e
    412a:	ff ad       	ldd	r31, Y+63	; 0x3f
    412c:	61 97       	sbiw	r28, 0x11	; 17
    412e:	e8 0f       	add	r30, r24
    4130:	f9 1f       	adc	r31, r25
    4132:	f0 80       	ld	r15, Z
            }
            if ( x+i >= wx0 && x+i <= wx1 ) {
    4134:	21 96       	adiw	r28, 0x01	; 1
    4136:	8e ad       	ldd	r24, Y+62	; 0x3e
    4138:	9f ad       	ldd	r25, Y+63	; 0x3f
    413a:	21 97       	sbiw	r28, 0x01	; 1
    413c:	c8 16       	cp	r12, r24
    413e:	d9 06       	cpc	r13, r25
    4140:	84 f1       	brlt	.+96     	; 0x41a2 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
    4142:	26 96       	adiw	r28, 0x06	; 6
    4144:	ee ad       	ldd	r30, Y+62	; 0x3e
    4146:	ff ad       	ldd	r31, Y+63	; 0x3f
    4148:	26 97       	sbiw	r28, 0x06	; 6
    414a:	ec 15       	cp	r30, r12
    414c:	fd 05       	cpc	r31, r13
    414e:	4c f1       	brlt	.+82     	; 0x41a2 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
                // write only if pixel is within window
                if (byte & maskBit) {
    4150:	22 96       	adiw	r28, 0x02	; 2
    4152:	8f ad       	ldd	r24, Y+63	; 0x3f
    4154:	22 97       	sbiw	r28, 0x02	; 2
    4156:	8f 21       	and	r24, r15
    4158:	a9 f0       	breq	.+42     	; 0x4184 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x29e>
                    if (noAutoInc) {
    415a:	ee 20       	and	r14, r14
    415c:	71 f0       	breq	.+28     	; 0x417a <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x294>
                        //there was a transparent area, set pixelkoordinates again
                        drawPixel(x + i, y + j, color);
    415e:	2a 96       	adiw	r28, 0x0a	; 10
    4160:	2e ad       	ldd	r18, Y+62	; 0x3e
    4162:	3f ad       	ldd	r19, Y+63	; 0x3f
    4164:	2a 97       	sbiw	r28, 0x0a	; 10
    4166:	63 96       	adiw	r28, 0x13	; 19
    4168:	4e ad       	ldd	r20, Y+62	; 0x3e
    416a:	5f ad       	ldd	r21, Y+63	; 0x3f
    416c:	63 97       	sbiw	r28, 0x13	; 19
    416e:	b6 01       	movw	r22, r12
    4170:	c3 01       	movw	r24, r6
    4172:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14TFT_22_ILI92259drawPixelEjjj>
                        noAutoInc = false;
    4176:	e1 2c       	mov	r14, r1
    4178:	14 c0       	rjmp	.+40     	; 0x41a2 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
                    }
                    else  { 
                        _writeData16(color);
    417a:	2a 96       	adiw	r28, 0x0a	; 10
    417c:	6e ad       	ldd	r22, Y+62	; 0x3e
    417e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4180:	2a 97       	sbiw	r28, 0x0a	; 10
    4182:	09 c0       	rjmp	.+18     	; 0x4196 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2b0>
                    }
                }
                else  {
                    if (transparent) noAutoInc = true; // no autoincrement in transparent area!
    4184:	2f 96       	adiw	r28, 0x0f	; 15
    4186:	ff ad       	ldd	r31, Y+63	; 0x3f
    4188:	2f 97       	sbiw	r28, 0x0f	; 15
    418a:	f1 11       	cpse	r31, r1
    418c:	08 c0       	rjmp	.+16     	; 0x419e <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2b8>
                    else _writeData16( bg);
    418e:	2e 96       	adiw	r28, 0x0e	; 14
    4190:	6e ad       	ldd	r22, Y+62	; 0x3e
    4192:	7f ad       	ldd	r23, Y+63	; 0x3f
    4194:	2e 97       	sbiw	r28, 0x0e	; 14
    4196:	c3 01       	movw	r24, r6
    4198:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN14TFT_22_ILI922512_writeData16Ej>
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
                    else  { 
                        _writeData16(color);
                    }
                }
                else  {
                    if (transparent) noAutoInc = true; // no autoincrement in transparent area!
    419e:	ee 24       	eor	r14, r14
    41a0:	e3 94       	inc	r14
    wh  = wy1 - wy0 + 1;
    // ww  = wx1 - wx0 + 1;
    _setWindow(wx0, wy0, wx1, wy1, L2R_TopDown);
    startWrite();
    for (j = y>=0?0:-y; j < (y>=0?0:-y)+wh; j++) {
        for (i = 0; i < w; i++ ) {
    41a2:	0f 5f       	subi	r16, 0xFF	; 255
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	2f ef       	ldi	r18, 0xFF	; 255
    41a8:	c2 1a       	sub	r12, r18
    41aa:	d2 0a       	sbc	r13, r18
    41ac:	8b cf       	rjmp	.-234    	; 0x40c4 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1de>
    wy1 = (y + h > _maxY ?_maxY : y + h ) - 1;
    wh  = wy1 - wy0 + 1;
    // ww  = wx1 - wx0 + 1;
    _setWindow(wx0, wy0, wx1, wy1, L2R_TopDown);
    startWrite();
    for (j = y>=0?0:-y; j < (y>=0?0:-y)+wh; j++) {
    41ae:	3f ef       	ldi	r19, 0xFF	; 255
    41b0:	a3 1a       	sub	r10, r19
    41b2:	b3 0a       	sbc	r11, r19
    41b4:	24 96       	adiw	r28, 0x04	; 4
    41b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    41b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    41ba:	24 97       	sbiw	r28, 0x04	; 4
    41bc:	88 0e       	add	r8, r24
    41be:	99 1e       	adc	r9, r25
    41c0:	64 cf       	rjmp	.-312    	; 0x408a <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1a4>
                    else _writeData16( bg);
                }
            }
        }
    }
    endWrite();
    41c2:	c3 01       	movw	r24, r6
    41c4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN14TFT_22_ILI92258endWriteEv>
}
    41c8:	ce 5a       	subi	r28, 0xAE	; 174
    41ca:	df 4f       	sbci	r29, 0xFF	; 255
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	f8 94       	cli
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	0f be       	out	0x3f, r0	; 63
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	ff 90       	pop	r15
    41e0:	ef 90       	pop	r14
    41e2:	df 90       	pop	r13
    41e4:	cf 90       	pop	r12
    41e6:	bf 90       	pop	r11
    41e8:	af 90       	pop	r10
    41ea:	9f 90       	pop	r9
    41ec:	8f 90       	pop	r8
    41ee:	7f 90       	pop	r7
    41f0:	6f 90       	pop	r6
    41f2:	5f 90       	pop	r5
    41f4:	4f 90       	pop	r4
    41f6:	3f 90       	pop	r3
    41f8:	2f 90       	pop	r2
    41fa:	08 95       	ret

000041fc <_ZN14TFT_22_ILI922510drawBitmapEiiPKhiij>:


// Draw a 1-bit image (bitmap) at the specified (x,y) position from the
// provided bitmap buffer (must be PROGMEM memory) using the specified
// foreground color (unset bits are transparent).
void TFT_22_ILI9225::drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
    41fc:	8f 92       	push	r8
    41fe:	af 92       	push	r10
    4200:	bf 92       	push	r11
    4202:	cf 92       	push	r12
    4204:	df 92       	push	r13
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    _drawBitmap( x,  y, bitmap,  w,  h, color,  0, true, true, false );
    420e:	1f 92       	push	r1
    4210:	e1 e0       	ldi	r30, 0x01	; 1
    4212:	ef 93       	push	r30
    4214:	88 24       	eor	r8, r8
    4216:	83 94       	inc	r8
    4218:	a1 2c       	mov	r10, r1
    421a:	b1 2c       	mov	r11, r1
    421c:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb>
}
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	df 90       	pop	r13
    422e:	cf 90       	pop	r12
    4230:	bf 90       	pop	r11
    4232:	af 90       	pop	r10
    4234:	8f 90       	pop	r8
    4236:	08 95       	ret

00004238 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    4238:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    4242:	82 1b       	sub	r24, r18
    4244:	91 09       	sbc	r25, r1
    4246:	08 95       	ret

00004248 <_ZN7TwoWire4readEv>:
    4248:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    424c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    4250:	98 17       	cp	r25, r24
    4252:	50 f4       	brcc	.+20     	; 0x4268 <_ZN7TwoWire4readEv+0x20>
    4254:	e9 2f       	mov	r30, r25
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	e6 5d       	subi	r30, 0xD6	; 214
    425a:	fb 4f       	sbci	r31, 0xFB	; 251
    425c:	20 81       	ld	r18, Z
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	9f 5f       	subi	r25, 0xFF	; 255
    4262:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    4266:	02 c0       	rjmp	.+4      	; 0x426c <_ZN7TwoWire4readEv+0x24>
    4268:	2f ef       	ldi	r18, 0xFF	; 255
    426a:	3f ef       	ldi	r19, 0xFF	; 255
    426c:	c9 01       	movw	r24, r18
    426e:	08 95       	ret

00004270 <_ZN7TwoWire4peekEv>:
    4270:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    4274:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    4278:	e8 17       	cp	r30, r24
    427a:	30 f4       	brcc	.+12     	; 0x4288 <_ZN7TwoWire4peekEv+0x18>
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	e6 5d       	subi	r30, 0xD6	; 214
    4280:	fb 4f       	sbci	r31, 0xFB	; 251
    4282:	80 81       	ld	r24, Z
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	08 95       	ret
    4288:	8f ef       	ldi	r24, 0xFF	; 255
    428a:	9f ef       	ldi	r25, 0xFF	; 255
    428c:	08 95       	ret

0000428e <_ZN7TwoWire5flushEv>:
    428e:	08 95       	ret

00004290 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4290:	cf 93       	push	r28
    4292:	df 93       	push	r29
    4294:	ec 01       	movw	r28, r24
    4296:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_ZN7TwoWire14user_onReceiveE>
    429a:	f0 91 01 04 	lds	r31, 0x0401	; 0x800401 <_ZN7TwoWire14user_onReceiveE+0x1>
    429e:	30 97       	sbiw	r30, 0x00	; 0
    42a0:	f1 f0       	breq	.+60     	; 0x42de <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    42a2:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    42a6:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    42aa:	98 17       	cp	r25, r24
    42ac:	c0 f0       	brcs	.+48     	; 0x42de <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	29 2f       	mov	r18, r25
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	26 17       	cp	r18, r22
    42b6:	37 07       	cpc	r19, r23
    42b8:	54 f4       	brge	.+20     	; 0x42ce <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    42ba:	de 01       	movw	r26, r28
    42bc:	a2 0f       	add	r26, r18
    42be:	b3 1f       	adc	r27, r19
    42c0:	4c 91       	ld	r20, X
    42c2:	d9 01       	movw	r26, r18
    42c4:	a6 5d       	subi	r26, 0xD6	; 214
    42c6:	bb 4f       	sbci	r27, 0xFB	; 251
    42c8:	4c 93       	st	X, r20
    42ca:	9f 5f       	subi	r25, 0xFF	; 255
    42cc:	f1 cf       	rjmp	.-30     	; 0x42b0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    42ce:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    42d2:	60 93 28 04 	sts	0x0428, r22	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    42d6:	cb 01       	movw	r24, r22
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	09 94       	ijmp
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	08 95       	ret

000042e4 <_ZN7TwoWire16onRequestServiceEv>:
    42e4:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_ZN7TwoWire14user_onRequestE>
    42e8:	f0 91 03 04 	lds	r31, 0x0403	; 0x800403 <_ZN7TwoWire14user_onRequestE+0x1>
    42ec:	30 97       	sbiw	r30, 0x00	; 0
    42ee:	29 f0       	breq	.+10     	; 0x42fa <_ZN7TwoWire16onRequestServiceEv+0x16>
    42f0:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZN7TwoWire13txBufferIndexE>
    42f4:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    42f8:	09 94       	ijmp
    42fa:	08 95       	ret

000042fc <_ZN7TwoWire5writeEPKhj>:
    42fc:	cf 92       	push	r12
    42fe:	df 92       	push	r13
    4300:	ef 92       	push	r14
    4302:	ff 92       	push	r15
    4304:	0f 93       	push	r16
    4306:	1f 93       	push	r17
    4308:	cf 93       	push	r28
    430a:	df 93       	push	r29
    430c:	7c 01       	movw	r14, r24
    430e:	cb 01       	movw	r24, r22
    4310:	8a 01       	movw	r16, r20
    4312:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <_ZN7TwoWire12transmittingE>
    4316:	22 23       	and	r18, r18
    4318:	89 f0       	breq	.+34     	; 0x433c <_ZN7TwoWire5writeEPKhj+0x40>
    431a:	eb 01       	movw	r28, r22
    431c:	6b 01       	movw	r12, r22
    431e:	c4 0e       	add	r12, r20
    4320:	d5 1e       	adc	r13, r21
    4322:	cc 15       	cp	r28, r12
    4324:	dd 05       	cpc	r29, r13
    4326:	69 f0       	breq	.+26     	; 0x4342 <_ZN7TwoWire5writeEPKhj+0x46>
    4328:	69 91       	ld	r22, Y+
    432a:	d7 01       	movw	r26, r14
    432c:	ed 91       	ld	r30, X+
    432e:	fc 91       	ld	r31, X
    4330:	01 90       	ld	r0, Z+
    4332:	f0 81       	ld	r31, Z
    4334:	e0 2d       	mov	r30, r0
    4336:	c7 01       	movw	r24, r14
    4338:	09 95       	icall
    433a:	f3 cf       	rjmp	.-26     	; 0x4322 <_ZN7TwoWire5writeEPKhj+0x26>
    433c:	64 2f       	mov	r22, r20
    433e:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_transmit>
    4342:	c8 01       	movw	r24, r16
    4344:	df 91       	pop	r29
    4346:	cf 91       	pop	r28
    4348:	1f 91       	pop	r17
    434a:	0f 91       	pop	r16
    434c:	ff 90       	pop	r15
    434e:	ef 90       	pop	r14
    4350:	df 90       	pop	r13
    4352:	cf 90       	pop	r12
    4354:	08 95       	ret

00004356 <_ZN7TwoWire5writeEh>:
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	1f 92       	push	r1
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
    4360:	69 83       	std	Y+1, r22	; 0x01
    4362:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <_ZN7TwoWire12transmittingE>
    4366:	22 23       	and	r18, r18
    4368:	d1 f0       	breq	.+52     	; 0x439e <_ZN7TwoWire5writeEh+0x48>
    436a:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    436e:	20 32       	cpi	r18, 0x20	; 32
    4370:	40 f0       	brcs	.+16     	; 0x4382 <_ZN7TwoWire5writeEh+0x2c>
    4372:	21 e0       	ldi	r18, 0x01	; 1
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	fc 01       	movw	r30, r24
    4378:	33 83       	std	Z+3, r19	; 0x03
    437a:	22 83       	std	Z+2, r18	; 0x02
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	15 c0       	rjmp	.+42     	; 0x43ac <_ZN7TwoWire5writeEh+0x56>
    4382:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <_ZN7TwoWire13txBufferIndexE>
    4386:	e8 2f       	mov	r30, r24
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	e9 5f       	subi	r30, 0xF9	; 249
    438c:	fb 4f       	sbci	r31, 0xFB	; 251
    438e:	99 81       	ldd	r25, Y+1	; 0x01
    4390:	90 83       	st	Z, r25
    4392:	8f 5f       	subi	r24, 0xFF	; 255
    4394:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZN7TwoWire13txBufferIndexE>
    4398:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    439c:	05 c0       	rjmp	.+10     	; 0x43a8 <_ZN7TwoWire5writeEh+0x52>
    439e:	61 e0       	ldi	r22, 0x01	; 1
    43a0:	ce 01       	movw	r24, r28
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_transmit>
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0f 90       	pop	r0
    43ae:	df 91       	pop	r29
    43b0:	cf 91       	pop	r28
    43b2:	08 95       	ret

000043b4 <_ZN7TwoWireC1Ev>:
    43b4:	fc 01       	movw	r30, r24
    43b6:	13 82       	std	Z+3, r1	; 0x03
    43b8:	12 82       	std	Z+2, r1	; 0x02
    43ba:	88 ee       	ldi	r24, 0xE8	; 232
    43bc:	93 e0       	ldi	r25, 0x03	; 3
    43be:	a0 e0       	ldi	r26, 0x00	; 0
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	84 83       	std	Z+4, r24	; 0x04
    43c4:	95 83       	std	Z+5, r25	; 0x05
    43c6:	a6 83       	std	Z+6, r26	; 0x06
    43c8:	b7 83       	std	Z+7, r27	; 0x07
    43ca:	8a e0       	ldi	r24, 0x0A	; 10
    43cc:	92 e0       	ldi	r25, 0x02	; 2
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	80 83       	st	Z, r24
    43d2:	08 95       	ret

000043d4 <_ZN7TwoWire5beginEv>:
    43d4:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    43d8:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    43dc:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZN7TwoWire13txBufferIndexE>
    43e0:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    43e4:	0e 94 b2 23 	call	0x4764	; 0x4764 <twi_init>
    43e8:	82 e7       	ldi	r24, 0x72	; 114
    43ea:	91 e2       	ldi	r25, 0x21	; 33
    43ec:	0e 94 1e 24 	call	0x483c	; 0x483c <twi_attachSlaveTxEvent>
    43f0:	88 e4       	ldi	r24, 0x48	; 72
    43f2:	91 e2       	ldi	r25, 0x21	; 33
    43f4:	0c 94 19 24 	jmp	0x4832	; 0x4832 <twi_attachSlaveRxEvent>

000043f8 <_ZN7TwoWire8setClockEm>:
    43f8:	cb 01       	movw	r24, r22
    43fa:	ba 01       	movw	r22, r20
    43fc:	0c 94 dd 23 	jmp	0x47ba	; 0x47ba <twi_setFrequency>

00004400 <_ZN7TwoWire17beginTransmissionEh>:
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <_ZN7TwoWire12transmittingE>
    4406:	60 93 27 04 	sts	0x0427, r22	; 0x800427 <_ZN7TwoWire9txAddressE>
    440a:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZN7TwoWire13txBufferIndexE>
    440e:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    4412:	08 95       	ret

00004414 <_ZN7TwoWire15endTransmissionEh>:
    4414:	0f 93       	push	r16
    4416:	06 2f       	mov	r16, r22
    4418:	21 e0       	ldi	r18, 0x01	; 1
    441a:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    441e:	67 e0       	ldi	r22, 0x07	; 7
    4420:	74 e0       	ldi	r23, 0x04	; 4
    4422:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_ZN7TwoWire9txAddressE>
    4426:	0e 94 28 25 	call	0x4a50	; 0x4a50 <twi_writeTo>
    442a:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZN7TwoWire13txBufferIndexE>
    442e:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZN7TwoWire14txBufferLengthE>
    4432:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZN7TwoWire12transmittingE>
    4436:	0f 91       	pop	r16
    4438:	08 95       	ret

0000443a <_ZN7TwoWire11requestFromEhhmhh>:
    443a:	4f 92       	push	r4
    443c:	5f 92       	push	r5
    443e:	6f 92       	push	r6
    4440:	7f 92       	push	r7
    4442:	af 92       	push	r10
    4444:	bf 92       	push	r11
    4446:	cf 92       	push	r12
    4448:	ef 92       	push	r14
    444a:	ff 92       	push	r15
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	5c 01       	movw	r10, r24
    4456:	f6 2e       	mov	r15, r22
    4458:	d4 2f       	mov	r29, r20
    445a:	28 01       	movw	r4, r16
    445c:	39 01       	movw	r6, r18
    445e:	ee 20       	and	r14, r14
    4460:	21 f1       	breq	.+72     	; 0x44aa <_ZN7TwoWire11requestFromEhhmhh+0x70>
    4462:	0e 94 00 22 	call	0x4400	; 0x4400 <_ZN7TwoWire17beginTransmissionEh>
    4466:	ce 2d       	mov	r28, r14
    4468:	c4 30       	cpi	r28, 0x04	; 4
    446a:	08 f0       	brcs	.+2      	; 0x446e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    446c:	c3 e0       	ldi	r28, 0x03	; 3
    446e:	c1 50       	subi	r28, 0x01	; 1
    4470:	c0 f0       	brcs	.+48     	; 0x44a2 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    4472:	28 e0       	ldi	r18, 0x08	; 8
    4474:	c2 9f       	mul	r28, r18
    4476:	c0 01       	movw	r24, r0
    4478:	11 24       	eor	r1, r1
    447a:	a3 01       	movw	r20, r6
    447c:	92 01       	movw	r18, r4
    447e:	04 c0       	rjmp	.+8      	; 0x4488 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    4480:	56 95       	lsr	r21
    4482:	47 95       	ror	r20
    4484:	37 95       	ror	r19
    4486:	27 95       	ror	r18
    4488:	8a 95       	dec	r24
    448a:	d2 f7       	brpl	.-12     	; 0x4480 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    448c:	ca 01       	movw	r24, r20
    448e:	b9 01       	movw	r22, r18
    4490:	d5 01       	movw	r26, r10
    4492:	ed 91       	ld	r30, X+
    4494:	fc 91       	ld	r31, X
    4496:	01 90       	ld	r0, Z+
    4498:	f0 81       	ld	r31, Z
    449a:	e0 2d       	mov	r30, r0
    449c:	c5 01       	movw	r24, r10
    449e:	09 95       	icall
    44a0:	e6 cf       	rjmp	.-52     	; 0x446e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    44a2:	60 e0       	ldi	r22, 0x00	; 0
    44a4:	c5 01       	movw	r24, r10
    44a6:	0e 94 0a 22 	call	0x4414	; 0x4414 <_ZN7TwoWire15endTransmissionEh>
    44aa:	4d 2f       	mov	r20, r29
    44ac:	d1 32       	cpi	r29, 0x21	; 33
    44ae:	08 f0       	brcs	.+2      	; 0x44b2 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    44b0:	40 e2       	ldi	r20, 0x20	; 32
    44b2:	2c 2d       	mov	r18, r12
    44b4:	6a e2       	ldi	r22, 0x2A	; 42
    44b6:	74 e0       	ldi	r23, 0x04	; 4
    44b8:	8f 2d       	mov	r24, r15
    44ba:	0e 94 3f 24 	call	0x487e	; 0x487e <twi_readFrom>
    44be:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire13rxBufferIndexE>
    44c2:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <_ZN7TwoWire14rxBufferLengthE>
    44c6:	df 91       	pop	r29
    44c8:	cf 91       	pop	r28
    44ca:	1f 91       	pop	r17
    44cc:	0f 91       	pop	r16
    44ce:	ff 90       	pop	r15
    44d0:	ef 90       	pop	r14
    44d2:	cf 90       	pop	r12
    44d4:	bf 90       	pop	r11
    44d6:	af 90       	pop	r10
    44d8:	7f 90       	pop	r7
    44da:	6f 90       	pop	r6
    44dc:	5f 90       	pop	r5
    44de:	4f 90       	pop	r4
    44e0:	08 95       	ret

000044e2 <_ZN7TwoWire11requestFromEhhh>:
    44e2:	cf 92       	push	r12
    44e4:	ef 92       	push	r14
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
    44ea:	c2 2e       	mov	r12, r18
    44ec:	e1 2c       	mov	r14, r1
    44ee:	00 e0       	ldi	r16, 0x00	; 0
    44f0:	10 e0       	ldi	r17, 0x00	; 0
    44f2:	98 01       	movw	r18, r16
    44f4:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN7TwoWire11requestFromEhhmhh>
    44f8:	1f 91       	pop	r17
    44fa:	0f 91       	pop	r16
    44fc:	ef 90       	pop	r14
    44fe:	cf 90       	pop	r12
    4500:	08 95       	ret

00004502 <_ZN7TwoWire11requestFromEhh>:
    4502:	21 e0       	ldi	r18, 0x01	; 1
    4504:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <_ZN7TwoWire11requestFromEhhh>

00004508 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4508:	84 ef       	ldi	r24, 0xF4	; 244
    450a:	93 e0       	ldi	r25, 0x03	; 3
    450c:	0c 94 da 21 	jmp	0x43b4	; 0x43b4 <_ZN7TwoWireC1Ev>

00004510 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4510:	08 95       	ret

00004512 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    4512:	1f 93       	push	r17
    4514:	cf 93       	push	r28
    4516:	df 93       	push	r29
    4518:	18 2f       	mov	r17, r24
    451a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    451c:	61 e0       	ldi	r22, 0x01	; 1
    451e:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
	if (val == 0)
    4522:	20 97       	sbiw	r28, 0x00	; 0
    4524:	11 f4       	brne	.+4      	; 0x452a <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    4526:	60 e0       	ldi	r22, 0x00	; 0
    4528:	04 c0       	rjmp	.+8      	; 0x4532 <analogWrite+0x20>
	}
	else if (val == 255)
    452a:	cf 3f       	cpi	r28, 0xFF	; 255
    452c:	d1 05       	cpc	r29, r1
    452e:	39 f4       	brne	.+14     	; 0x453e <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    4530:	61 e0       	ldi	r22, 0x01	; 1
    4532:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    453a:	0c 94 4d 23 	jmp	0x469a	; 0x469a <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    453e:	e1 2f       	mov	r30, r17
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	ee 50       	subi	r30, 0x0E	; 14
    4544:	fc 4e       	sbci	r31, 0xEC	; 236
    4546:	e4 91       	lpm	r30, Z
    4548:	e3 30       	cpi	r30, 0x03	; 3
    454a:	f9 f0       	breq	.+62     	; 0x458a <analogWrite+0x78>
    454c:	48 f4       	brcc	.+18     	; 0x4560 <analogWrite+0x4e>
    454e:	e1 30       	cpi	r30, 0x01	; 1
    4550:	b9 f0       	breq	.+46     	; 0x4580 <analogWrite+0x6e>
    4552:	e2 30       	cpi	r30, 0x02	; 2
    4554:	a1 f5       	brne	.+104    	; 0x45be <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    4556:	84 b5       	in	r24, 0x24	; 36
    4558:	80 62       	ori	r24, 0x20	; 32
    455a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    455c:	c8 bd       	out	0x28, r28	; 40
				break;
    455e:	34 c0       	rjmp	.+104    	; 0x45c8 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    4560:	e7 30       	cpi	r30, 0x07	; 7
    4562:	e9 f0       	breq	.+58     	; 0x459e <analogWrite+0x8c>
    4564:	e8 30       	cpi	r30, 0x08	; 8
    4566:	19 f1       	breq	.+70     	; 0x45ae <analogWrite+0x9c>
    4568:	e4 30       	cpi	r30, 0x04	; 4
    456a:	49 f5       	brne	.+82     	; 0x45be <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    456c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    4570:	80 62       	ori	r24, 0x20	; 32
    4572:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1B = val; // set pwm duty
    4576:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    457a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
    457e:	24 c0       	rjmp	.+72     	; 0x45c8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    4580:	84 b5       	in	r24, 0x24	; 36
    4582:	80 68       	ori	r24, 0x80	; 128
    4584:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    4586:	c7 bd       	out	0x27, r28	; 39
				break;
    4588:	1f c0       	rjmp	.+62     	; 0x45c8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    458a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    458e:	80 68       	ori	r24, 0x80	; 128
    4590:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1A = val; // set pwm duty
    4594:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    4598:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
    459c:	15 c0       	rjmp	.+42     	; 0x45c8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    459e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    45a2:	80 68       	ori	r24, 0x80	; 128
    45a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2A = val; // set pwm duty
    45a8:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
    45ac:	0d c0       	rjmp	.+26     	; 0x45c8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    45ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    45b2:	80 62       	ori	r24, 0x20	; 32
    45b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2B = val; // set pwm duty
    45b8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
    45bc:	05 c0       	rjmp	.+10     	; 0x45c8 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    45be:	c0 38       	cpi	r28, 0x80	; 128
    45c0:	d1 05       	cpc	r29, r1
    45c2:	0c f0       	brlt	.+2      	; 0x45c6 <analogWrite+0xb4>
    45c4:	b5 cf       	rjmp	.-150    	; 0x4530 <analogWrite+0x1e>
    45c6:	af cf       	rjmp	.-162    	; 0x4526 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	08 95       	ret

000045d0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    45d0:	83 30       	cpi	r24, 0x03	; 3
    45d2:	81 f0       	breq	.+32     	; 0x45f4 <turnOffPWM+0x24>
    45d4:	28 f4       	brcc	.+10     	; 0x45e0 <turnOffPWM+0x10>
    45d6:	81 30       	cpi	r24, 0x01	; 1
    45d8:	99 f0       	breq	.+38     	; 0x4600 <turnOffPWM+0x30>
    45da:	82 30       	cpi	r24, 0x02	; 2
    45dc:	a1 f0       	breq	.+40     	; 0x4606 <turnOffPWM+0x36>
    45de:	08 95       	ret
    45e0:	87 30       	cpi	r24, 0x07	; 7
    45e2:	a9 f0       	breq	.+42     	; 0x460e <turnOffPWM+0x3e>
    45e4:	88 30       	cpi	r24, 0x08	; 8
    45e6:	b9 f0       	breq	.+46     	; 0x4616 <turnOffPWM+0x46>
    45e8:	84 30       	cpi	r24, 0x04	; 4
    45ea:	d1 f4       	brne	.+52     	; 0x4620 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    45ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    45f0:	8f 7d       	andi	r24, 0xDF	; 223
    45f2:	03 c0       	rjmp	.+6      	; 0x45fa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    45f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    45f8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    45fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    45fe:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4600:	84 b5       	in	r24, 0x24	; 36
    4602:	8f 77       	andi	r24, 0x7F	; 127
    4604:	02 c0       	rjmp	.+4      	; 0x460a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4606:	84 b5       	in	r24, 0x24	; 36
    4608:	8f 7d       	andi	r24, 0xDF	; 223
    460a:	84 bd       	out	0x24, r24	; 36
    460c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    460e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    4612:	8f 77       	andi	r24, 0x7F	; 127
    4614:	03 c0       	rjmp	.+6      	; 0x461c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4616:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    461a:	8f 7d       	andi	r24, 0xDF	; 223
    461c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    4620:	08 95       	ret

00004622 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4622:	cf 93       	push	r28
    4624:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	fc 01       	movw	r30, r24
    462a:	ea 5f       	subi	r30, 0xFA	; 250
    462c:	fb 4e       	sbci	r31, 0xEB	; 235
    462e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4630:	fc 01       	movw	r30, r24
    4632:	e6 5e       	subi	r30, 0xE6	; 230
    4634:	fb 4e       	sbci	r31, 0xEB	; 235
    4636:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4638:	88 23       	and	r24, r24
    463a:	61 f1       	breq	.+88     	; 0x4694 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	88 0f       	add	r24, r24
    4640:	99 1f       	adc	r25, r25
    4642:	fc 01       	movw	r30, r24
    4644:	e8 5c       	subi	r30, 0xC8	; 200
    4646:	fb 4e       	sbci	r31, 0xEB	; 235
    4648:	c5 91       	lpm	r28, Z+
    464a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    464c:	fc 01       	movw	r30, r24
    464e:	e2 5d       	subi	r30, 0xD2	; 210
    4650:	fb 4e       	sbci	r31, 0xEB	; 235
    4652:	a5 91       	lpm	r26, Z+
    4654:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4656:	61 11       	cpse	r22, r1
    4658:	09 c0       	rjmp	.+18     	; 0x466c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    465a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    465c:	f8 94       	cli
		*reg &= ~bit;
    465e:	88 81       	ld	r24, Y
    4660:	20 95       	com	r18
    4662:	82 23       	and	r24, r18
    4664:	88 83       	st	Y, r24
		*out &= ~bit;
    4666:	ec 91       	ld	r30, X
    4668:	2e 23       	and	r18, r30
    466a:	0b c0       	rjmp	.+22     	; 0x4682 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    466c:	62 30       	cpi	r22, 0x02	; 2
    466e:	61 f4       	brne	.+24     	; 0x4688 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4670:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4672:	f8 94       	cli
		*reg &= ~bit;
    4674:	88 81       	ld	r24, Y
    4676:	32 2f       	mov	r19, r18
    4678:	30 95       	com	r19
    467a:	83 23       	and	r24, r19
    467c:	88 83       	st	Y, r24
		*out |= bit;
    467e:	ec 91       	ld	r30, X
    4680:	2e 2b       	or	r18, r30
    4682:	2c 93       	st	X, r18
		SREG = oldSREG;
    4684:	9f bf       	out	0x3f, r25	; 63
    4686:	06 c0       	rjmp	.+12     	; 0x4694 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4688:	8f b7       	in	r24, 0x3f	; 63
                cli();
    468a:	f8 94       	cli
		*reg |= bit;
    468c:	e8 81       	ld	r30, Y
    468e:	2e 2b       	or	r18, r30
    4690:	28 83       	st	Y, r18
		SREG = oldSREG;
    4692:	8f bf       	out	0x3f, r24	; 63
	}
}
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

0000469a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    469a:	1f 93       	push	r17
    469c:	cf 93       	push	r28
    469e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    46a0:	28 2f       	mov	r18, r24
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	f9 01       	movw	r30, r18
    46a6:	ee 50       	subi	r30, 0x0E	; 14
    46a8:	fc 4e       	sbci	r31, 0xEC	; 236
    46aa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    46ac:	f9 01       	movw	r30, r18
    46ae:	ea 5f       	subi	r30, 0xFA	; 250
    46b0:	fb 4e       	sbci	r31, 0xEB	; 235
    46b2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    46b4:	f9 01       	movw	r30, r18
    46b6:	e6 5e       	subi	r30, 0xE6	; 230
    46b8:	fb 4e       	sbci	r31, 0xEB	; 235
    46ba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    46bc:	cc 23       	and	r28, r28
    46be:	c1 f0       	breq	.+48     	; 0x46f0 <digitalWrite+0x56>
    46c0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    46c2:	81 11       	cpse	r24, r1
    46c4:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <turnOffPWM>

	out = portOutputRegister(port);
    46c8:	ec 2f       	mov	r30, r28
    46ca:	f0 e0       	ldi	r31, 0x00	; 0
    46cc:	ee 0f       	add	r30, r30
    46ce:	ff 1f       	adc	r31, r31
    46d0:	e2 5d       	subi	r30, 0xD2	; 210
    46d2:	fb 4e       	sbci	r31, 0xEB	; 235
    46d4:	a5 91       	lpm	r26, Z+
    46d6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    46d8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    46da:	f8 94       	cli

	if (val == LOW) {
    46dc:	11 11       	cpse	r17, r1
    46de:	04 c0       	rjmp	.+8      	; 0x46e8 <digitalWrite+0x4e>
		*out &= ~bit;
    46e0:	8c 91       	ld	r24, X
    46e2:	d0 95       	com	r29
    46e4:	d8 23       	and	r29, r24
    46e6:	02 c0       	rjmp	.+4      	; 0x46ec <digitalWrite+0x52>
	} else {
		*out |= bit;
    46e8:	ec 91       	ld	r30, X
    46ea:	de 2b       	or	r29, r30
    46ec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    46ee:	9f bf       	out	0x3f, r25	; 63
}
    46f0:	df 91       	pop	r29
    46f2:	cf 91       	pop	r28
    46f4:	1f 91       	pop	r17
    46f6:	08 95       	ret

000046f8 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    46f8:	cf 93       	push	r28
  uint8_t sreg = SREG;
    46fa:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    46fc:	f8 94       	cli
  if (!initialized) {
    46fe:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZN8SPIClass11initializedE>
    4702:	81 11       	cpse	r24, r1
    4704:	27 c0       	rjmp	.+78     	; 0x4754 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4706:	e4 e2       	ldi	r30, 0x24	; 36
    4708:	f4 e1       	ldi	r31, 0x14	; 20
    470a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    470c:	e0 e1       	ldi	r30, 0x10	; 16
    470e:	f4 e1       	ldi	r31, 0x14	; 20
    4710:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4712:	e8 2f       	mov	r30, r24
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	ee 0f       	add	r30, r30
    4718:	ff 1f       	adc	r31, r31
    471a:	e8 5c       	subi	r30, 0xC8	; 200
    471c:	fb 4e       	sbci	r31, 0xEB	; 235
    471e:	a5 91       	lpm	r26, Z+
    4720:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4722:	ec 91       	ld	r30, X
    4724:	e9 23       	and	r30, r25
    4726:	21 f4       	brne	.+8      	; 0x4730 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4728:	61 e0       	ldi	r22, 0x01	; 1
    472a:	8a e0       	ldi	r24, 0x0A	; 10
    472c:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4730:	61 e0       	ldi	r22, 0x01	; 1
    4732:	8a e0       	ldi	r24, 0x0A	; 10
    4734:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4738:	8c b5       	in	r24, 0x2c	; 44
    473a:	80 61       	ori	r24, 0x10	; 16
    473c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    473e:	8c b5       	in	r24, 0x2c	; 44
    4740:	80 64       	ori	r24, 0x40	; 64
    4742:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4744:	61 e0       	ldi	r22, 0x01	; 1
    4746:	8d e0       	ldi	r24, 0x0D	; 13
    4748:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
    pinMode(MOSI, OUTPUT);
    474c:	61 e0       	ldi	r22, 0x01	; 1
    474e:	8b e0       	ldi	r24, 0x0B	; 11
    4750:	0e 94 11 23 	call	0x4622	; 0x4622 <pinMode>
  }
  initialized++; // reference count
    4754:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZN8SPIClass11initializedE>
    4758:	8f 5f       	subi	r24, 0xFF	; 255
    475a:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZN8SPIClass11initializedE>
  SREG = sreg;
    475e:	cf bf       	out	0x3f, r28	; 63
}
    4760:	cf 91       	pop	r28
    4762:	08 95       	ret

00004764 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4764:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_state>
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <twi_sendStop>
    476e:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <twi_inRepStart>
    4772:	61 e0       	ldi	r22, 0x01	; 1
    4774:	82 e1       	ldi	r24, 0x12	; 18
    4776:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    477a:	61 e0       	ldi	r22, 0x01	; 1
    477c:	83 e1       	ldi	r24, 0x13	; 19
    477e:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    4782:	e9 eb       	ldi	r30, 0xB9	; 185
    4784:	f0 e0       	ldi	r31, 0x00	; 0
    4786:	80 81       	ld	r24, Z
    4788:	8e 7f       	andi	r24, 0xFE	; 254
    478a:	80 83       	st	Z, r24
    478c:	80 81       	ld	r24, Z
    478e:	8d 7f       	andi	r24, 0xFD	; 253
    4790:	80 83       	st	Z, r24
    4792:	88 e4       	ldi	r24, 0x48	; 72
    4794:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4798:	85 e4       	ldi	r24, 0x45	; 69
    479a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    479e:	08 95       	ret

000047a0 <twi_disable>:
    47a0:	ec eb       	ldi	r30, 0xBC	; 188
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	80 81       	ld	r24, Z
    47a6:	8a 7b       	andi	r24, 0xBA	; 186
    47a8:	80 83       	st	Z, r24
    47aa:	60 e0       	ldi	r22, 0x00	; 0
    47ac:	82 e1       	ldi	r24, 0x12	; 18
    47ae:	0e 94 4d 23 	call	0x469a	; 0x469a <digitalWrite>
    47b2:	60 e0       	ldi	r22, 0x00	; 0
    47b4:	83 e1       	ldi	r24, 0x13	; 19
    47b6:	0c 94 4d 23 	jmp	0x469a	; 0x469a <digitalWrite>

000047ba <twi_setFrequency>:
    47ba:	9b 01       	movw	r18, r22
    47bc:	ac 01       	movw	r20, r24
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	74 e2       	ldi	r23, 0x24	; 36
    47c2:	84 ef       	ldi	r24, 0xF4	; 244
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__udivmodsi4>
    47ca:	da 01       	movw	r26, r20
    47cc:	c9 01       	movw	r24, r18
    47ce:	40 97       	sbiw	r24, 0x10	; 16
    47d0:	a1 09       	sbc	r26, r1
    47d2:	b1 09       	sbc	r27, r1
    47d4:	b6 95       	lsr	r27
    47d6:	a7 95       	ror	r26
    47d8:	97 95       	ror	r25
    47da:	87 95       	ror	r24
    47dc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    47e0:	08 95       	ret

000047e2 <twi_transmit>:
    47e2:	40 91 70 04 	lds	r20, 0x0470	; 0x800470 <twi_txBufferLength>
    47e6:	26 2f       	mov	r18, r22
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	24 0f       	add	r18, r20
    47ec:	31 1d       	adc	r19, r1
    47ee:	21 32       	cpi	r18, 0x21	; 33
    47f0:	31 05       	cpc	r19, r1
    47f2:	dc f4       	brge	.+54     	; 0x482a <twi_transmit+0x48>
    47f4:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <twi_state>
    47f8:	24 30       	cpi	r18, 0x04	; 4
    47fa:	c9 f4       	brne	.+50     	; 0x482e <twi_transmit+0x4c>
    47fc:	fc 01       	movw	r30, r24
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	86 17       	cp	r24, r22
    4804:	58 f4       	brcc	.+22     	; 0x481c <twi_transmit+0x3a>
    4806:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <twi_txBufferLength>
    480a:	21 91       	ld	r18, Z+
    480c:	dc 01       	movw	r26, r24
    480e:	ae 58       	subi	r26, 0x8E	; 142
    4810:	bb 4f       	sbci	r27, 0xFB	; 251
    4812:	a3 0f       	add	r26, r19
    4814:	b1 1d       	adc	r27, r1
    4816:	2c 93       	st	X, r18
    4818:	01 96       	adiw	r24, 0x01	; 1
    481a:	f3 cf       	rjmp	.-26     	; 0x4802 <twi_transmit+0x20>
    481c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_txBufferLength>
    4820:	68 0f       	add	r22, r24
    4822:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <twi_txBufferLength>
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	08 95       	ret
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	08 95       	ret
    482e:	82 e0       	ldi	r24, 0x02	; 2
    4830:	08 95       	ret

00004832 <twi_attachSlaveRxEvent>:
    4832:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <twi_onSlaveReceive+0x1>
    4836:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_onSlaveReceive>
    483a:	08 95       	ret

0000483c <twi_attachSlaveTxEvent>:
    483c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_onSlaveTransmit+0x1>
    4840:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_onSlaveTransmit>
    4844:	08 95       	ret

00004846 <twi_releaseBus>:
    4846:	85 ec       	ldi	r24, 0xC5	; 197
    4848:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    484c:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_state>
    4850:	08 95       	ret

00004852 <twi_handleTimeout>:
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
    4856:	91 e0       	ldi	r25, 0x01	; 1
    4858:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <twi_timed_out_flag>
    485c:	88 23       	and	r24, r24
    485e:	61 f0       	breq	.+24     	; 0x4878 <twi_handleTimeout+0x26>
    4860:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4864:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    4868:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <twi_disable>
    486c:	0e 94 b2 23 	call	0x4764	; 0x4764 <twi_init>
    4870:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    4874:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	08 95       	ret

0000487e <twi_readFrom>:
    487e:	4f 92       	push	r4
    4880:	5f 92       	push	r5
    4882:	6f 92       	push	r6
    4884:	7f 92       	push	r7
    4886:	8f 92       	push	r8
    4888:	9f 92       	push	r9
    488a:	af 92       	push	r10
    488c:	bf 92       	push	r11
    488e:	cf 92       	push	r12
    4890:	df 92       	push	r13
    4892:	ef 92       	push	r14
    4894:	ff 92       	push	r15
    4896:	0f 93       	push	r16
    4898:	1f 93       	push	r17
    489a:	cf 93       	push	r28
    489c:	df 93       	push	r29
    489e:	f8 2e       	mov	r15, r24
    48a0:	16 2f       	mov	r17, r22
    48a2:	07 2f       	mov	r16, r23
    48a4:	c4 2f       	mov	r28, r20
    48a6:	e2 2e       	mov	r14, r18
    48a8:	41 32       	cpi	r20, 0x21	; 33
    48aa:	08 f0       	brcs	.+2      	; 0x48ae <twi_readFrom+0x30>
    48ac:	be c0       	rjmp	.+380    	; 0x4a2a <twi_readFrom+0x1ac>
    48ae:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    48b2:	4b 01       	movw	r8, r22
    48b4:	5c 01       	movw	r10, r24
    48b6:	d0 91 c1 04 	lds	r29, 0x04C1	; 0x8004c1 <twi_state>
    48ba:	dd 23       	and	r29, r29
    48bc:	31 f1       	breq	.+76     	; 0x490a <twi_readFrom+0x8c>
    48be:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    48c2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    48c6:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    48ca:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    48ce:	89 2b       	or	r24, r25
    48d0:	8a 2b       	or	r24, r26
    48d2:	8b 2b       	or	r24, r27
    48d4:	81 f3       	breq	.-32     	; 0x48b6 <twi_readFrom+0x38>
    48d6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    48da:	40 90 ba 04 	lds	r4, 0x04BA	; 0x8004ba <twi_timeout_us>
    48de:	50 90 bb 04 	lds	r5, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    48e2:	60 90 bc 04 	lds	r6, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    48e6:	70 90 bd 04 	lds	r7, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	88 19       	sub	r24, r8
    48f0:	99 09       	sbc	r25, r9
    48f2:	aa 09       	sbc	r26, r10
    48f4:	bb 09       	sbc	r27, r11
    48f6:	48 16       	cp	r4, r24
    48f8:	59 06       	cpc	r5, r25
    48fa:	6a 06       	cpc	r6, r26
    48fc:	7b 06       	cpc	r7, r27
    48fe:	d8 f6       	brcc	.-74     	; 0x48b6 <twi_readFrom+0x38>
    4900:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_do_reset_on_timeout>
    4904:	0e 94 29 24 	call	0x4852	; 0x4852 <twi_handleTimeout>
    4908:	90 c0       	rjmp	.+288    	; 0x4a2a <twi_readFrom+0x1ac>
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_state>
    4910:	e0 92 bf 04 	sts	0x04BF, r14	; 0x8004bf <twi_sendStop>
    4914:	9f ef       	ldi	r25, 0xFF	; 255
    4916:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <twi_error>
    491a:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <twi_masterBufferIndex>
    491e:	9c 0f       	add	r25, r28
    4920:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <twi_masterBufferLength>
    4924:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <twi_slarw>
    4928:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <twi_slarw>
    492c:	8f 2d       	mov	r24, r15
    492e:	88 0f       	add	r24, r24
    4930:	89 2b       	or	r24, r25
    4932:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <twi_slarw>
    4936:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <twi_inRepStart>
    493a:	81 30       	cpi	r24, 0x01	; 1
    493c:	89 f5       	brne	.+98     	; 0x49a0 <twi_readFrom+0x122>
    493e:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <twi_inRepStart>
    4942:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4946:	6b 01       	movw	r12, r22
    4948:	7c 01       	movw	r14, r24
    494a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <twi_slarw>
    494e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4952:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    4956:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    495a:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    495e:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4962:	89 2b       	or	r24, r25
    4964:	8a 2b       	or	r24, r26
    4966:	8b 2b       	or	r24, r27
    4968:	a9 f0       	breq	.+42     	; 0x4994 <twi_readFrom+0x116>
    496a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    496e:	80 90 ba 04 	lds	r8, 0x04BA	; 0x8004ba <twi_timeout_us>
    4972:	90 90 bb 04 	lds	r9, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4976:	a0 90 bc 04 	lds	r10, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    497a:	b0 90 bd 04 	lds	r11, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	8c 19       	sub	r24, r12
    4984:	9d 09       	sbc	r25, r13
    4986:	ae 09       	sbc	r26, r14
    4988:	bf 09       	sbc	r27, r15
    498a:	88 16       	cp	r8, r24
    498c:	99 06       	cpc	r9, r25
    498e:	aa 06       	cpc	r10, r26
    4990:	bb 06       	cpc	r11, r27
    4992:	90 f1       	brcs	.+100    	; 0x49f8 <twi_readFrom+0x17a>
    4994:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4998:	83 fd       	sbrc	r24, 3
    499a:	d7 cf       	rjmp	.-82     	; 0x494a <twi_readFrom+0xcc>
    499c:	85 ec       	ldi	r24, 0xC5	; 197
    499e:	01 c0       	rjmp	.+2      	; 0x49a2 <twi_readFrom+0x124>
    49a0:	85 ee       	ldi	r24, 0xE5	; 229
    49a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    49a6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    49aa:	6b 01       	movw	r12, r22
    49ac:	7c 01       	movw	r14, r24
    49ae:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_state>
    49b2:	81 30       	cpi	r24, 0x01	; 1
    49b4:	31 f5       	brne	.+76     	; 0x4a02 <twi_readFrom+0x184>
    49b6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    49ba:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    49be:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    49c2:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    49c6:	89 2b       	or	r24, r25
    49c8:	8a 2b       	or	r24, r26
    49ca:	8b 2b       	or	r24, r27
    49cc:	81 f3       	breq	.-32     	; 0x49ae <twi_readFrom+0x130>
    49ce:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    49d2:	80 90 ba 04 	lds	r8, 0x04BA	; 0x8004ba <twi_timeout_us>
    49d6:	90 90 bb 04 	lds	r9, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    49da:	a0 90 bc 04 	lds	r10, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    49de:	b0 90 bd 04 	lds	r11, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    49e2:	dc 01       	movw	r26, r24
    49e4:	cb 01       	movw	r24, r22
    49e6:	8c 19       	sub	r24, r12
    49e8:	9d 09       	sbc	r25, r13
    49ea:	ae 09       	sbc	r26, r14
    49ec:	bf 09       	sbc	r27, r15
    49ee:	88 16       	cp	r8, r24
    49f0:	99 06       	cpc	r9, r25
    49f2:	aa 06       	cpc	r10, r26
    49f4:	bb 06       	cpc	r11, r27
    49f6:	d8 f6       	brcc	.-74     	; 0x49ae <twi_readFrom+0x130>
    49f8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_do_reset_on_timeout>
    49fc:	0e 94 29 24 	call	0x4852	; 0x4852 <twi_handleTimeout>
    4a00:	15 c0       	rjmp	.+42     	; 0x4a2c <twi_readFrom+0x1ae>
    4a02:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4a06:	8c 17       	cp	r24, r28
    4a08:	10 f4       	brcc	.+4      	; 0x4a0e <twi_readFrom+0x190>
    4a0a:	c0 91 93 04 	lds	r28, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4a0e:	a4 e9       	ldi	r26, 0x94	; 148
    4a10:	b4 e0       	ldi	r27, 0x04	; 4
    4a12:	91 2f       	mov	r25, r17
    4a14:	e1 2f       	mov	r30, r17
    4a16:	f0 2f       	mov	r31, r16
    4a18:	8e 2f       	mov	r24, r30
    4a1a:	89 1b       	sub	r24, r25
    4a1c:	8c 17       	cp	r24, r28
    4a1e:	18 f4       	brcc	.+6      	; 0x4a26 <twi_readFrom+0x1a8>
    4a20:	8d 91       	ld	r24, X+
    4a22:	81 93       	st	Z+, r24
    4a24:	f9 cf       	rjmp	.-14     	; 0x4a18 <twi_readFrom+0x19a>
    4a26:	dc 2f       	mov	r29, r28
    4a28:	01 c0       	rjmp	.+2      	; 0x4a2c <twi_readFrom+0x1ae>
    4a2a:	d0 e0       	ldi	r29, 0x00	; 0
    4a2c:	8d 2f       	mov	r24, r29
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	1f 91       	pop	r17
    4a34:	0f 91       	pop	r16
    4a36:	ff 90       	pop	r15
    4a38:	ef 90       	pop	r14
    4a3a:	df 90       	pop	r13
    4a3c:	cf 90       	pop	r12
    4a3e:	bf 90       	pop	r11
    4a40:	af 90       	pop	r10
    4a42:	9f 90       	pop	r9
    4a44:	8f 90       	pop	r8
    4a46:	7f 90       	pop	r7
    4a48:	6f 90       	pop	r6
    4a4a:	5f 90       	pop	r5
    4a4c:	4f 90       	pop	r4
    4a4e:	08 95       	ret

00004a50 <twi_writeTo>:
    4a50:	4f 92       	push	r4
    4a52:	5f 92       	push	r5
    4a54:	6f 92       	push	r6
    4a56:	7f 92       	push	r7
    4a58:	8f 92       	push	r8
    4a5a:	9f 92       	push	r9
    4a5c:	af 92       	push	r10
    4a5e:	bf 92       	push	r11
    4a60:	cf 92       	push	r12
    4a62:	df 92       	push	r13
    4a64:	ef 92       	push	r14
    4a66:	ff 92       	push	r15
    4a68:	0f 93       	push	r16
    4a6a:	1f 93       	push	r17
    4a6c:	cf 93       	push	r28
    4a6e:	df 93       	push	r29
    4a70:	41 32       	cpi	r20, 0x21	; 33
    4a72:	08 f0       	brcs	.+2      	; 0x4a76 <twi_writeTo+0x26>
    4a74:	c6 c0       	rjmp	.+396    	; 0x4c02 <twi_writeTo+0x1b2>
    4a76:	12 2f       	mov	r17, r18
    4a78:	f4 2e       	mov	r15, r20
    4a7a:	d7 2e       	mov	r13, r23
    4a7c:	e6 2e       	mov	r14, r22
    4a7e:	d8 2f       	mov	r29, r24
    4a80:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4a84:	4b 01       	movw	r8, r22
    4a86:	5c 01       	movw	r10, r24
    4a88:	c0 91 c1 04 	lds	r28, 0x04C1	; 0x8004c1 <twi_state>
    4a8c:	cc 23       	and	r28, r28
    4a8e:	11 f1       	breq	.+68     	; 0x4ad4 <twi_writeTo+0x84>
    4a90:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    4a94:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4a98:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4a9c:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4aa0:	89 2b       	or	r24, r25
    4aa2:	8a 2b       	or	r24, r26
    4aa4:	8b 2b       	or	r24, r27
    4aa6:	81 f3       	breq	.-32     	; 0x4a88 <twi_writeTo+0x38>
    4aa8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4aac:	40 90 ba 04 	lds	r4, 0x04BA	; 0x8004ba <twi_timeout_us>
    4ab0:	50 90 bb 04 	lds	r5, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4ab4:	60 90 bc 04 	lds	r6, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4ab8:	70 90 bd 04 	lds	r7, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	88 19       	sub	r24, r8
    4ac2:	99 09       	sbc	r25, r9
    4ac4:	aa 09       	sbc	r26, r10
    4ac6:	bb 09       	sbc	r27, r11
    4ac8:	48 16       	cp	r4, r24
    4aca:	59 06       	cpc	r5, r25
    4acc:	6a 06       	cpc	r6, r26
    4ace:	7b 06       	cpc	r7, r27
    4ad0:	d8 f6       	brcc	.-74     	; 0x4a88 <twi_writeTo+0x38>
    4ad2:	83 c0       	rjmp	.+262    	; 0x4bda <twi_writeTo+0x18a>
    4ad4:	82 e0       	ldi	r24, 0x02	; 2
    4ad6:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_state>
    4ada:	00 93 bf 04 	sts	0x04BF, r16	; 0x8004bf <twi_sendStop>
    4ade:	8f ef       	ldi	r24, 0xFF	; 255
    4ae0:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <twi_error>
    4ae4:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <twi_masterBufferIndex>
    4ae8:	f0 92 92 04 	sts	0x0492, r15	; 0x800492 <twi_masterBufferLength>
    4aec:	9e 2d       	mov	r25, r14
    4aee:	a4 e9       	ldi	r26, 0x94	; 148
    4af0:	b4 e0       	ldi	r27, 0x04	; 4
    4af2:	ee 2d       	mov	r30, r14
    4af4:	fd 2d       	mov	r31, r13
    4af6:	8e 2f       	mov	r24, r30
    4af8:	89 1b       	sub	r24, r25
    4afa:	8f 15       	cp	r24, r15
    4afc:	18 f4       	brcc	.+6      	; 0x4b04 <twi_writeTo+0xb4>
    4afe:	81 91       	ld	r24, Z+
    4b00:	8d 93       	st	X+, r24
    4b02:	f9 cf       	rjmp	.-14     	; 0x4af6 <twi_writeTo+0xa6>
    4b04:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <twi_slarw>
    4b08:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <twi_slarw>
    4b0c:	dd 0f       	add	r29, r29
    4b0e:	d9 2b       	or	r29, r25
    4b10:	d0 93 c0 04 	sts	0x04C0, r29	; 0x8004c0 <twi_slarw>
    4b14:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <twi_inRepStart>
    4b18:	81 30       	cpi	r24, 0x01	; 1
    4b1a:	89 f5       	brne	.+98     	; 0x4b7e <twi_writeTo+0x12e>
    4b1c:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <twi_inRepStart>
    4b20:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4b24:	6b 01       	movw	r12, r22
    4b26:	7c 01       	movw	r14, r24
    4b28:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <twi_slarw>
    4b2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4b30:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    4b34:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4b38:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4b3c:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4b40:	89 2b       	or	r24, r25
    4b42:	8a 2b       	or	r24, r26
    4b44:	8b 2b       	or	r24, r27
    4b46:	a9 f0       	breq	.+42     	; 0x4b72 <twi_writeTo+0x122>
    4b48:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4b4c:	80 90 ba 04 	lds	r8, 0x04BA	; 0x8004ba <twi_timeout_us>
    4b50:	90 90 bb 04 	lds	r9, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4b54:	a0 90 bc 04 	lds	r10, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4b58:	b0 90 bd 04 	lds	r11, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	8c 19       	sub	r24, r12
    4b62:	9d 09       	sbc	r25, r13
    4b64:	ae 09       	sbc	r26, r14
    4b66:	bf 09       	sbc	r27, r15
    4b68:	88 16       	cp	r8, r24
    4b6a:	99 06       	cpc	r9, r25
    4b6c:	aa 06       	cpc	r10, r26
    4b6e:	bb 06       	cpc	r11, r27
    4b70:	a0 f1       	brcs	.+104    	; 0x4bda <twi_writeTo+0x18a>
    4b72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4b76:	83 fd       	sbrc	r24, 3
    4b78:	d7 cf       	rjmp	.-82     	; 0x4b28 <twi_writeTo+0xd8>
    4b7a:	85 ec       	ldi	r24, 0xC5	; 197
    4b7c:	01 c0       	rjmp	.+2      	; 0x4b80 <twi_writeTo+0x130>
    4b7e:	85 ee       	ldi	r24, 0xE5	; 229
    4b80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4b84:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4b88:	6b 01       	movw	r12, r22
    4b8a:	7c 01       	movw	r14, r24
    4b8c:	11 23       	and	r17, r17
    4b8e:	59 f1       	breq	.+86     	; 0x4be6 <twi_writeTo+0x196>
    4b90:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_state>
    4b94:	82 30       	cpi	r24, 0x02	; 2
    4b96:	39 f5       	brne	.+78     	; 0x4be6 <twi_writeTo+0x196>
    4b98:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    4b9c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4ba0:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4ba4:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4ba8:	89 2b       	or	r24, r25
    4baa:	8a 2b       	or	r24, r26
    4bac:	8b 2b       	or	r24, r27
    4bae:	71 f3       	breq	.-36     	; 0x4b8c <twi_writeTo+0x13c>
    4bb0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <micros>
    4bb4:	80 90 ba 04 	lds	r8, 0x04BA	; 0x8004ba <twi_timeout_us>
    4bb8:	90 90 bb 04 	lds	r9, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4bbc:	a0 90 bc 04 	lds	r10, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4bc0:	b0 90 bd 04 	lds	r11, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	8c 19       	sub	r24, r12
    4bca:	9d 09       	sbc	r25, r13
    4bcc:	ae 09       	sbc	r26, r14
    4bce:	bf 09       	sbc	r27, r15
    4bd0:	88 16       	cp	r8, r24
    4bd2:	99 06       	cpc	r9, r25
    4bd4:	aa 06       	cpc	r10, r26
    4bd6:	bb 06       	cpc	r11, r27
    4bd8:	c8 f6       	brcc	.-78     	; 0x4b8c <twi_writeTo+0x13c>
    4bda:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_do_reset_on_timeout>
    4bde:	0e 94 29 24 	call	0x4852	; 0x4852 <twi_handleTimeout>
    4be2:	c5 e0       	ldi	r28, 0x05	; 5
    4be4:	13 c0       	rjmp	.+38     	; 0x4c0c <twi_writeTo+0x1bc>
    4be6:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <twi_error>
    4bea:	8f 3f       	cpi	r24, 0xFF	; 255
    4bec:	79 f0       	breq	.+30     	; 0x4c0c <twi_writeTo+0x1bc>
    4bee:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <twi_error>
    4bf2:	80 32       	cpi	r24, 0x20	; 32
    4bf4:	41 f0       	breq	.+16     	; 0x4c06 <twi_writeTo+0x1b6>
    4bf6:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <twi_error>
    4bfa:	80 33       	cpi	r24, 0x30	; 48
    4bfc:	31 f0       	breq	.+12     	; 0x4c0a <twi_writeTo+0x1ba>
    4bfe:	c4 e0       	ldi	r28, 0x04	; 4
    4c00:	05 c0       	rjmp	.+10     	; 0x4c0c <twi_writeTo+0x1bc>
    4c02:	c1 e0       	ldi	r28, 0x01	; 1
    4c04:	03 c0       	rjmp	.+6      	; 0x4c0c <twi_writeTo+0x1bc>
    4c06:	c2 e0       	ldi	r28, 0x02	; 2
    4c08:	01 c0       	rjmp	.+2      	; 0x4c0c <twi_writeTo+0x1bc>
    4c0a:	c3 e0       	ldi	r28, 0x03	; 3
    4c0c:	8c 2f       	mov	r24, r28
    4c0e:	df 91       	pop	r29
    4c10:	cf 91       	pop	r28
    4c12:	1f 91       	pop	r17
    4c14:	0f 91       	pop	r16
    4c16:	ff 90       	pop	r15
    4c18:	ef 90       	pop	r14
    4c1a:	df 90       	pop	r13
    4c1c:	cf 90       	pop	r12
    4c1e:	bf 90       	pop	r11
    4c20:	af 90       	pop	r10
    4c22:	9f 90       	pop	r9
    4c24:	8f 90       	pop	r8
    4c26:	7f 90       	pop	r7
    4c28:	6f 90       	pop	r6
    4c2a:	5f 90       	pop	r5
    4c2c:	4f 90       	pop	r4
    4c2e:	08 95       	ret

00004c30 <twi_stop>:
    4c30:	85 ed       	ldi	r24, 0xD5	; 213
    4c32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4c36:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_timeout_us>
    4c3a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4c3e:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4c42:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4c46:	07 96       	adiw	r24, 0x07	; 7
    4c48:	a1 1d       	adc	r26, r1
    4c4a:	b1 1d       	adc	r27, r1
    4c4c:	23 e0       	ldi	r18, 0x03	; 3
    4c4e:	b6 95       	lsr	r27
    4c50:	a7 95       	ror	r26
    4c52:	97 95       	ror	r25
    4c54:	87 95       	ror	r24
    4c56:	2a 95       	dec	r18
    4c58:	d1 f7       	brne	.-12     	; 0x4c4e <twi_stop+0x1e>
    4c5a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4c5e:	24 ff       	sbrs	r18, 4
    4c60:	1c c0       	rjmp	.+56     	; 0x4c9a <twi_stop+0x6a>
    4c62:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <twi_timeout_us>
    4c66:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <twi_timeout_us+0x1>
    4c6a:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <twi_timeout_us+0x2>
    4c6e:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <twi_timeout_us+0x3>
    4c72:	45 2b       	or	r20, r21
    4c74:	46 2b       	or	r20, r22
    4c76:	47 2b       	or	r20, r23
    4c78:	81 f3       	breq	.-32     	; 0x4c5a <twi_stop+0x2a>
    4c7a:	00 97       	sbiw	r24, 0x00	; 0
    4c7c:	a1 05       	cpc	r26, r1
    4c7e:	b1 05       	cpc	r27, r1
    4c80:	41 f0       	breq	.+16     	; 0x4c92 <twi_stop+0x62>
    4c82:	25 e3       	ldi	r18, 0x35	; 53
    4c84:	2a 95       	dec	r18
    4c86:	f1 f7       	brne	.-4      	; 0x4c84 <twi_stop+0x54>
    4c88:	00 00       	nop
    4c8a:	01 97       	sbiw	r24, 0x01	; 1
    4c8c:	a1 09       	sbc	r26, r1
    4c8e:	b1 09       	sbc	r27, r1
    4c90:	e4 cf       	rjmp	.-56     	; 0x4c5a <twi_stop+0x2a>
    4c92:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_do_reset_on_timeout>
    4c96:	0c 94 29 24 	jmp	0x4852	; 0x4852 <twi_handleTimeout>
    4c9a:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_state>
    4c9e:	08 95       	ret

00004ca0 <__vector_24>:

ISR(TWI_vect)
{
    4ca0:	1f 92       	push	r1
    4ca2:	0f 92       	push	r0
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	0f 92       	push	r0
    4ca8:	11 24       	eor	r1, r1
    4caa:	2f 93       	push	r18
    4cac:	3f 93       	push	r19
    4cae:	4f 93       	push	r20
    4cb0:	5f 93       	push	r21
    4cb2:	6f 93       	push	r22
    4cb4:	7f 93       	push	r23
    4cb6:	8f 93       	push	r24
    4cb8:	9f 93       	push	r25
    4cba:	af 93       	push	r26
    4cbc:	bf 93       	push	r27
    4cbe:	ef 93       	push	r30
    4cc0:	ff 93       	push	r31
  switch(TW_STATUS){
    4cc2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    4cc6:	88 7f       	andi	r24, 0xF8	; 248
    4cc8:	80 36       	cpi	r24, 0x60	; 96
    4cca:	09 f4       	brne	.+2      	; 0x4cce <__vector_24+0x2e>
    4ccc:	9e c0       	rjmp	.+316    	; 0x4e0a <__vector_24+0x16a>
    4cce:	78 f5       	brcc	.+94     	; 0x4d2e <__vector_24+0x8e>
    4cd0:	88 32       	cpi	r24, 0x28	; 40
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <__vector_24+0x36>
    4cd4:	5d c0       	rjmp	.+186    	; 0x4d90 <__vector_24+0xf0>
    4cd6:	90 f4       	brcc	.+36     	; 0x4cfc <__vector_24+0x5c>
    4cd8:	80 31       	cpi	r24, 0x10	; 16
    4cda:	09 f4       	brne	.+2      	; 0x4cde <__vector_24+0x3e>
    4cdc:	56 c0       	rjmp	.+172    	; 0x4d8a <__vector_24+0xea>
    4cde:	38 f4       	brcc	.+14     	; 0x4cee <__vector_24+0x4e>
    4ce0:	88 23       	and	r24, r24
    4ce2:	09 f4       	brne	.+2      	; 0x4ce6 <__vector_24+0x46>
    4ce4:	f5 c0       	rjmp	.+490    	; 0x4ed0 <__vector_24+0x230>
    4ce6:	88 30       	cpi	r24, 0x08	; 8
    4ce8:	09 f4       	brne	.+2      	; 0x4cec <__vector_24+0x4c>
    4cea:	4f c0       	rjmp	.+158    	; 0x4d8a <__vector_24+0xea>
    4cec:	f5 c0       	rjmp	.+490    	; 0x4ed8 <__vector_24+0x238>
    4cee:	88 31       	cpi	r24, 0x18	; 24
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <__vector_24+0x54>
    4cf2:	4e c0       	rjmp	.+156    	; 0x4d90 <__vector_24+0xf0>
    4cf4:	80 32       	cpi	r24, 0x20	; 32
    4cf6:	09 f4       	brne	.+2      	; 0x4cfa <__vector_24+0x5a>
    4cf8:	5f c0       	rjmp	.+190    	; 0x4db8 <__vector_24+0x118>
    4cfa:	ee c0       	rjmp	.+476    	; 0x4ed8 <__vector_24+0x238>
    4cfc:	80 34       	cpi	r24, 0x40	; 64
    4cfe:	09 f4       	brne	.+2      	; 0x4d02 <__vector_24+0x62>
    4d00:	6a c0       	rjmp	.+212    	; 0x4dd6 <__vector_24+0x136>
    4d02:	58 f4       	brcc	.+22     	; 0x4d1a <__vector_24+0x7a>
    4d04:	80 33       	cpi	r24, 0x30	; 48
    4d06:	09 f4       	brne	.+2      	; 0x4d0a <__vector_24+0x6a>
    4d08:	57 c0       	rjmp	.+174    	; 0x4db8 <__vector_24+0x118>
    4d0a:	88 33       	cpi	r24, 0x38	; 56
    4d0c:	09 f0       	breq	.+2      	; 0x4d10 <__vector_24+0x70>
    4d0e:	e4 c0       	rjmp	.+456    	; 0x4ed8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4d10:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <twi_error>
      twi_releaseBus();
    4d14:	0e 94 23 24 	call	0x4846	; 0x4846 <twi_releaseBus>
      break;
    4d18:	df c0       	rjmp	.+446    	; 0x4ed8 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4d1a:	80 35       	cpi	r24, 0x50	; 80
    4d1c:	09 f4       	brne	.+2      	; 0x4d20 <__vector_24+0x80>
    4d1e:	4f c0       	rjmp	.+158    	; 0x4dbe <__vector_24+0x11e>
    4d20:	88 35       	cpi	r24, 0x58	; 88
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <__vector_24+0x86>
    4d24:	5d c0       	rjmp	.+186    	; 0x4de0 <__vector_24+0x140>
    4d26:	88 34       	cpi	r24, 0x48	; 72
    4d28:	09 f0       	breq	.+2      	; 0x4d2c <__vector_24+0x8c>
    4d2a:	d6 c0       	rjmp	.+428    	; 0x4ed8 <__vector_24+0x238>
    4d2c:	d3 c0       	rjmp	.+422    	; 0x4ed4 <__vector_24+0x234>
    4d2e:	88 39       	cpi	r24, 0x98	; 152
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <__vector_24+0x94>
    4d32:	c4 c0       	rjmp	.+392    	; 0x4ebc <__vector_24+0x21c>
    4d34:	a8 f4       	brcc	.+42     	; 0x4d60 <__vector_24+0xc0>
    4d36:	88 37       	cpi	r24, 0x78	; 120
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <__vector_24+0x9c>
    4d3a:	67 c0       	rjmp	.+206    	; 0x4e0a <__vector_24+0x16a>
    4d3c:	38 f4       	brcc	.+14     	; 0x4d4c <__vector_24+0xac>
    4d3e:	88 36       	cpi	r24, 0x68	; 104
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <__vector_24+0xa4>
    4d42:	63 c0       	rjmp	.+198    	; 0x4e0a <__vector_24+0x16a>
    4d44:	80 37       	cpi	r24, 0x70	; 112
    4d46:	09 f4       	brne	.+2      	; 0x4d4a <__vector_24+0xaa>
    4d48:	60 c0       	rjmp	.+192    	; 0x4e0a <__vector_24+0x16a>
    4d4a:	c6 c0       	rjmp	.+396    	; 0x4ed8 <__vector_24+0x238>
    4d4c:	88 38       	cpi	r24, 0x88	; 136
    4d4e:	09 f4       	brne	.+2      	; 0x4d52 <__vector_24+0xb2>
    4d50:	b5 c0       	rjmp	.+362    	; 0x4ebc <__vector_24+0x21c>
    4d52:	80 39       	cpi	r24, 0x90	; 144
    4d54:	09 f4       	brne	.+2      	; 0x4d58 <__vector_24+0xb8>
    4d56:	5f c0       	rjmp	.+190    	; 0x4e16 <__vector_24+0x176>
    4d58:	80 38       	cpi	r24, 0x80	; 128
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <__vector_24+0xbe>
    4d5c:	bd c0       	rjmp	.+378    	; 0x4ed8 <__vector_24+0x238>
    4d5e:	5b c0       	rjmp	.+182    	; 0x4e16 <__vector_24+0x176>
    4d60:	80 3b       	cpi	r24, 0xB0	; 176
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <__vector_24+0xc6>
    4d64:	83 c0       	rjmp	.+262    	; 0x4e6c <__vector_24+0x1cc>
    4d66:	38 f4       	brcc	.+14     	; 0x4d76 <__vector_24+0xd6>
    4d68:	80 3a       	cpi	r24, 0xA0	; 160
    4d6a:	09 f4       	brne	.+2      	; 0x4d6e <__vector_24+0xce>
    4d6c:	66 c0       	rjmp	.+204    	; 0x4e3a <__vector_24+0x19a>
    4d6e:	88 3a       	cpi	r24, 0xA8	; 168
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <__vector_24+0xd4>
    4d72:	7c c0       	rjmp	.+248    	; 0x4e6c <__vector_24+0x1cc>
    4d74:	b1 c0       	rjmp	.+354    	; 0x4ed8 <__vector_24+0x238>
    4d76:	80 3c       	cpi	r24, 0xC0	; 192
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <__vector_24+0xdc>
    4d7a:	a4 c0       	rjmp	.+328    	; 0x4ec4 <__vector_24+0x224>
    4d7c:	88 3c       	cpi	r24, 0xC8	; 200
    4d7e:	09 f4       	brne	.+2      	; 0x4d82 <__vector_24+0xe2>
    4d80:	a1 c0       	rjmp	.+322    	; 0x4ec4 <__vector_24+0x224>
    4d82:	88 3b       	cpi	r24, 0xB8	; 184
    4d84:	09 f4       	brne	.+2      	; 0x4d88 <__vector_24+0xe8>
    4d86:	87 c0       	rjmp	.+270    	; 0x4e96 <__vector_24+0x1f6>
    4d88:	a7 c0       	rjmp	.+334    	; 0x4ed8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4d8a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <twi_slarw>
    4d8e:	10 c0       	rjmp	.+32     	; 0x4db0 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4d90:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4d94:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_masterBufferLength>
    4d98:	98 17       	cp	r25, r24
    4d9a:	70 f5       	brcc	.+92     	; 0x4df8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4d9c:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	8e 0f       	add	r24, r30
    4da4:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_masterBufferIndex>
    4da8:	f0 e0       	ldi	r31, 0x00	; 0
    4daa:	ec 56       	subi	r30, 0x6C	; 108
    4dac:	fb 4f       	sbci	r31, 0xFB	; 251
    4dae:	80 81       	ld	r24, Z
    4db0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4db4:	85 ec       	ldi	r24, 0xC5	; 197
    4db6:	83 c0       	rjmp	.+262    	; 0x4ebe <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4db8:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <twi_error>
    4dbc:	8b c0       	rjmp	.+278    	; 0x4ed4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4dbe:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	8e 0f       	add	r24, r30
    4dc6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_masterBufferIndex>
    4dca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	ec 56       	subi	r30, 0x6C	; 108
    4dd2:	fb 4f       	sbci	r31, 0xFB	; 251
    4dd4:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4dd6:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4dda:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_masterBufferLength>
    4dde:	6b c0       	rjmp	.+214    	; 0x4eb6 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4de0:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <twi_masterBufferIndex>
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	8e 0f       	add	r24, r30
    4de8:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_masterBufferIndex>
    4dec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	ec 56       	subi	r30, 0x6C	; 108
    4df4:	fb 4f       	sbci	r31, 0xFB	; 251
    4df6:	80 83       	st	Z, r24
      if (twi_sendStop){
    4df8:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <twi_sendStop>
    4dfc:	81 11       	cpse	r24, r1
    4dfe:	6a c0       	rjmp	.+212    	; 0x4ed4 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4e06:	84 ea       	ldi	r24, 0xA4	; 164
    4e08:	5e c0       	rjmp	.+188    	; 0x4ec6 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4e0a:	83 e0       	ldi	r24, 0x03	; 3
    4e0c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4e10:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_rxBufferIndex>
    4e14:	cf cf       	rjmp	.-98     	; 0x4db4 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4e16:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_rxBufferIndex>
    4e1a:	80 32       	cpi	r24, 0x20	; 32
    4e1c:	08 f0       	brcs	.+2      	; 0x4e20 <__vector_24+0x180>
    4e1e:	4e c0       	rjmp	.+156    	; 0x4ebc <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4e20:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <twi_rxBufferIndex>
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	8e 0f       	add	r24, r30
    4e28:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <twi_rxBufferIndex>
    4e2c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4e30:	f0 e0       	ldi	r31, 0x00	; 0
    4e32:	e0 5b       	subi	r30, 0xB0	; 176
    4e34:	fb 4f       	sbci	r31, 0xFB	; 251
    4e36:	80 83       	st	Z, r24
    4e38:	bd cf       	rjmp	.-134    	; 0x4db4 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4e3a:	0e 94 23 24 	call	0x4846	; 0x4846 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4e3e:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_rxBufferIndex>
    4e42:	80 32       	cpi	r24, 0x20	; 32
    4e44:	30 f4       	brcc	.+12     	; 0x4e52 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4e46:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <twi_rxBufferIndex>
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	e0 5b       	subi	r30, 0xB0	; 176
    4e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    4e50:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4e52:	60 91 4f 04 	lds	r22, 0x044F	; 0x80044f <twi_rxBufferIndex>
    4e56:	70 e0       	ldi	r23, 0x00	; 0
    4e58:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <twi_onSlaveReceive>
    4e5c:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <twi_onSlaveReceive+0x1>
    4e60:	80 e5       	ldi	r24, 0x50	; 80
    4e62:	94 e0       	ldi	r25, 0x04	; 4
    4e64:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4e66:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_rxBufferIndex>
      break;
    4e6a:	36 c0       	rjmp	.+108    	; 0x4ed8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4e6c:	84 e0       	ldi	r24, 0x04	; 4
    4e6e:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4e72:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4e76:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4e7a:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <twi_onSlaveTransmit>
    4e7e:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <twi_onSlaveTransmit+0x1>
    4e82:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4e84:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_txBufferLength>
    4e88:	81 11       	cpse	r24, r1
    4e8a:	05 c0       	rjmp	.+10     	; 0x4e96 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4e92:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4e96:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <twi_txBufferIndex>
    4e9a:	81 e0       	ldi	r24, 0x01	; 1
    4e9c:	8e 0f       	add	r24, r30
    4e9e:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_txBufferIndex>
    4ea2:	f0 e0       	ldi	r31, 0x00	; 0
    4ea4:	ee 58       	subi	r30, 0x8E	; 142
    4ea6:	fb 4f       	sbci	r31, 0xFB	; 251
    4ea8:	80 81       	ld	r24, Z
    4eaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4eae:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <twi_txBufferIndex>
    4eb2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_txBufferLength>
    4eb6:	98 17       	cp	r25, r24
    4eb8:	08 f4       	brcc	.+2      	; 0x4ebc <__vector_24+0x21c>
    4eba:	7c cf       	rjmp	.-264    	; 0x4db4 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4ebc:	85 e8       	ldi	r24, 0x85	; 133
    4ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4ec2:	0a c0       	rjmp	.+20     	; 0x4ed8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4ec4:	85 ec       	ldi	r24, 0xC5	; 197
    4ec6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4eca:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_state>
      break;
    4ece:	04 c0       	rjmp	.+8      	; 0x4ed8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4ed0:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <twi_error>
      twi_stop();
    4ed4:	0e 94 18 26 	call	0x4c30	; 0x4c30 <twi_stop>
      break;
  }
}
    4ed8:	ff 91       	pop	r31
    4eda:	ef 91       	pop	r30
    4edc:	bf 91       	pop	r27
    4ede:	af 91       	pop	r26
    4ee0:	9f 91       	pop	r25
    4ee2:	8f 91       	pop	r24
    4ee4:	7f 91       	pop	r23
    4ee6:	6f 91       	pop	r22
    4ee8:	5f 91       	pop	r21
    4eea:	4f 91       	pop	r20
    4eec:	3f 91       	pop	r19
    4eee:	2f 91       	pop	r18
    4ef0:	0f 90       	pop	r0
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	0f 90       	pop	r0
    4ef6:	1f 90       	pop	r1
    4ef8:	18 95       	reti

00004efa <__cmpsf2>:
    4efa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fp_cmp>
    4efe:	08 f4       	brcc	.+2      	; 0x4f02 <__cmpsf2+0x8>
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	08 95       	ret

00004f04 <__unordsf2>:
    4f04:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fp_cmp>
    4f08:	88 0b       	sbc	r24, r24
    4f0a:	99 0b       	sbc	r25, r25
    4f0c:	08 95       	ret

00004f0e <__mulsi3>:
    4f0e:	db 01       	movw	r26, r22
    4f10:	8f 93       	push	r24
    4f12:	9f 93       	push	r25
    4f14:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <__muluhisi3>
    4f18:	bf 91       	pop	r27
    4f1a:	af 91       	pop	r26
    4f1c:	a2 9f       	mul	r26, r18
    4f1e:	80 0d       	add	r24, r0
    4f20:	91 1d       	adc	r25, r1
    4f22:	a3 9f       	mul	r26, r19
    4f24:	90 0d       	add	r25, r0
    4f26:	b2 9f       	mul	r27, r18
    4f28:	90 0d       	add	r25, r0
    4f2a:	11 24       	eor	r1, r1
    4f2c:	08 95       	ret

00004f2e <__udivmodsi4>:
    4f2e:	a1 e2       	ldi	r26, 0x21	; 33
    4f30:	1a 2e       	mov	r1, r26
    4f32:	aa 1b       	sub	r26, r26
    4f34:	bb 1b       	sub	r27, r27
    4f36:	fd 01       	movw	r30, r26
    4f38:	0d c0       	rjmp	.+26     	; 0x4f54 <__udivmodsi4_ep>

00004f3a <__udivmodsi4_loop>:
    4f3a:	aa 1f       	adc	r26, r26
    4f3c:	bb 1f       	adc	r27, r27
    4f3e:	ee 1f       	adc	r30, r30
    4f40:	ff 1f       	adc	r31, r31
    4f42:	a2 17       	cp	r26, r18
    4f44:	b3 07       	cpc	r27, r19
    4f46:	e4 07       	cpc	r30, r20
    4f48:	f5 07       	cpc	r31, r21
    4f4a:	20 f0       	brcs	.+8      	; 0x4f54 <__udivmodsi4_ep>
    4f4c:	a2 1b       	sub	r26, r18
    4f4e:	b3 0b       	sbc	r27, r19
    4f50:	e4 0b       	sbc	r30, r20
    4f52:	f5 0b       	sbc	r31, r21

00004f54 <__udivmodsi4_ep>:
    4f54:	66 1f       	adc	r22, r22
    4f56:	77 1f       	adc	r23, r23
    4f58:	88 1f       	adc	r24, r24
    4f5a:	99 1f       	adc	r25, r25
    4f5c:	1a 94       	dec	r1
    4f5e:	69 f7       	brne	.-38     	; 0x4f3a <__udivmodsi4_loop>
    4f60:	60 95       	com	r22
    4f62:	70 95       	com	r23
    4f64:	80 95       	com	r24
    4f66:	90 95       	com	r25
    4f68:	9b 01       	movw	r18, r22
    4f6a:	ac 01       	movw	r20, r24
    4f6c:	bd 01       	movw	r22, r26
    4f6e:	cf 01       	movw	r24, r30
    4f70:	08 95       	ret

00004f72 <__divmodsi4>:
    4f72:	05 2e       	mov	r0, r21
    4f74:	97 fb       	bst	r25, 7
    4f76:	1e f4       	brtc	.+6      	; 0x4f7e <__divmodsi4+0xc>
    4f78:	00 94       	com	r0
    4f7a:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <__negsi2>
    4f7e:	57 fd       	sbrc	r21, 7
    4f80:	07 d0       	rcall	.+14     	; 0x4f90 <__divmodsi4_neg2>
    4f82:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__udivmodsi4>
    4f86:	07 fc       	sbrc	r0, 7
    4f88:	03 d0       	rcall	.+6      	; 0x4f90 <__divmodsi4_neg2>
    4f8a:	4e f4       	brtc	.+18     	; 0x4f9e <__divmodsi4_exit>
    4f8c:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <__negsi2>

00004f90 <__divmodsi4_neg2>:
    4f90:	50 95       	com	r21
    4f92:	40 95       	com	r20
    4f94:	30 95       	com	r19
    4f96:	21 95       	neg	r18
    4f98:	3f 4f       	sbci	r19, 0xFF	; 255
    4f9a:	4f 4f       	sbci	r20, 0xFF	; 255
    4f9c:	5f 4f       	sbci	r21, 0xFF	; 255

00004f9e <__divmodsi4_exit>:
    4f9e:	08 95       	ret

00004fa0 <__negsi2>:
    4fa0:	90 95       	com	r25
    4fa2:	80 95       	com	r24
    4fa4:	70 95       	com	r23
    4fa6:	61 95       	neg	r22
    4fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4faa:	8f 4f       	sbci	r24, 0xFF	; 255
    4fac:	9f 4f       	sbci	r25, 0xFF	; 255
    4fae:	08 95       	ret

00004fb0 <__tablejump2__>:
    4fb0:	ee 0f       	add	r30, r30
    4fb2:	ff 1f       	adc	r31, r31
    4fb4:	05 90       	lpm	r0, Z+
    4fb6:	f4 91       	lpm	r31, Z
    4fb8:	e0 2d       	mov	r30, r0
    4fba:	09 94       	ijmp

00004fbc <__muluhisi3>:
    4fbc:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__umulhisi3>
    4fc0:	a5 9f       	mul	r26, r21
    4fc2:	90 0d       	add	r25, r0
    4fc4:	b4 9f       	mul	r27, r20
    4fc6:	90 0d       	add	r25, r0
    4fc8:	a4 9f       	mul	r26, r20
    4fca:	80 0d       	add	r24, r0
    4fcc:	91 1d       	adc	r25, r1
    4fce:	11 24       	eor	r1, r1
    4fd0:	08 95       	ret

00004fd2 <__umulhisi3>:
    4fd2:	a2 9f       	mul	r26, r18
    4fd4:	b0 01       	movw	r22, r0
    4fd6:	b3 9f       	mul	r27, r19
    4fd8:	c0 01       	movw	r24, r0
    4fda:	a3 9f       	mul	r26, r19
    4fdc:	70 0d       	add	r23, r0
    4fde:	81 1d       	adc	r24, r1
    4fe0:	11 24       	eor	r1, r1
    4fe2:	91 1d       	adc	r25, r1
    4fe4:	b2 9f       	mul	r27, r18
    4fe6:	70 0d       	add	r23, r0
    4fe8:	81 1d       	adc	r24, r1
    4fea:	11 24       	eor	r1, r1
    4fec:	91 1d       	adc	r25, r1
    4fee:	08 95       	ret

00004ff0 <sprintf>:
    4ff0:	ae e0       	ldi	r26, 0x0E	; 14
    4ff2:	b0 e0       	ldi	r27, 0x00	; 0
    4ff4:	ee ef       	ldi	r30, 0xFE	; 254
    4ff6:	f7 e2       	ldi	r31, 0x27	; 39
    4ff8:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__prologue_saves__+0x1c>
    4ffc:	0d 89       	ldd	r16, Y+21	; 0x15
    4ffe:	1e 89       	ldd	r17, Y+22	; 0x16
    5000:	86 e0       	ldi	r24, 0x06	; 6
    5002:	8c 83       	std	Y+4, r24	; 0x04
    5004:	1a 83       	std	Y+2, r17	; 0x02
    5006:	09 83       	std	Y+1, r16	; 0x01
    5008:	8f ef       	ldi	r24, 0xFF	; 255
    500a:	9f e7       	ldi	r25, 0x7F	; 127
    500c:	9e 83       	std	Y+6, r25	; 0x06
    500e:	8d 83       	std	Y+5, r24	; 0x05
    5010:	ae 01       	movw	r20, r28
    5012:	47 5e       	subi	r20, 0xE7	; 231
    5014:	5f 4f       	sbci	r21, 0xFF	; 255
    5016:	6f 89       	ldd	r22, Y+23	; 0x17
    5018:	78 8d       	ldd	r23, Y+24	; 0x18
    501a:	ce 01       	movw	r24, r28
    501c:	01 96       	adiw	r24, 0x01	; 1
    501e:	0e 94 1a 28 	call	0x5034	; 0x5034 <vfprintf>
    5022:	ef 81       	ldd	r30, Y+7	; 0x07
    5024:	f8 85       	ldd	r31, Y+8	; 0x08
    5026:	e0 0f       	add	r30, r16
    5028:	f1 1f       	adc	r31, r17
    502a:	10 82       	st	Z, r1
    502c:	2e 96       	adiw	r28, 0x0e	; 14
    502e:	e4 e0       	ldi	r30, 0x04	; 4
    5030:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__epilogue_restores__+0x1c>

00005034 <vfprintf>:
    5034:	ab e0       	ldi	r26, 0x0B	; 11
    5036:	b0 e0       	ldi	r27, 0x00	; 0
    5038:	e0 e2       	ldi	r30, 0x20	; 32
    503a:	f8 e2       	ldi	r31, 0x28	; 40
    503c:	0c 94 ab 2a 	jmp	0x5556	; 0x5556 <__prologue_saves__>
    5040:	6c 01       	movw	r12, r24
    5042:	7b 01       	movw	r14, r22
    5044:	8a 01       	movw	r16, r20
    5046:	fc 01       	movw	r30, r24
    5048:	17 82       	std	Z+7, r1	; 0x07
    504a:	16 82       	std	Z+6, r1	; 0x06
    504c:	83 81       	ldd	r24, Z+3	; 0x03
    504e:	81 ff       	sbrs	r24, 1
    5050:	cc c1       	rjmp	.+920    	; 0x53ea <vfprintf+0x3b6>
    5052:	ce 01       	movw	r24, r28
    5054:	01 96       	adiw	r24, 0x01	; 1
    5056:	3c 01       	movw	r6, r24
    5058:	f6 01       	movw	r30, r12
    505a:	93 81       	ldd	r25, Z+3	; 0x03
    505c:	f7 01       	movw	r30, r14
    505e:	93 fd       	sbrc	r25, 3
    5060:	85 91       	lpm	r24, Z+
    5062:	93 ff       	sbrs	r25, 3
    5064:	81 91       	ld	r24, Z+
    5066:	7f 01       	movw	r14, r30
    5068:	88 23       	and	r24, r24
    506a:	09 f4       	brne	.+2      	; 0x506e <vfprintf+0x3a>
    506c:	ba c1       	rjmp	.+884    	; 0x53e2 <vfprintf+0x3ae>
    506e:	85 32       	cpi	r24, 0x25	; 37
    5070:	39 f4       	brne	.+14     	; 0x5080 <vfprintf+0x4c>
    5072:	93 fd       	sbrc	r25, 3
    5074:	85 91       	lpm	r24, Z+
    5076:	93 ff       	sbrs	r25, 3
    5078:	81 91       	ld	r24, Z+
    507a:	7f 01       	movw	r14, r30
    507c:	85 32       	cpi	r24, 0x25	; 37
    507e:	29 f4       	brne	.+10     	; 0x508a <vfprintf+0x56>
    5080:	b6 01       	movw	r22, r12
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    5088:	e7 cf       	rjmp	.-50     	; 0x5058 <vfprintf+0x24>
    508a:	91 2c       	mov	r9, r1
    508c:	21 2c       	mov	r2, r1
    508e:	31 2c       	mov	r3, r1
    5090:	ff e1       	ldi	r31, 0x1F	; 31
    5092:	f3 15       	cp	r31, r3
    5094:	d8 f0       	brcs	.+54     	; 0x50cc <vfprintf+0x98>
    5096:	8b 32       	cpi	r24, 0x2B	; 43
    5098:	79 f0       	breq	.+30     	; 0x50b8 <vfprintf+0x84>
    509a:	38 f4       	brcc	.+14     	; 0x50aa <vfprintf+0x76>
    509c:	80 32       	cpi	r24, 0x20	; 32
    509e:	79 f0       	breq	.+30     	; 0x50be <vfprintf+0x8a>
    50a0:	83 32       	cpi	r24, 0x23	; 35
    50a2:	a1 f4       	brne	.+40     	; 0x50cc <vfprintf+0x98>
    50a4:	23 2d       	mov	r18, r3
    50a6:	20 61       	ori	r18, 0x10	; 16
    50a8:	1d c0       	rjmp	.+58     	; 0x50e4 <vfprintf+0xb0>
    50aa:	8d 32       	cpi	r24, 0x2D	; 45
    50ac:	61 f0       	breq	.+24     	; 0x50c6 <vfprintf+0x92>
    50ae:	80 33       	cpi	r24, 0x30	; 48
    50b0:	69 f4       	brne	.+26     	; 0x50cc <vfprintf+0x98>
    50b2:	23 2d       	mov	r18, r3
    50b4:	21 60       	ori	r18, 0x01	; 1
    50b6:	16 c0       	rjmp	.+44     	; 0x50e4 <vfprintf+0xb0>
    50b8:	83 2d       	mov	r24, r3
    50ba:	82 60       	ori	r24, 0x02	; 2
    50bc:	38 2e       	mov	r3, r24
    50be:	e3 2d       	mov	r30, r3
    50c0:	e4 60       	ori	r30, 0x04	; 4
    50c2:	3e 2e       	mov	r3, r30
    50c4:	2a c0       	rjmp	.+84     	; 0x511a <vfprintf+0xe6>
    50c6:	f3 2d       	mov	r31, r3
    50c8:	f8 60       	ori	r31, 0x08	; 8
    50ca:	1d c0       	rjmp	.+58     	; 0x5106 <vfprintf+0xd2>
    50cc:	37 fc       	sbrc	r3, 7
    50ce:	2d c0       	rjmp	.+90     	; 0x512a <vfprintf+0xf6>
    50d0:	20 ed       	ldi	r18, 0xD0	; 208
    50d2:	28 0f       	add	r18, r24
    50d4:	2a 30       	cpi	r18, 0x0A	; 10
    50d6:	40 f0       	brcs	.+16     	; 0x50e8 <vfprintf+0xb4>
    50d8:	8e 32       	cpi	r24, 0x2E	; 46
    50da:	b9 f4       	brne	.+46     	; 0x510a <vfprintf+0xd6>
    50dc:	36 fc       	sbrc	r3, 6
    50de:	81 c1       	rjmp	.+770    	; 0x53e2 <vfprintf+0x3ae>
    50e0:	23 2d       	mov	r18, r3
    50e2:	20 64       	ori	r18, 0x40	; 64
    50e4:	32 2e       	mov	r3, r18
    50e6:	19 c0       	rjmp	.+50     	; 0x511a <vfprintf+0xe6>
    50e8:	36 fe       	sbrs	r3, 6
    50ea:	06 c0       	rjmp	.+12     	; 0x50f8 <vfprintf+0xc4>
    50ec:	8a e0       	ldi	r24, 0x0A	; 10
    50ee:	98 9e       	mul	r9, r24
    50f0:	20 0d       	add	r18, r0
    50f2:	11 24       	eor	r1, r1
    50f4:	92 2e       	mov	r9, r18
    50f6:	11 c0       	rjmp	.+34     	; 0x511a <vfprintf+0xe6>
    50f8:	ea e0       	ldi	r30, 0x0A	; 10
    50fa:	2e 9e       	mul	r2, r30
    50fc:	20 0d       	add	r18, r0
    50fe:	11 24       	eor	r1, r1
    5100:	22 2e       	mov	r2, r18
    5102:	f3 2d       	mov	r31, r3
    5104:	f0 62       	ori	r31, 0x20	; 32
    5106:	3f 2e       	mov	r3, r31
    5108:	08 c0       	rjmp	.+16     	; 0x511a <vfprintf+0xe6>
    510a:	8c 36       	cpi	r24, 0x6C	; 108
    510c:	21 f4       	brne	.+8      	; 0x5116 <vfprintf+0xe2>
    510e:	83 2d       	mov	r24, r3
    5110:	80 68       	ori	r24, 0x80	; 128
    5112:	38 2e       	mov	r3, r24
    5114:	02 c0       	rjmp	.+4      	; 0x511a <vfprintf+0xe6>
    5116:	88 36       	cpi	r24, 0x68	; 104
    5118:	41 f4       	brne	.+16     	; 0x512a <vfprintf+0xf6>
    511a:	f7 01       	movw	r30, r14
    511c:	93 fd       	sbrc	r25, 3
    511e:	85 91       	lpm	r24, Z+
    5120:	93 ff       	sbrs	r25, 3
    5122:	81 91       	ld	r24, Z+
    5124:	7f 01       	movw	r14, r30
    5126:	81 11       	cpse	r24, r1
    5128:	b3 cf       	rjmp	.-154    	; 0x5090 <vfprintf+0x5c>
    512a:	98 2f       	mov	r25, r24
    512c:	9f 7d       	andi	r25, 0xDF	; 223
    512e:	95 54       	subi	r25, 0x45	; 69
    5130:	93 30       	cpi	r25, 0x03	; 3
    5132:	28 f4       	brcc	.+10     	; 0x513e <vfprintf+0x10a>
    5134:	0c 5f       	subi	r16, 0xFC	; 252
    5136:	1f 4f       	sbci	r17, 0xFF	; 255
    5138:	9f e3       	ldi	r25, 0x3F	; 63
    513a:	99 83       	std	Y+1, r25	; 0x01
    513c:	0d c0       	rjmp	.+26     	; 0x5158 <vfprintf+0x124>
    513e:	83 36       	cpi	r24, 0x63	; 99
    5140:	31 f0       	breq	.+12     	; 0x514e <vfprintf+0x11a>
    5142:	83 37       	cpi	r24, 0x73	; 115
    5144:	71 f0       	breq	.+28     	; 0x5162 <vfprintf+0x12e>
    5146:	83 35       	cpi	r24, 0x53	; 83
    5148:	09 f0       	breq	.+2      	; 0x514c <vfprintf+0x118>
    514a:	59 c0       	rjmp	.+178    	; 0x51fe <vfprintf+0x1ca>
    514c:	21 c0       	rjmp	.+66     	; 0x5190 <vfprintf+0x15c>
    514e:	f8 01       	movw	r30, r16
    5150:	80 81       	ld	r24, Z
    5152:	89 83       	std	Y+1, r24	; 0x01
    5154:	0e 5f       	subi	r16, 0xFE	; 254
    5156:	1f 4f       	sbci	r17, 0xFF	; 255
    5158:	88 24       	eor	r8, r8
    515a:	83 94       	inc	r8
    515c:	91 2c       	mov	r9, r1
    515e:	53 01       	movw	r10, r6
    5160:	13 c0       	rjmp	.+38     	; 0x5188 <vfprintf+0x154>
    5162:	28 01       	movw	r4, r16
    5164:	f2 e0       	ldi	r31, 0x02	; 2
    5166:	4f 0e       	add	r4, r31
    5168:	51 1c       	adc	r5, r1
    516a:	f8 01       	movw	r30, r16
    516c:	a0 80       	ld	r10, Z
    516e:	b1 80       	ldd	r11, Z+1	; 0x01
    5170:	36 fe       	sbrs	r3, 6
    5172:	03 c0       	rjmp	.+6      	; 0x517a <vfprintf+0x146>
    5174:	69 2d       	mov	r22, r9
    5176:	70 e0       	ldi	r23, 0x00	; 0
    5178:	02 c0       	rjmp	.+4      	; 0x517e <vfprintf+0x14a>
    517a:	6f ef       	ldi	r22, 0xFF	; 255
    517c:	7f ef       	ldi	r23, 0xFF	; 255
    517e:	c5 01       	movw	r24, r10
    5180:	0e 94 06 2a 	call	0x540c	; 0x540c <strnlen>
    5184:	4c 01       	movw	r8, r24
    5186:	82 01       	movw	r16, r4
    5188:	f3 2d       	mov	r31, r3
    518a:	ff 77       	andi	r31, 0x7F	; 127
    518c:	3f 2e       	mov	r3, r31
    518e:	16 c0       	rjmp	.+44     	; 0x51bc <vfprintf+0x188>
    5190:	28 01       	movw	r4, r16
    5192:	22 e0       	ldi	r18, 0x02	; 2
    5194:	42 0e       	add	r4, r18
    5196:	51 1c       	adc	r5, r1
    5198:	f8 01       	movw	r30, r16
    519a:	a0 80       	ld	r10, Z
    519c:	b1 80       	ldd	r11, Z+1	; 0x01
    519e:	36 fe       	sbrs	r3, 6
    51a0:	03 c0       	rjmp	.+6      	; 0x51a8 <vfprintf+0x174>
    51a2:	69 2d       	mov	r22, r9
    51a4:	70 e0       	ldi	r23, 0x00	; 0
    51a6:	02 c0       	rjmp	.+4      	; 0x51ac <vfprintf+0x178>
    51a8:	6f ef       	ldi	r22, 0xFF	; 255
    51aa:	7f ef       	ldi	r23, 0xFF	; 255
    51ac:	c5 01       	movw	r24, r10
    51ae:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strnlen_P>
    51b2:	4c 01       	movw	r8, r24
    51b4:	f3 2d       	mov	r31, r3
    51b6:	f0 68       	ori	r31, 0x80	; 128
    51b8:	3f 2e       	mov	r3, r31
    51ba:	82 01       	movw	r16, r4
    51bc:	33 fc       	sbrc	r3, 3
    51be:	1b c0       	rjmp	.+54     	; 0x51f6 <vfprintf+0x1c2>
    51c0:	82 2d       	mov	r24, r2
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	88 16       	cp	r8, r24
    51c6:	99 06       	cpc	r9, r25
    51c8:	b0 f4       	brcc	.+44     	; 0x51f6 <vfprintf+0x1c2>
    51ca:	b6 01       	movw	r22, r12
    51cc:	80 e2       	ldi	r24, 0x20	; 32
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    51d4:	2a 94       	dec	r2
    51d6:	f4 cf       	rjmp	.-24     	; 0x51c0 <vfprintf+0x18c>
    51d8:	f5 01       	movw	r30, r10
    51da:	37 fc       	sbrc	r3, 7
    51dc:	85 91       	lpm	r24, Z+
    51de:	37 fe       	sbrs	r3, 7
    51e0:	81 91       	ld	r24, Z+
    51e2:	5f 01       	movw	r10, r30
    51e4:	b6 01       	movw	r22, r12
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    51ec:	21 10       	cpse	r2, r1
    51ee:	2a 94       	dec	r2
    51f0:	21 e0       	ldi	r18, 0x01	; 1
    51f2:	82 1a       	sub	r8, r18
    51f4:	91 08       	sbc	r9, r1
    51f6:	81 14       	cp	r8, r1
    51f8:	91 04       	cpc	r9, r1
    51fa:	71 f7       	brne	.-36     	; 0x51d8 <vfprintf+0x1a4>
    51fc:	e8 c0       	rjmp	.+464    	; 0x53ce <vfprintf+0x39a>
    51fe:	84 36       	cpi	r24, 0x64	; 100
    5200:	11 f0       	breq	.+4      	; 0x5206 <vfprintf+0x1d2>
    5202:	89 36       	cpi	r24, 0x69	; 105
    5204:	41 f5       	brne	.+80     	; 0x5256 <vfprintf+0x222>
    5206:	f8 01       	movw	r30, r16
    5208:	37 fe       	sbrs	r3, 7
    520a:	07 c0       	rjmp	.+14     	; 0x521a <vfprintf+0x1e6>
    520c:	60 81       	ld	r22, Z
    520e:	71 81       	ldd	r23, Z+1	; 0x01
    5210:	82 81       	ldd	r24, Z+2	; 0x02
    5212:	93 81       	ldd	r25, Z+3	; 0x03
    5214:	0c 5f       	subi	r16, 0xFC	; 252
    5216:	1f 4f       	sbci	r17, 0xFF	; 255
    5218:	08 c0       	rjmp	.+16     	; 0x522a <vfprintf+0x1f6>
    521a:	60 81       	ld	r22, Z
    521c:	71 81       	ldd	r23, Z+1	; 0x01
    521e:	07 2e       	mov	r0, r23
    5220:	00 0c       	add	r0, r0
    5222:	88 0b       	sbc	r24, r24
    5224:	99 0b       	sbc	r25, r25
    5226:	0e 5f       	subi	r16, 0xFE	; 254
    5228:	1f 4f       	sbci	r17, 0xFF	; 255
    522a:	f3 2d       	mov	r31, r3
    522c:	ff 76       	andi	r31, 0x6F	; 111
    522e:	3f 2e       	mov	r3, r31
    5230:	97 ff       	sbrs	r25, 7
    5232:	09 c0       	rjmp	.+18     	; 0x5246 <vfprintf+0x212>
    5234:	90 95       	com	r25
    5236:	80 95       	com	r24
    5238:	70 95       	com	r23
    523a:	61 95       	neg	r22
    523c:	7f 4f       	sbci	r23, 0xFF	; 255
    523e:	8f 4f       	sbci	r24, 0xFF	; 255
    5240:	9f 4f       	sbci	r25, 0xFF	; 255
    5242:	f0 68       	ori	r31, 0x80	; 128
    5244:	3f 2e       	mov	r3, r31
    5246:	2a e0       	ldi	r18, 0x0A	; 10
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	a3 01       	movw	r20, r6
    524c:	0e 94 4d 2a 	call	0x549a	; 0x549a <__ultoa_invert>
    5250:	88 2e       	mov	r8, r24
    5252:	86 18       	sub	r8, r6
    5254:	45 c0       	rjmp	.+138    	; 0x52e0 <vfprintf+0x2ac>
    5256:	85 37       	cpi	r24, 0x75	; 117
    5258:	31 f4       	brne	.+12     	; 0x5266 <vfprintf+0x232>
    525a:	23 2d       	mov	r18, r3
    525c:	2f 7e       	andi	r18, 0xEF	; 239
    525e:	b2 2e       	mov	r11, r18
    5260:	2a e0       	ldi	r18, 0x0A	; 10
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	25 c0       	rjmp	.+74     	; 0x52b0 <vfprintf+0x27c>
    5266:	93 2d       	mov	r25, r3
    5268:	99 7f       	andi	r25, 0xF9	; 249
    526a:	b9 2e       	mov	r11, r25
    526c:	8f 36       	cpi	r24, 0x6F	; 111
    526e:	c1 f0       	breq	.+48     	; 0x52a0 <vfprintf+0x26c>
    5270:	18 f4       	brcc	.+6      	; 0x5278 <vfprintf+0x244>
    5272:	88 35       	cpi	r24, 0x58	; 88
    5274:	79 f0       	breq	.+30     	; 0x5294 <vfprintf+0x260>
    5276:	b5 c0       	rjmp	.+362    	; 0x53e2 <vfprintf+0x3ae>
    5278:	80 37       	cpi	r24, 0x70	; 112
    527a:	19 f0       	breq	.+6      	; 0x5282 <vfprintf+0x24e>
    527c:	88 37       	cpi	r24, 0x78	; 120
    527e:	21 f0       	breq	.+8      	; 0x5288 <vfprintf+0x254>
    5280:	b0 c0       	rjmp	.+352    	; 0x53e2 <vfprintf+0x3ae>
    5282:	e9 2f       	mov	r30, r25
    5284:	e0 61       	ori	r30, 0x10	; 16
    5286:	be 2e       	mov	r11, r30
    5288:	b4 fe       	sbrs	r11, 4
    528a:	0d c0       	rjmp	.+26     	; 0x52a6 <vfprintf+0x272>
    528c:	fb 2d       	mov	r31, r11
    528e:	f4 60       	ori	r31, 0x04	; 4
    5290:	bf 2e       	mov	r11, r31
    5292:	09 c0       	rjmp	.+18     	; 0x52a6 <vfprintf+0x272>
    5294:	34 fe       	sbrs	r3, 4
    5296:	0a c0       	rjmp	.+20     	; 0x52ac <vfprintf+0x278>
    5298:	29 2f       	mov	r18, r25
    529a:	26 60       	ori	r18, 0x06	; 6
    529c:	b2 2e       	mov	r11, r18
    529e:	06 c0       	rjmp	.+12     	; 0x52ac <vfprintf+0x278>
    52a0:	28 e0       	ldi	r18, 0x08	; 8
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	05 c0       	rjmp	.+10     	; 0x52b0 <vfprintf+0x27c>
    52a6:	20 e1       	ldi	r18, 0x10	; 16
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <vfprintf+0x27c>
    52ac:	20 e1       	ldi	r18, 0x10	; 16
    52ae:	32 e0       	ldi	r19, 0x02	; 2
    52b0:	f8 01       	movw	r30, r16
    52b2:	b7 fe       	sbrs	r11, 7
    52b4:	07 c0       	rjmp	.+14     	; 0x52c4 <vfprintf+0x290>
    52b6:	60 81       	ld	r22, Z
    52b8:	71 81       	ldd	r23, Z+1	; 0x01
    52ba:	82 81       	ldd	r24, Z+2	; 0x02
    52bc:	93 81       	ldd	r25, Z+3	; 0x03
    52be:	0c 5f       	subi	r16, 0xFC	; 252
    52c0:	1f 4f       	sbci	r17, 0xFF	; 255
    52c2:	06 c0       	rjmp	.+12     	; 0x52d0 <vfprintf+0x29c>
    52c4:	60 81       	ld	r22, Z
    52c6:	71 81       	ldd	r23, Z+1	; 0x01
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	0e 5f       	subi	r16, 0xFE	; 254
    52ce:	1f 4f       	sbci	r17, 0xFF	; 255
    52d0:	a3 01       	movw	r20, r6
    52d2:	0e 94 4d 2a 	call	0x549a	; 0x549a <__ultoa_invert>
    52d6:	88 2e       	mov	r8, r24
    52d8:	86 18       	sub	r8, r6
    52da:	fb 2d       	mov	r31, r11
    52dc:	ff 77       	andi	r31, 0x7F	; 127
    52de:	3f 2e       	mov	r3, r31
    52e0:	36 fe       	sbrs	r3, 6
    52e2:	0d c0       	rjmp	.+26     	; 0x52fe <vfprintf+0x2ca>
    52e4:	23 2d       	mov	r18, r3
    52e6:	2e 7f       	andi	r18, 0xFE	; 254
    52e8:	a2 2e       	mov	r10, r18
    52ea:	89 14       	cp	r8, r9
    52ec:	58 f4       	brcc	.+22     	; 0x5304 <vfprintf+0x2d0>
    52ee:	34 fe       	sbrs	r3, 4
    52f0:	0b c0       	rjmp	.+22     	; 0x5308 <vfprintf+0x2d4>
    52f2:	32 fc       	sbrc	r3, 2
    52f4:	09 c0       	rjmp	.+18     	; 0x5308 <vfprintf+0x2d4>
    52f6:	83 2d       	mov	r24, r3
    52f8:	8e 7e       	andi	r24, 0xEE	; 238
    52fa:	a8 2e       	mov	r10, r24
    52fc:	05 c0       	rjmp	.+10     	; 0x5308 <vfprintf+0x2d4>
    52fe:	b8 2c       	mov	r11, r8
    5300:	a3 2c       	mov	r10, r3
    5302:	03 c0       	rjmp	.+6      	; 0x530a <vfprintf+0x2d6>
    5304:	b8 2c       	mov	r11, r8
    5306:	01 c0       	rjmp	.+2      	; 0x530a <vfprintf+0x2d6>
    5308:	b9 2c       	mov	r11, r9
    530a:	a4 fe       	sbrs	r10, 4
    530c:	0f c0       	rjmp	.+30     	; 0x532c <vfprintf+0x2f8>
    530e:	fe 01       	movw	r30, r28
    5310:	e8 0d       	add	r30, r8
    5312:	f1 1d       	adc	r31, r1
    5314:	80 81       	ld	r24, Z
    5316:	80 33       	cpi	r24, 0x30	; 48
    5318:	21 f4       	brne	.+8      	; 0x5322 <vfprintf+0x2ee>
    531a:	9a 2d       	mov	r25, r10
    531c:	99 7e       	andi	r25, 0xE9	; 233
    531e:	a9 2e       	mov	r10, r25
    5320:	09 c0       	rjmp	.+18     	; 0x5334 <vfprintf+0x300>
    5322:	a2 fe       	sbrs	r10, 2
    5324:	06 c0       	rjmp	.+12     	; 0x5332 <vfprintf+0x2fe>
    5326:	b3 94       	inc	r11
    5328:	b3 94       	inc	r11
    532a:	04 c0       	rjmp	.+8      	; 0x5334 <vfprintf+0x300>
    532c:	8a 2d       	mov	r24, r10
    532e:	86 78       	andi	r24, 0x86	; 134
    5330:	09 f0       	breq	.+2      	; 0x5334 <vfprintf+0x300>
    5332:	b3 94       	inc	r11
    5334:	a3 fc       	sbrc	r10, 3
    5336:	11 c0       	rjmp	.+34     	; 0x535a <vfprintf+0x326>
    5338:	a0 fe       	sbrs	r10, 0
    533a:	06 c0       	rjmp	.+12     	; 0x5348 <vfprintf+0x314>
    533c:	b2 14       	cp	r11, r2
    533e:	88 f4       	brcc	.+34     	; 0x5362 <vfprintf+0x32e>
    5340:	28 0c       	add	r2, r8
    5342:	92 2c       	mov	r9, r2
    5344:	9b 18       	sub	r9, r11
    5346:	0e c0       	rjmp	.+28     	; 0x5364 <vfprintf+0x330>
    5348:	b2 14       	cp	r11, r2
    534a:	60 f4       	brcc	.+24     	; 0x5364 <vfprintf+0x330>
    534c:	b6 01       	movw	r22, r12
    534e:	80 e2       	ldi	r24, 0x20	; 32
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    5356:	b3 94       	inc	r11
    5358:	f7 cf       	rjmp	.-18     	; 0x5348 <vfprintf+0x314>
    535a:	b2 14       	cp	r11, r2
    535c:	18 f4       	brcc	.+6      	; 0x5364 <vfprintf+0x330>
    535e:	2b 18       	sub	r2, r11
    5360:	02 c0       	rjmp	.+4      	; 0x5366 <vfprintf+0x332>
    5362:	98 2c       	mov	r9, r8
    5364:	21 2c       	mov	r2, r1
    5366:	a4 fe       	sbrs	r10, 4
    5368:	10 c0       	rjmp	.+32     	; 0x538a <vfprintf+0x356>
    536a:	b6 01       	movw	r22, r12
    536c:	80 e3       	ldi	r24, 0x30	; 48
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    5374:	a2 fe       	sbrs	r10, 2
    5376:	17 c0       	rjmp	.+46     	; 0x53a6 <vfprintf+0x372>
    5378:	a1 fc       	sbrc	r10, 1
    537a:	03 c0       	rjmp	.+6      	; 0x5382 <vfprintf+0x34e>
    537c:	88 e7       	ldi	r24, 0x78	; 120
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	02 c0       	rjmp	.+4      	; 0x5386 <vfprintf+0x352>
    5382:	88 e5       	ldi	r24, 0x58	; 88
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	b6 01       	movw	r22, r12
    5388:	0c c0       	rjmp	.+24     	; 0x53a2 <vfprintf+0x36e>
    538a:	8a 2d       	mov	r24, r10
    538c:	86 78       	andi	r24, 0x86	; 134
    538e:	59 f0       	breq	.+22     	; 0x53a6 <vfprintf+0x372>
    5390:	a1 fe       	sbrs	r10, 1
    5392:	02 c0       	rjmp	.+4      	; 0x5398 <vfprintf+0x364>
    5394:	8b e2       	ldi	r24, 0x2B	; 43
    5396:	01 c0       	rjmp	.+2      	; 0x539a <vfprintf+0x366>
    5398:	80 e2       	ldi	r24, 0x20	; 32
    539a:	a7 fc       	sbrc	r10, 7
    539c:	8d e2       	ldi	r24, 0x2D	; 45
    539e:	b6 01       	movw	r22, r12
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    53a6:	89 14       	cp	r8, r9
    53a8:	38 f4       	brcc	.+14     	; 0x53b8 <vfprintf+0x384>
    53aa:	b6 01       	movw	r22, r12
    53ac:	80 e3       	ldi	r24, 0x30	; 48
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    53b4:	9a 94       	dec	r9
    53b6:	f7 cf       	rjmp	.-18     	; 0x53a6 <vfprintf+0x372>
    53b8:	8a 94       	dec	r8
    53ba:	f3 01       	movw	r30, r6
    53bc:	e8 0d       	add	r30, r8
    53be:	f1 1d       	adc	r31, r1
    53c0:	80 81       	ld	r24, Z
    53c2:	b6 01       	movw	r22, r12
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    53ca:	81 10       	cpse	r8, r1
    53cc:	f5 cf       	rjmp	.-22     	; 0x53b8 <vfprintf+0x384>
    53ce:	22 20       	and	r2, r2
    53d0:	09 f4       	brne	.+2      	; 0x53d4 <vfprintf+0x3a0>
    53d2:	42 ce       	rjmp	.-892    	; 0x5058 <vfprintf+0x24>
    53d4:	b6 01       	movw	r22, r12
    53d6:	80 e2       	ldi	r24, 0x20	; 32
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	0e 94 11 2a 	call	0x5422	; 0x5422 <fputc>
    53de:	2a 94       	dec	r2
    53e0:	f6 cf       	rjmp	.-20     	; 0x53ce <vfprintf+0x39a>
    53e2:	f6 01       	movw	r30, r12
    53e4:	86 81       	ldd	r24, Z+6	; 0x06
    53e6:	97 81       	ldd	r25, Z+7	; 0x07
    53e8:	02 c0       	rjmp	.+4      	; 0x53ee <vfprintf+0x3ba>
    53ea:	8f ef       	ldi	r24, 0xFF	; 255
    53ec:	9f ef       	ldi	r25, 0xFF	; 255
    53ee:	2b 96       	adiw	r28, 0x0b	; 11
    53f0:	e2 e1       	ldi	r30, 0x12	; 18
    53f2:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <__epilogue_restores__>

000053f6 <strnlen_P>:
    53f6:	fc 01       	movw	r30, r24
    53f8:	05 90       	lpm	r0, Z+
    53fa:	61 50       	subi	r22, 0x01	; 1
    53fc:	70 40       	sbci	r23, 0x00	; 0
    53fe:	01 10       	cpse	r0, r1
    5400:	d8 f7       	brcc	.-10     	; 0x53f8 <strnlen_P+0x2>
    5402:	80 95       	com	r24
    5404:	90 95       	com	r25
    5406:	8e 0f       	add	r24, r30
    5408:	9f 1f       	adc	r25, r31
    540a:	08 95       	ret

0000540c <strnlen>:
    540c:	fc 01       	movw	r30, r24
    540e:	61 50       	subi	r22, 0x01	; 1
    5410:	70 40       	sbci	r23, 0x00	; 0
    5412:	01 90       	ld	r0, Z+
    5414:	01 10       	cpse	r0, r1
    5416:	d8 f7       	brcc	.-10     	; 0x540e <strnlen+0x2>
    5418:	80 95       	com	r24
    541a:	90 95       	com	r25
    541c:	8e 0f       	add	r24, r30
    541e:	9f 1f       	adc	r25, r31
    5420:	08 95       	ret

00005422 <fputc>:
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	fb 01       	movw	r30, r22
    542c:	23 81       	ldd	r18, Z+3	; 0x03
    542e:	21 fd       	sbrc	r18, 1
    5430:	03 c0       	rjmp	.+6      	; 0x5438 <fputc+0x16>
    5432:	8f ef       	ldi	r24, 0xFF	; 255
    5434:	9f ef       	ldi	r25, 0xFF	; 255
    5436:	2c c0       	rjmp	.+88     	; 0x5490 <fputc+0x6e>
    5438:	22 ff       	sbrs	r18, 2
    543a:	16 c0       	rjmp	.+44     	; 0x5468 <fputc+0x46>
    543c:	46 81       	ldd	r20, Z+6	; 0x06
    543e:	57 81       	ldd	r21, Z+7	; 0x07
    5440:	24 81       	ldd	r18, Z+4	; 0x04
    5442:	35 81       	ldd	r19, Z+5	; 0x05
    5444:	42 17       	cp	r20, r18
    5446:	53 07       	cpc	r21, r19
    5448:	44 f4       	brge	.+16     	; 0x545a <fputc+0x38>
    544a:	a0 81       	ld	r26, Z
    544c:	b1 81       	ldd	r27, Z+1	; 0x01
    544e:	9d 01       	movw	r18, r26
    5450:	2f 5f       	subi	r18, 0xFF	; 255
    5452:	3f 4f       	sbci	r19, 0xFF	; 255
    5454:	31 83       	std	Z+1, r19	; 0x01
    5456:	20 83       	st	Z, r18
    5458:	8c 93       	st	X, r24
    545a:	26 81       	ldd	r18, Z+6	; 0x06
    545c:	37 81       	ldd	r19, Z+7	; 0x07
    545e:	2f 5f       	subi	r18, 0xFF	; 255
    5460:	3f 4f       	sbci	r19, 0xFF	; 255
    5462:	37 83       	std	Z+7, r19	; 0x07
    5464:	26 83       	std	Z+6, r18	; 0x06
    5466:	14 c0       	rjmp	.+40     	; 0x5490 <fputc+0x6e>
    5468:	8b 01       	movw	r16, r22
    546a:	ec 01       	movw	r28, r24
    546c:	fb 01       	movw	r30, r22
    546e:	00 84       	ldd	r0, Z+8	; 0x08
    5470:	f1 85       	ldd	r31, Z+9	; 0x09
    5472:	e0 2d       	mov	r30, r0
    5474:	09 95       	icall
    5476:	89 2b       	or	r24, r25
    5478:	e1 f6       	brne	.-72     	; 0x5432 <fputc+0x10>
    547a:	d8 01       	movw	r26, r16
    547c:	16 96       	adiw	r26, 0x06	; 6
    547e:	8d 91       	ld	r24, X+
    5480:	9c 91       	ld	r25, X
    5482:	17 97       	sbiw	r26, 0x07	; 7
    5484:	01 96       	adiw	r24, 0x01	; 1
    5486:	17 96       	adiw	r26, 0x07	; 7
    5488:	9c 93       	st	X, r25
    548a:	8e 93       	st	-X, r24
    548c:	16 97       	sbiw	r26, 0x06	; 6
    548e:	ce 01       	movw	r24, r28
    5490:	df 91       	pop	r29
    5492:	cf 91       	pop	r28
    5494:	1f 91       	pop	r17
    5496:	0f 91       	pop	r16
    5498:	08 95       	ret

0000549a <__ultoa_invert>:
    549a:	fa 01       	movw	r30, r20
    549c:	aa 27       	eor	r26, r26
    549e:	28 30       	cpi	r18, 0x08	; 8
    54a0:	51 f1       	breq	.+84     	; 0x54f6 <__ultoa_invert+0x5c>
    54a2:	20 31       	cpi	r18, 0x10	; 16
    54a4:	81 f1       	breq	.+96     	; 0x5506 <__ultoa_invert+0x6c>
    54a6:	e8 94       	clt
    54a8:	6f 93       	push	r22
    54aa:	6e 7f       	andi	r22, 0xFE	; 254
    54ac:	6e 5f       	subi	r22, 0xFE	; 254
    54ae:	7f 4f       	sbci	r23, 0xFF	; 255
    54b0:	8f 4f       	sbci	r24, 0xFF	; 255
    54b2:	9f 4f       	sbci	r25, 0xFF	; 255
    54b4:	af 4f       	sbci	r26, 0xFF	; 255
    54b6:	b1 e0       	ldi	r27, 0x01	; 1
    54b8:	3e d0       	rcall	.+124    	; 0x5536 <__ultoa_invert+0x9c>
    54ba:	b4 e0       	ldi	r27, 0x04	; 4
    54bc:	3c d0       	rcall	.+120    	; 0x5536 <__ultoa_invert+0x9c>
    54be:	67 0f       	add	r22, r23
    54c0:	78 1f       	adc	r23, r24
    54c2:	89 1f       	adc	r24, r25
    54c4:	9a 1f       	adc	r25, r26
    54c6:	a1 1d       	adc	r26, r1
    54c8:	68 0f       	add	r22, r24
    54ca:	79 1f       	adc	r23, r25
    54cc:	8a 1f       	adc	r24, r26
    54ce:	91 1d       	adc	r25, r1
    54d0:	a1 1d       	adc	r26, r1
    54d2:	6a 0f       	add	r22, r26
    54d4:	71 1d       	adc	r23, r1
    54d6:	81 1d       	adc	r24, r1
    54d8:	91 1d       	adc	r25, r1
    54da:	a1 1d       	adc	r26, r1
    54dc:	20 d0       	rcall	.+64     	; 0x551e <__ultoa_invert+0x84>
    54de:	09 f4       	brne	.+2      	; 0x54e2 <__ultoa_invert+0x48>
    54e0:	68 94       	set
    54e2:	3f 91       	pop	r19
    54e4:	2a e0       	ldi	r18, 0x0A	; 10
    54e6:	26 9f       	mul	r18, r22
    54e8:	11 24       	eor	r1, r1
    54ea:	30 19       	sub	r19, r0
    54ec:	30 5d       	subi	r19, 0xD0	; 208
    54ee:	31 93       	st	Z+, r19
    54f0:	de f6       	brtc	.-74     	; 0x54a8 <__ultoa_invert+0xe>
    54f2:	cf 01       	movw	r24, r30
    54f4:	08 95       	ret
    54f6:	46 2f       	mov	r20, r22
    54f8:	47 70       	andi	r20, 0x07	; 7
    54fa:	40 5d       	subi	r20, 0xD0	; 208
    54fc:	41 93       	st	Z+, r20
    54fe:	b3 e0       	ldi	r27, 0x03	; 3
    5500:	0f d0       	rcall	.+30     	; 0x5520 <__ultoa_invert+0x86>
    5502:	c9 f7       	brne	.-14     	; 0x54f6 <__ultoa_invert+0x5c>
    5504:	f6 cf       	rjmp	.-20     	; 0x54f2 <__ultoa_invert+0x58>
    5506:	46 2f       	mov	r20, r22
    5508:	4f 70       	andi	r20, 0x0F	; 15
    550a:	40 5d       	subi	r20, 0xD0	; 208
    550c:	4a 33       	cpi	r20, 0x3A	; 58
    550e:	18 f0       	brcs	.+6      	; 0x5516 <__ultoa_invert+0x7c>
    5510:	49 5d       	subi	r20, 0xD9	; 217
    5512:	31 fd       	sbrc	r19, 1
    5514:	40 52       	subi	r20, 0x20	; 32
    5516:	41 93       	st	Z+, r20
    5518:	02 d0       	rcall	.+4      	; 0x551e <__ultoa_invert+0x84>
    551a:	a9 f7       	brne	.-22     	; 0x5506 <__ultoa_invert+0x6c>
    551c:	ea cf       	rjmp	.-44     	; 0x54f2 <__ultoa_invert+0x58>
    551e:	b4 e0       	ldi	r27, 0x04	; 4
    5520:	a6 95       	lsr	r26
    5522:	97 95       	ror	r25
    5524:	87 95       	ror	r24
    5526:	77 95       	ror	r23
    5528:	67 95       	ror	r22
    552a:	ba 95       	dec	r27
    552c:	c9 f7       	brne	.-14     	; 0x5520 <__ultoa_invert+0x86>
    552e:	00 97       	sbiw	r24, 0x00	; 0
    5530:	61 05       	cpc	r22, r1
    5532:	71 05       	cpc	r23, r1
    5534:	08 95       	ret
    5536:	9b 01       	movw	r18, r22
    5538:	ac 01       	movw	r20, r24
    553a:	0a 2e       	mov	r0, r26
    553c:	06 94       	lsr	r0
    553e:	57 95       	ror	r21
    5540:	47 95       	ror	r20
    5542:	37 95       	ror	r19
    5544:	27 95       	ror	r18
    5546:	ba 95       	dec	r27
    5548:	c9 f7       	brne	.-14     	; 0x553c <__ultoa_invert+0xa2>
    554a:	62 0f       	add	r22, r18
    554c:	73 1f       	adc	r23, r19
    554e:	84 1f       	adc	r24, r20
    5550:	95 1f       	adc	r25, r21
    5552:	a0 1d       	adc	r26, r0
    5554:	08 95       	ret

00005556 <__prologue_saves__>:
    5556:	2f 92       	push	r2
    5558:	3f 92       	push	r3
    555a:	4f 92       	push	r4
    555c:	5f 92       	push	r5
    555e:	6f 92       	push	r6
    5560:	7f 92       	push	r7
    5562:	8f 92       	push	r8
    5564:	9f 92       	push	r9
    5566:	af 92       	push	r10
    5568:	bf 92       	push	r11
    556a:	cf 92       	push	r12
    556c:	df 92       	push	r13
    556e:	ef 92       	push	r14
    5570:	ff 92       	push	r15
    5572:	0f 93       	push	r16
    5574:	1f 93       	push	r17
    5576:	cf 93       	push	r28
    5578:	df 93       	push	r29
    557a:	cd b7       	in	r28, 0x3d	; 61
    557c:	de b7       	in	r29, 0x3e	; 62
    557e:	ca 1b       	sub	r28, r26
    5580:	db 0b       	sbc	r29, r27
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	09 94       	ijmp

0000558e <__epilogue_restores__>:
    558e:	2a 88       	ldd	r2, Y+18	; 0x12
    5590:	39 88       	ldd	r3, Y+17	; 0x11
    5592:	48 88       	ldd	r4, Y+16	; 0x10
    5594:	5f 84       	ldd	r5, Y+15	; 0x0f
    5596:	6e 84       	ldd	r6, Y+14	; 0x0e
    5598:	7d 84       	ldd	r7, Y+13	; 0x0d
    559a:	8c 84       	ldd	r8, Y+12	; 0x0c
    559c:	9b 84       	ldd	r9, Y+11	; 0x0b
    559e:	aa 84       	ldd	r10, Y+10	; 0x0a
    55a0:	b9 84       	ldd	r11, Y+9	; 0x09
    55a2:	c8 84       	ldd	r12, Y+8	; 0x08
    55a4:	df 80       	ldd	r13, Y+7	; 0x07
    55a6:	ee 80       	ldd	r14, Y+6	; 0x06
    55a8:	fd 80       	ldd	r15, Y+5	; 0x05
    55aa:	0c 81       	ldd	r16, Y+4	; 0x04
    55ac:	1b 81       	ldd	r17, Y+3	; 0x03
    55ae:	aa 81       	ldd	r26, Y+2	; 0x02
    55b0:	b9 81       	ldd	r27, Y+1	; 0x01
    55b2:	ce 0f       	add	r28, r30
    55b4:	d1 1d       	adc	r29, r1
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	f8 94       	cli
    55ba:	de bf       	out	0x3e, r29	; 62
    55bc:	0f be       	out	0x3f, r0	; 63
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	ed 01       	movw	r28, r26
    55c2:	08 95       	ret

000055c4 <_exit>:
    55c4:	f8 94       	cli

000055c6 <__stop_program>:
    55c6:	ff cf       	rjmp	.-2      	; 0x55c6 <__stop_program>
